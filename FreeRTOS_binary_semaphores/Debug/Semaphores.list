
Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005764  08005764  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005764  08005764  00006764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005768  08005768  00006768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800576c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f8  20000060  080057cc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  080057cc  00007258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015322  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003025  00000000  00000000  0001c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0001f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df8  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023910  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015223  00000000  00000000  00044cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d97ba  00000000  00000000  00059ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001336ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  001336f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001384d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005578 	.word	0x08005578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005578 	.word	0x08005578

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	@ (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	@ 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c
 8000540:	2000011c 	.word	0x2000011c

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b09e      	sub	sp, #120	@ 0x78
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fba5 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f871 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f907 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f8db 	bl	8000710 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Semaphore1 */
  osSemaphoreDef(Semaphore1);
 800055a:	2300      	movs	r3, #0
 800055c:	673b      	str	r3, [r7, #112]	@ 0x70
 800055e:	2300      	movs	r3, #0
 8000560:	677b      	str	r3, [r7, #116]	@ 0x74
  Semaphore1Handle = osSemaphoreCreate(osSemaphore(Semaphore1), 1);
 8000562:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000566:	2101      	movs	r1, #1
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fbba 	bl	8002ce2 <osSemaphoreCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <main+0xcc>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000574:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <main+0xd0>)
 8000576:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000588:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fb47 	bl	8002c22 <osThreadCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a20      	ldr	r2, [pc, #128]	@ (8000618 <main+0xd4>)
 8000598:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighP */
  osThreadDef(HighP, HighPriority, osPriorityAboveNormal, 0, 128);
 800059a:	4b20      	ldr	r3, [pc, #128]	@ (800061c <main+0xd8>)
 800059c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighPHandle = osThreadCreate(osThread(HighP), NULL);
 80005ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb34 	bl	8002c22 <osThreadCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <main+0xdc>)
 80005be:	6013      	str	r3, [r2, #0]

  /* definition and creation of NormalP */
  osThreadDef(NormalP, NormalPriority, osPriorityNormal, 0, 128);
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <main+0xe0>)
 80005c2:	f107 041c 	add.w	r4, r7, #28
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalPHandle = osThreadCreate(osThread(NormalP), NULL);
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fb21 	bl	8002c22 <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <main+0xe4>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of BelowP */
  osThreadDef(BelowP, BelowPriority, osPriorityBelowNormal, 0, 128);
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <main+0xe8>)
 80005e8:	463c      	mov	r4, r7
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BelowPHandle = osThreadCreate(osThread(BelowP), NULL);
 80005f8:	463b      	mov	r3, r7
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fb10 	bl	8002c22 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <main+0xec>)
 8000606:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f002 fb04 	bl	8002c14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0xc8>
 8000610:	20000374 	.word	0x20000374
 8000614:	0800559c 	.word	0x0800559c
 8000618:	20000364 	.word	0x20000364
 800061c:	080055c0 	.word	0x080055c0
 8000620:	20000368 	.word	0x20000368
 8000624:	080055e4 	.word	0x080055e4
 8000628:	2000036c 	.word	0x2000036c
 800062c:	08005608 	.word	0x08005608
 8000630:	20000370 	.word	0x20000370

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	@ 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 feb0 	bl	80053a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <SystemClock_Config+0xd4>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <SystemClock_Config+0xd4>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemClock_Config+0xd8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <SystemClock_Config+0xd8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f936 	bl	8001934 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ce:	f000 f98b 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fda4 	bl	800123c <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006fa:	f000 f975 	bl	80009e8 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fe2e 	bl	80023a8 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f949 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000031c 	.word	0x2000031c
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	4812      	ldr	r0, [pc, #72]	@ (8000838 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 fd0a 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_GPIO_Init+0xd8>)
 800080c:	f000 fb68 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000810:	2320      	movs	r3, #32
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fb5a 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020800 	.word	0x40020800

08000840 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f002 fa36 	bl	8002cba <osDelay>
 800084e:	e7fb      	b.n	8000848 <StartDefaultTask+0x8>

08000850 <HighPriority>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HighPriority */
void HighPriority(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HighPriority */
  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered high priority task\r\n";
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <HighPriority+0x7c>)
 800085a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1),1000);
 800085c:	6978      	ldr	r0, [r7, #20]
 800085e:	f7ff fcd7 	bl	8000210 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <HighPriority+0x80>)
 800086e:	f001 fdeb 	bl	8002448 <HAL_UART_Transmit>

    osSemaphoreWait(Semaphore1Handle,osWaitForever);
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HighPriority+0x84>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f04f 31ff 	mov.w	r1, #4294967295
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fa64 	bl	8002d48 <osSemaphoreWait>

    char *str3 = "Semaphore acquired by a high priority task\r\n";
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HighPriority+0x88>)
 8000882:	613b      	str	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3),1000);
 8000884:	6938      	ldr	r0, [r7, #16]
 8000886:	f7ff fcc3 	bl	8000210 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000892:	6939      	ldr	r1, [r7, #16]
 8000894:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <HighPriority+0x80>)
 8000896:	f001 fdd7 	bl	8002448 <HAL_UART_Transmit>

	char *str2 = "leaving high priority task\r\n";
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HighPriority+0x8c>)
 800089c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2),1000);
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f7ff fcb6 	bl	8000210 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <HighPriority+0x80>)
 80008b0:	f001 fdca 	bl	8002448 <HAL_UART_Transmit>

	osSemaphoreRelease(Semaphore1Handle);
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HighPriority+0x84>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fa93 	bl	8002de4 <osSemaphoreRelease>
    osDelay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c2:	f002 f9fa 	bl	8002cba <osDelay>
  {
 80008c6:	bf00      	nop
 80008c8:	e7c6      	b.n	8000858 <HighPriority+0x8>
 80008ca:	bf00      	nop
 80008cc:	08005624 	.word	0x08005624
 80008d0:	2000031c 	.word	0x2000031c
 80008d4:	20000374 	.word	0x20000374
 80008d8:	08005644 	.word	0x08005644
 80008dc:	08005674 	.word	0x08005674

080008e0 <NormalPriority>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NormalPriority */
void NormalPriority(void const * argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NormalPriority */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Entered normal priority task\r\n";
 80008e8:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <NormalPriority+0x7c>)
 80008ea:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1),1000);
 80008ec:	6978      	ldr	r0, [r7, #20]
 80008ee:	f7ff fc8f 	bl	8000210 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fa:	6979      	ldr	r1, [r7, #20]
 80008fc:	4818      	ldr	r0, [pc, #96]	@ (8000960 <NormalPriority+0x80>)
 80008fe:	f001 fda3 	bl	8002448 <HAL_UART_Transmit>

	  osSemaphoreWait(Semaphore1Handle,osWaitForever);
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <NormalPriority+0x84>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f04f 31ff 	mov.w	r1, #4294967295
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fa1c 	bl	8002d48 <osSemaphoreWait>

	  char *str3 = "Semaphore acquired by a normal priority task\r\n";
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <NormalPriority+0x88>)
 8000912:	613b      	str	r3, [r7, #16]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str3, strlen(str3),1000);
 8000914:	6938      	ldr	r0, [r7, #16]
 8000916:	f7ff fc7b 	bl	8000210 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	480e      	ldr	r0, [pc, #56]	@ (8000960 <NormalPriority+0x80>)
 8000926:	f001 fd8f 	bl	8002448 <HAL_UART_Transmit>

	  char *str2 = "leaving normal priority task\r\n";
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <NormalPriority+0x8c>)
 800092c:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2),1000);
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff fc6e 	bl	8000210 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093c:	68f9      	ldr	r1, [r7, #12]
 800093e:	4808      	ldr	r0, [pc, #32]	@ (8000960 <NormalPriority+0x80>)
 8000940:	f001 fd82 	bl	8002448 <HAL_UART_Transmit>

	  osSemaphoreRelease(Semaphore1Handle);
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <NormalPriority+0x84>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fa4b 	bl	8002de4 <osSemaphoreRelease>
	  osDelay(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000952:	f002 f9b2 	bl	8002cba <osDelay>
  {
 8000956:	bf00      	nop
 8000958:	e7c6      	b.n	80008e8 <NormalPriority+0x8>
 800095a:	bf00      	nop
 800095c:	08005694 	.word	0x08005694
 8000960:	2000031c 	.word	0x2000031c
 8000964:	20000374 	.word	0x20000374
 8000968:	080056b4 	.word	0x080056b4
 800096c:	080056e4 	.word	0x080056e4

08000970 <BelowPriority>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BelowPriority */
void BelowPriority(void const * argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BelowPriority */
  /* Infinite loop */
  for(;;)
  {

		char *str1 = "Entered low priority task\r\n";
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <BelowPriority+0x48>)
 800097a:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1),1000);
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff fc47 	bl	8000210 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29a      	uxth	r2, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	480b      	ldr	r0, [pc, #44]	@ (80009bc <BelowPriority+0x4c>)
 800098e:	f001 fd5b 	bl	8002448 <HAL_UART_Transmit>

		char *str2 = "leaving low priority task\r\n";
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <BelowPriority+0x50>)
 8000994:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2),1000);
 8000996:	68b8      	ldr	r0, [r7, #8]
 8000998:	f7ff fc3a 	bl	8000210 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <BelowPriority+0x4c>)
 80009a8:	f001 fd4e 	bl	8002448 <HAL_UART_Transmit>

	    osDelay(500);
 80009ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b0:	f002 f983 	bl	8002cba <osDelay>
  {
 80009b4:	bf00      	nop
 80009b6:	e7df      	b.n	8000978 <BelowPriority+0x8>
 80009b8:	08005704 	.word	0x08005704
 80009bc:	2000031c 	.word	0x2000031c
 80009c0:	08005720 	.word	0x08005720

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 f981 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fa27 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_UART_MspInit+0x8c>)
 8000ac2:	f000 fa0d 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	@ 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <HAL_InitTick+0xe4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	4a32      	ldr	r2, [pc, #200]	@ (8000bc0 <HAL_InitTick+0xe4>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afc:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <HAL_InitTick+0xe4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fcac 	bl	8001470 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b22:	f000 fc7d 	bl	8001420 <HAL_RCC_GetPCLK1Freq>
 8000b26:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b28:	e004      	b.n	8000b34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b2a:	f000 fc79 	bl	8001420 <HAL_RCC_GetPCLK1Freq>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b36:	4a23      	ldr	r2, [pc, #140]	@ (8000bc4 <HAL_InitTick+0xe8>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0c9b      	lsrs	r3, r3, #18
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b44:	4a21      	ldr	r2, [pc, #132]	@ (8000bcc <HAL_InitTick+0xf0>)
 8000b46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b50:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b68:	4817      	ldr	r0, [pc, #92]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b6a:	f001 f981 	bl	8001e70 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d11b      	bne.n	8000bb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b7c:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <HAL_InitTick+0xec>)
 8000b7e:	f001 f9d1 	bl	8001f24 <HAL_TIM_Base_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d111      	bne.n	8000bb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b90:	2036      	movs	r0, #54	@ 0x36
 8000b92:	f000 f997 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d808      	bhi.n	8000bae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2036      	movs	r0, #54	@ 0x36
 8000ba2:	f000 f973 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_InitTick+0xf4>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e002      	b.n	8000bb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3738      	adds	r7, #56	@ 0x38
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	20000378 	.word	0x20000378
 8000bcc:	40001000 	.word	0x40001000
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f001 f9f7 	bl	8002004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000378 	.word	0x20000378

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 fbf7 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc65 	bl	8000544 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c88:	0800576c 	.word	0x0800576c
  ldr r2, =_sbss
 8000c8c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c90:	20004258 	.word	0x20004258

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff ff08 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe92 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200003c0 	.word	0x200003c0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200003c0 	.word	0x200003c0

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e165      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8154 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80ae 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a5c      	ldr	r2, [pc, #368]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b5a      	ldr	r3, [pc, #360]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a58      	ldr	r2, [pc, #352]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	@ (80011e8 <HAL_GPIO_Init+0x308>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x20a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	@ (80011fc <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x202>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae96 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e0cc      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001250:	4b68      	ldr	r3, [pc, #416]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d90c      	bls.n	8001278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b65      	ldr	r3, [pc, #404]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b63      	ldr	r3, [pc, #396]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0b8      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001290:	4b59      	ldr	r3, [pc, #356]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	4a58      	ldr	r2, [pc, #352]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800129a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a52      	ldr	r2, [pc, #328]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b4:	4b50      	ldr	r3, [pc, #320]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	494d      	ldr	r1, [pc, #308]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d044      	beq.n	800135c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d119      	bne.n	800131a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e07f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d003      	beq.n	80012fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e06f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e067      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131a:	4b37      	ldr	r3, [pc, #220]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 0203 	bic.w	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4934      	ldr	r1, [pc, #208]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	4313      	orrs	r3, r2
 800132a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001332:	e00a      	b.n	800134a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001342:	4293      	cmp	r3, r2
 8001344:	d901      	bls.n	800134a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e04f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 020c 	and.w	r2, r3, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	429a      	cmp	r2, r3
 800135a:	d1eb      	bne.n	8001334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800135c:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d20c      	bcs.n	8001384 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e032      	b.n	80013ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4916      	ldr	r1, [pc, #88]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	490e      	ldr	r1, [pc, #56]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c2:	f000 f887 	bl	80014d4 <HAL_RCC_GetSysClockFreq>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	490a      	ldr	r1, [pc, #40]	@ (80013fc <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	5ccb      	ldrb	r3, [r1, r3]
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_RCC_ClockConfig+0x1c8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fb7a 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00
 80013f8:	40023800 	.word	0x40023800
 80013fc:	08005744 	.word	0x08005744
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_RCC_GetHCLKFreq+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001424:	f7ff fff0 	bl	8001408 <HAL_RCC_GetHCLKFreq>
 8001428:	4602      	mov	r2, r0
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	0a9b      	lsrs	r3, r3, #10
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	4903      	ldr	r1, [pc, #12]	@ (8001444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001436:	5ccb      	ldrb	r3, [r1, r3]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	08005754 	.word	0x08005754

08001448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800144c:	f7ff ffdc 	bl	8001408 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	0b5b      	lsrs	r3, r3, #13
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	4903      	ldr	r1, [pc, #12]	@ (800146c <HAL_RCC_GetPCLK2Freq+0x24>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	08005754 	.word	0x08005754

08001470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	220f      	movs	r2, #15
 800147e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_RCC_GetClockConfig+0x5c>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <HAL_RCC_GetClockConfig+0x5c>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <HAL_RCC_GetClockConfig+0x5c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <HAL_RCC_GetClockConfig+0x60>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 020f 	and.w	r2, r3, #15
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d8:	b0ae      	sub	sp, #184	@ 0xb8
 80014da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fa:	4bcb      	ldr	r3, [pc, #812]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b0c      	cmp	r3, #12
 8001504:	f200 8206 	bhi.w	8001914 <HAL_RCC_GetSysClockFreq+0x440>
 8001508:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <HAL_RCC_GetSysClockFreq+0x3c>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001545 	.word	0x08001545
 8001514:	08001915 	.word	0x08001915
 8001518:	08001915 	.word	0x08001915
 800151c:	08001915 	.word	0x08001915
 8001520:	0800154d 	.word	0x0800154d
 8001524:	08001915 	.word	0x08001915
 8001528:	08001915 	.word	0x08001915
 800152c:	08001915 	.word	0x08001915
 8001530:	08001555 	.word	0x08001555
 8001534:	08001915 	.word	0x08001915
 8001538:	08001915 	.word	0x08001915
 800153c:	08001915 	.word	0x08001915
 8001540:	08001745 	.word	0x08001745
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001544:	4bb9      	ldr	r3, [pc, #740]	@ (800182c <HAL_RCC_GetSysClockFreq+0x358>)
 8001546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800154a:	e1e7      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800154c:	4bb8      	ldr	r3, [pc, #736]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x35c>)
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001552:	e1e3      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001554:	4bb4      	ldr	r3, [pc, #720]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800155c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001560:	4bb1      	ldr	r3, [pc, #708]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d071      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	4bae      	ldr	r3, [pc, #696]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001578:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800157c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800158e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001592:	4622      	mov	r2, r4
 8001594:	462b      	mov	r3, r5
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	0159      	lsls	r1, r3, #5
 80015a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a4:	0150      	lsls	r0, r2, #5
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4621      	mov	r1, r4
 80015ac:	1a51      	subs	r1, r2, r1
 80015ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80015b0:	4629      	mov	r1, r5
 80015b2:	eb63 0301 	sbc.w	r3, r3, r1
 80015b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015c4:	4649      	mov	r1, r9
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ce:	4641      	mov	r1, r8
 80015d0:	018a      	lsls	r2, r1, #6
 80015d2:	4641      	mov	r1, r8
 80015d4:	1a51      	subs	r1, r2, r1
 80015d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015d8:	4649      	mov	r1, r9
 80015da:	eb63 0301 	sbc.w	r3, r3, r1
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015ec:	4649      	mov	r1, r9
 80015ee:	00cb      	lsls	r3, r1, #3
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015f6:	4641      	mov	r1, r8
 80015f8:	00ca      	lsls	r2, r1, #3
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	4622      	mov	r2, r4
 8001602:	189b      	adds	r3, r3, r2
 8001604:	633b      	str	r3, [r7, #48]	@ 0x30
 8001606:	462b      	mov	r3, r5
 8001608:	460a      	mov	r2, r1
 800160a:	eb42 0303 	adc.w	r3, r2, r3
 800160e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800161c:	4629      	mov	r1, r5
 800161e:	024b      	lsls	r3, r1, #9
 8001620:	4621      	mov	r1, r4
 8001622:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001626:	4621      	mov	r1, r4
 8001628:	024a      	lsls	r2, r1, #9
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001632:	2200      	movs	r2, #0
 8001634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800163c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001640:	f7fe fdee 	bl	8000220 <__aeabi_uldivmod>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4613      	mov	r3, r2
 800164a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800164e:	e067      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001650:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	2200      	movs	r2, #0
 8001658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800165c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	67bb      	str	r3, [r7, #120]	@ 0x78
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800166e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001672:	4622      	mov	r2, r4
 8001674:	462b      	mov	r3, r5
 8001676:	f04f 0000 	mov.w	r0, #0
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	0159      	lsls	r1, r3, #5
 8001680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001684:	0150      	lsls	r0, r2, #5
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4621      	mov	r1, r4
 800168c:	1a51      	subs	r1, r2, r1
 800168e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001690:	4629      	mov	r1, r5
 8001692:	eb63 0301 	sbc.w	r3, r3, r1
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016a4:	4649      	mov	r1, r9
 80016a6:	018b      	lsls	r3, r1, #6
 80016a8:	4641      	mov	r1, r8
 80016aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ae:	4641      	mov	r1, r8
 80016b0:	018a      	lsls	r2, r1, #6
 80016b2:	4641      	mov	r1, r8
 80016b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016b8:	4649      	mov	r1, r9
 80016ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016d2:	4692      	mov	sl, r2
 80016d4:	469b      	mov	fp, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	eb1a 0303 	adds.w	r3, sl, r3
 80016dc:	623b      	str	r3, [r7, #32]
 80016de:	462b      	mov	r3, r5
 80016e0:	eb4b 0303 	adc.w	r3, fp, r3
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016f2:	4629      	mov	r1, r5
 80016f4:	028b      	lsls	r3, r1, #10
 80016f6:	4621      	mov	r1, r4
 80016f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016fc:	4621      	mov	r1, r4
 80016fe:	028a      	lsls	r2, r1, #10
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001708:	2200      	movs	r2, #0
 800170a:	673b      	str	r3, [r7, #112]	@ 0x70
 800170c:	677a      	str	r2, [r7, #116]	@ 0x74
 800170e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001712:	f7fe fd85 	bl	8000220 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4613      	mov	r3, r2
 800171c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001736:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001742:	e0eb      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800174c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001750:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d06b      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175c:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x354>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	2200      	movs	r2, #0
 8001764:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001766:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800176a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001770:	2300      	movs	r3, #0
 8001772:	667b      	str	r3, [r7, #100]	@ 0x64
 8001774:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001778:	4622      	mov	r2, r4
 800177a:	462b      	mov	r3, r5
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0159      	lsls	r1, r3, #5
 8001786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178a:	0150      	lsls	r0, r2, #5
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4621      	mov	r1, r4
 8001792:	1a51      	subs	r1, r2, r1
 8001794:	61b9      	str	r1, [r7, #24]
 8001796:	4629      	mov	r1, r5
 8001798:	eb63 0301 	sbc.w	r3, r3, r1
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017aa:	4659      	mov	r1, fp
 80017ac:	018b      	lsls	r3, r1, #6
 80017ae:	4651      	mov	r1, sl
 80017b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b4:	4651      	mov	r1, sl
 80017b6:	018a      	lsls	r2, r1, #6
 80017b8:	4651      	mov	r1, sl
 80017ba:	ebb2 0801 	subs.w	r8, r2, r1
 80017be:	4659      	mov	r1, fp
 80017c0:	eb63 0901 	sbc.w	r9, r3, r1
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d8:	4690      	mov	r8, r2
 80017da:	4699      	mov	r9, r3
 80017dc:	4623      	mov	r3, r4
 80017de:	eb18 0303 	adds.w	r3, r8, r3
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	462b      	mov	r3, r5
 80017e6:	eb49 0303 	adc.w	r3, r9, r3
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017f8:	4629      	mov	r1, r5
 80017fa:	024b      	lsls	r3, r1, #9
 80017fc:	4621      	mov	r1, r4
 80017fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001802:	4621      	mov	r1, r4
 8001804:	024a      	lsls	r2, r1, #9
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180e:	2200      	movs	r2, #0
 8001810:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001812:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001818:	f7fe fd02 	bl	8000220 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001826:	e065      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x420>
 8001828:	40023800 	.word	0x40023800
 800182c:	00f42400 	.word	0x00f42400
 8001830:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <HAL_RCC_GetSysClockFreq+0x458>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	2200      	movs	r2, #0
 800183c:	4618      	mov	r0, r3
 800183e:	4611      	mov	r1, r2
 8001840:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001844:	653b      	str	r3, [r7, #80]	@ 0x50
 8001846:	2300      	movs	r3, #0
 8001848:	657b      	str	r3, [r7, #84]	@ 0x54
 800184a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800184e:	4642      	mov	r2, r8
 8001850:	464b      	mov	r3, r9
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	0159      	lsls	r1, r3, #5
 800185c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001860:	0150      	lsls	r0, r2, #5
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4641      	mov	r1, r8
 8001868:	1a51      	subs	r1, r2, r1
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	4649      	mov	r1, r9
 800186e:	eb63 0301 	sbc.w	r3, r3, r1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001880:	4659      	mov	r1, fp
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	4651      	mov	r1, sl
 8001886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800188a:	4651      	mov	r1, sl
 800188c:	018a      	lsls	r2, r1, #6
 800188e:	4651      	mov	r1, sl
 8001890:	1a54      	subs	r4, r2, r1
 8001892:	4659      	mov	r1, fp
 8001894:	eb63 0501 	sbc.w	r5, r3, r1
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	00eb      	lsls	r3, r5, #3
 80018a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a6:	00e2      	lsls	r2, r4, #3
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	4643      	mov	r3, r8
 80018ae:	18e3      	adds	r3, r4, r3
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	464b      	mov	r3, r9
 80018b4:	eb45 0303 	adc.w	r3, r5, r3
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c6:	4629      	mov	r1, r5
 80018c8:	028b      	lsls	r3, r1, #10
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d0:	4621      	mov	r1, r4
 80018d2:	028a      	lsls	r2, r1, #10
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018dc:	2200      	movs	r2, #0
 80018de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018e6:	f7fe fc9b 	bl	8000220 <__aeabi_uldivmod>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4613      	mov	r3, r2
 80018f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_GetSysClockFreq+0x458>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0f1b      	lsrs	r3, r3, #28
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001912:	e003      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800191a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001920:	4618      	mov	r0, r3
 8001922:	37b8      	adds	r7, #184	@ 0xb8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400

08001934 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e28d      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8083 	beq.w	8001a5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001954:	4b94      	ldr	r3, [pc, #592]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b04      	cmp	r3, #4
 800195e:	d019      	beq.n	8001994 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001960:	4b91      	ldr	r3, [pc, #580]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
        || \
 8001968:	2b08      	cmp	r3, #8
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800196c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001974:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b88      	ldr	r3, [pc, #544]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b84      	ldr	r3, [pc, #528]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x124>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e25a      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x90>
 80019b6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7b      	ldr	r2, [pc, #492]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xcc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0xb4>
 80019ce:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a75      	ldr	r2, [pc, #468]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b73      	ldr	r3, [pc, #460]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a72      	ldr	r2, [pc, #456]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xcc>
 80019e8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff f97c 	bl	8000d04 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff f978 	bl	8000d04 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	@ 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e21f      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xdc>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f968 	bl	8000d04 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff f964 	bl	8000d04 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e20b      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x104>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d06f      	beq.n	8001b46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a66:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d017      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d105      	bne.n	8001a8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b44      	ldr	r3, [pc, #272]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x186>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1d3      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4937      	ldr	r1, [pc, #220]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <HAL_RCC_OscConfig+0x278>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f911 	bl	8000d04 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f90d 	bl	8000d04 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1b4      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4925      	ldr	r1, [pc, #148]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_RCC_OscConfig+0x278>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8f0 	bl	8000d04 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff f8ec 	bl	8000d04 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e193      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f8d0 	bl	8000d04 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff f8cc 	bl	8000d04 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e173      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x234>
 8001b86:	e01b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f8b9 	bl	8000d04 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff f8b5 	bl	8000d04 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d907      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e15c      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b8a      	ldr	r3, [pc, #552]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ea      	bne.n	8001b96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8097 	beq.w	8001cfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b83      	ldr	r3, [pc, #524]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b7f      	ldr	r3, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a7e      	ldr	r2, [pc, #504]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b7c      	ldr	r3, [pc, #496]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b79      	ldr	r3, [pc, #484]	@ (8001de4 <HAL_RCC_OscConfig+0x4b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b76      	ldr	r3, [pc, #472]	@ (8001de4 <HAL_RCC_OscConfig+0x4b0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a75      	ldr	r2, [pc, #468]	@ (8001de4 <HAL_RCC_OscConfig+0x4b0>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f875 	bl	8000d04 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff f871 	bl	8000d04 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e118      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b6c      	ldr	r3, [pc, #432]	@ (8001de4 <HAL_RCC_OscConfig+0x4b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x31e>
 8001c44:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	4a65      	ldr	r2, [pc, #404]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x358>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x340>
 8001c5a:	4b61      	ldr	r3, [pc, #388]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	4a60      	ldr	r2, [pc, #384]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c66:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x358>
 8001c74:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	4a59      	ldr	r2, [pc, #356]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c80:	4b57      	ldr	r3, [pc, #348]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c84:	4a56      	ldr	r2, [pc, #344]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f836 	bl	8000d04 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f832 	bl	8000d04 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0d7      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ee      	beq.n	8001c9c <HAL_RCC_OscConfig+0x368>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f820 	bl	8000d04 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f81c 	bl	8000d04 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0c1      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ee      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80ad 	beq.w	8001e60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d06:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d060      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d145      	bne.n	8001da6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <HAL_RCC_OscConfig+0x4b4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7fe fff0 	bl	8000d04 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ffec 	bl	8000d04 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e093      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	071b      	lsls	r3, r3, #28
 8001d72:	491b      	ldr	r1, [pc, #108]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x4b4>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ffc1 	bl	8000d04 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe ffbd 	bl	8000d04 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e064      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x452>
 8001da4:	e05c      	b.n	8001e60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_RCC_OscConfig+0x4b4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe ffaa 	bl	8000d04 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe ffa6 	bl	8000d04 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04d      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x480>
 8001dd2:	e045      	b.n	8001e60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e040      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <HAL_RCC_OscConfig+0x538>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d030      	beq.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d129      	bne.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d122      	bne.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d119      	bne.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10f      	bne.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e041      	b.n	8001f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f839 	bl	8001f0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 f9c0 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e04e      	b.n	8001fda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f66:	d01d      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fec <HAL_TIM_Base_Start_IT+0xc8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d018      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00e      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d010      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	e007      	b.n	8001fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	40014000 	.word	0x40014000
 8002000:	40001800 	.word	0x40001800

08002004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d020      	beq.n	8002068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0202 	mvn.w	r2, #2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8d2 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8c4 	bl	80021e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8d5 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d020      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0204 	mvn.w	r2, #4
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8ac 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f89e 	bl	80021e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8af 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d020      	beq.n	8002100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0208 	mvn.w	r2, #8
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2204      	movs	r2, #4
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f886 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f878 	bl	80021e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f889 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d020      	beq.n	800214c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0210 	mvn.w	r2, #16
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2208      	movs	r2, #8
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f860 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f852 	bl	80021e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f863 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0201 	mvn.w	r2, #1
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fc2a 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f900 	bl	8002394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f834 	bl	8002220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0220 	mvn.w	r2, #32
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8d2 	bl	8002380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a43      	ldr	r2, [pc, #268]	@ (8002354 <TIM_Base_SetConfig+0x120>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002252:	d00f      	beq.n	8002274 <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a40      	ldr	r2, [pc, #256]	@ (8002358 <TIM_Base_SetConfig+0x124>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00b      	beq.n	8002274 <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3f      	ldr	r2, [pc, #252]	@ (800235c <TIM_Base_SetConfig+0x128>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <TIM_Base_SetConfig+0x12c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	@ (8002364 <TIM_Base_SetConfig+0x130>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <TIM_Base_SetConfig+0x120>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02b      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002294:	d027      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a2f      	ldr	r2, [pc, #188]	@ (8002358 <TIM_Base_SetConfig+0x124>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d023      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2e      	ldr	r2, [pc, #184]	@ (800235c <TIM_Base_SetConfig+0x128>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <TIM_Base_SetConfig+0x12c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01b      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <TIM_Base_SetConfig+0x130>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d017      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <TIM_Base_SetConfig+0x134>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	@ (800236c <TIM_Base_SetConfig+0x138>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00f      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a29      	ldr	r2, [pc, #164]	@ (8002370 <TIM_Base_SetConfig+0x13c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a28      	ldr	r2, [pc, #160]	@ (8002374 <TIM_Base_SetConfig+0x140>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <TIM_Base_SetConfig+0x144>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d003      	beq.n	80022e6 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a26      	ldr	r2, [pc, #152]	@ (800237c <TIM_Base_SetConfig+0x148>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <TIM_Base_SetConfig+0x120>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <TIM_Base_SetConfig+0xf2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <TIM_Base_SetConfig+0x130>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d103      	bne.n	800232e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	40000c00 	.word	0x40000c00
 8002364:	40010400 	.word	0x40010400
 8002368:	40014000 	.word	0x40014000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800
 8002374:	40001800 	.word	0x40001800
 8002378:	40001c00 	.word	0x40001c00
 800237c:	40002000 	.word	0x40002000

08002380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e042      	b.n	8002440 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fb3c 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	@ 0x24
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f973 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	d175      	bne.n	8002554 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Transmit+0x2c>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e06e      	b.n	8002556 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	@ 0x21
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002486:	f7fe fc3d 	bl	8000d04 <HAL_GetTick>
 800248a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a0:	d108      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e003      	b.n	80024bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024bc:	e02e      	b.n	800251c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f848 	bl	800255e <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03a      	b.n	8002556 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3302      	adds	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	e007      	b.n	800250e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1cb      	bne.n	80024be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f814 	bl	800255e <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e006      	b.n	8002556 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256e:	e03b      	b.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d037      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002578:	f7fe fbc4 	bl	8000d04 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	6a3a      	ldr	r2, [r7, #32]
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <UART_WaitOnFlagUntilTimeout+0x30>
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e03a      	b.n	8002608 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b80      	cmp	r3, #128	@ 0x80
 80025a4:	d020      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b40      	cmp	r3, #64	@ 0x40
 80025aa:	d01d      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d116      	bne.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f81d 	bl	8002610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2208      	movs	r2, #8
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e00f      	b.n	8002608 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	429a      	cmp	r2, r3
 8002604:	d0b4      	beq.n	8002570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b480      	push	{r7}
 8002612:	b095      	sub	sp, #84	@ 0x54
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002638:	643a      	str	r2, [r7, #64]	@ 0x40
 800263a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800263e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	61fb      	str	r3, [r7, #28]
   return(result);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800266c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	2b01      	cmp	r3, #1
 8002686:	d119      	bne.n	80026bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	60bb      	str	r3, [r7, #8]
   return(result);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026a8:	61ba      	str	r2, [r7, #24]
 80026aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	e841 2300 	strex	r3, r2, [r1]
 80026b4:	613b      	str	r3, [r7, #16]
   return(result);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026ca:	bf00      	nop
 80026cc:	3754      	adds	r7, #84	@ 0x54
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b0c0      	sub	sp, #256	@ 0x100
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	ea40 0301 	orr.w	r3, r0, r1
 8002700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	431a      	orrs	r2, r3
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	431a      	orrs	r2, r3
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002730:	f021 010c 	bic.w	r1, r1, #12
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002752:	6999      	ldr	r1, [r3, #24]
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	ea40 0301 	orr.w	r3, r0, r1
 800275e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b8f      	ldr	r3, [pc, #572]	@ (80029a4 <UART_SetConfig+0x2cc>)
 8002768:	429a      	cmp	r2, r3
 800276a:	d005      	beq.n	8002778 <UART_SetConfig+0xa0>
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b8d      	ldr	r3, [pc, #564]	@ (80029a8 <UART_SetConfig+0x2d0>)
 8002774:	429a      	cmp	r2, r3
 8002776:	d104      	bne.n	8002782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002778:	f7fe fe66 	bl	8001448 <HAL_RCC_GetPCLK2Freq>
 800277c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002780:	e003      	b.n	800278a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002782:	f7fe fe4d 	bl	8001420 <HAL_RCC_GetPCLK1Freq>
 8002786:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002794:	f040 810c 	bne.w	80029b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80027aa:	4622      	mov	r2, r4
 80027ac:	462b      	mov	r3, r5
 80027ae:	1891      	adds	r1, r2, r2
 80027b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027b2:	415b      	adcs	r3, r3
 80027b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027ba:	4621      	mov	r1, r4
 80027bc:	eb12 0801 	adds.w	r8, r2, r1
 80027c0:	4629      	mov	r1, r5
 80027c2:	eb43 0901 	adc.w	r9, r3, r1
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027da:	4690      	mov	r8, r2
 80027dc:	4699      	mov	r9, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	eb18 0303 	adds.w	r3, r8, r3
 80027e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027e8:	462b      	mov	r3, r5
 80027ea:	eb49 0303 	adc.w	r3, r9, r3
 80027ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002806:	460b      	mov	r3, r1
 8002808:	18db      	adds	r3, r3, r3
 800280a:	653b      	str	r3, [r7, #80]	@ 0x50
 800280c:	4613      	mov	r3, r2
 800280e:	eb42 0303 	adc.w	r3, r2, r3
 8002812:	657b      	str	r3, [r7, #84]	@ 0x54
 8002814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800281c:	f7fd fd00 	bl	8000220 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4b61      	ldr	r3, [pc, #388]	@ (80029ac <UART_SetConfig+0x2d4>)
 8002826:	fba3 2302 	umull	r2, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	011c      	lsls	r4, r3, #4
 800282e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002838:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800283c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002848:	415b      	adcs	r3, r3
 800284a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800284c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002850:	4641      	mov	r1, r8
 8002852:	eb12 0a01 	adds.w	sl, r2, r1
 8002856:	4649      	mov	r1, r9
 8002858:	eb43 0b01 	adc.w	fp, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800286c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002870:	4692      	mov	sl, r2
 8002872:	469b      	mov	fp, r3
 8002874:	4643      	mov	r3, r8
 8002876:	eb1a 0303 	adds.w	r3, sl, r3
 800287a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800287e:	464b      	mov	r3, r9
 8002880:	eb4b 0303 	adc.w	r3, fp, r3
 8002884:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002894:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800289c:	460b      	mov	r3, r1
 800289e:	18db      	adds	r3, r3, r3
 80028a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80028a2:	4613      	mov	r3, r2
 80028a4:	eb42 0303 	adc.w	r3, r2, r3
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028b2:	f7fd fcb5 	bl	8000220 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <UART_SetConfig+0x2d4>)
 80028be:	fba3 2301 	umull	r2, r3, r3, r1
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2264      	movs	r2, #100	@ 0x64
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	1acb      	subs	r3, r1, r3
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028d2:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <UART_SetConfig+0x2d4>)
 80028d4:	fba3 2302 	umull	r2, r3, r3, r2
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028e0:	441c      	add	r4, r3
 80028e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	1891      	adds	r1, r2, r2
 80028fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028fc:	415b      	adcs	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002904:	4641      	mov	r1, r8
 8002906:	1851      	adds	r1, r2, r1
 8002908:	6339      	str	r1, [r7, #48]	@ 0x30
 800290a:	4649      	mov	r1, r9
 800290c:	414b      	adcs	r3, r1
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800291c:	4659      	mov	r1, fp
 800291e:	00cb      	lsls	r3, r1, #3
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	4651      	mov	r1, sl
 8002928:	00ca      	lsls	r2, r1, #3
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	4603      	mov	r3, r0
 8002930:	4642      	mov	r2, r8
 8002932:	189b      	adds	r3, r3, r2
 8002934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002938:	464b      	mov	r3, r9
 800293a:	460a      	mov	r2, r1
 800293c:	eb42 0303 	adc.w	r3, r2, r3
 8002940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002950:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002958:	460b      	mov	r3, r1
 800295a:	18db      	adds	r3, r3, r3
 800295c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800295e:	4613      	mov	r3, r2
 8002960:	eb42 0303 	adc.w	r3, r2, r3
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800296a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800296e:	f7fd fc57 	bl	8000220 <__aeabi_uldivmod>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <UART_SetConfig+0x2d4>)
 8002978:	fba3 1302 	umull	r1, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2164      	movs	r1, #100	@ 0x64
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3332      	adds	r3, #50	@ 0x32
 800298a:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <UART_SetConfig+0x2d4>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	f003 0207 	and.w	r2, r3, #7
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4422      	add	r2, r4
 800299e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029a0:	e106      	b.n	8002bb0 <UART_SetConfig+0x4d8>
 80029a2:	bf00      	nop
 80029a4:	40011000 	.word	0x40011000
 80029a8:	40011400 	.word	0x40011400
 80029ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029b4:	2200      	movs	r2, #0
 80029b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029c2:	4642      	mov	r2, r8
 80029c4:	464b      	mov	r3, r9
 80029c6:	1891      	adds	r1, r2, r2
 80029c8:	6239      	str	r1, [r7, #32]
 80029ca:	415b      	adcs	r3, r3
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d2:	4641      	mov	r1, r8
 80029d4:	1854      	adds	r4, r2, r1
 80029d6:	4649      	mov	r1, r9
 80029d8:	eb43 0501 	adc.w	r5, r3, r1
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	00eb      	lsls	r3, r5, #3
 80029e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ea:	00e2      	lsls	r2, r4, #3
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	18e3      	adds	r3, r4, r3
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029f8:	464b      	mov	r3, r9
 80029fa:	eb45 0303 	adc.w	r3, r5, r3
 80029fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a1e:	4629      	mov	r1, r5
 8002a20:	008b      	lsls	r3, r1, #2
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a28:	4621      	mov	r1, r4
 8002a2a:	008a      	lsls	r2, r1, #2
 8002a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a30:	f7fd fbf6 	bl	8000220 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4b60      	ldr	r3, [pc, #384]	@ (8002bbc <UART_SetConfig+0x4e4>)
 8002a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	011c      	lsls	r4, r3, #4
 8002a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a54:	4642      	mov	r2, r8
 8002a56:	464b      	mov	r3, r9
 8002a58:	1891      	adds	r1, r2, r2
 8002a5a:	61b9      	str	r1, [r7, #24]
 8002a5c:	415b      	adcs	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a64:	4641      	mov	r1, r8
 8002a66:	1851      	adds	r1, r2, r1
 8002a68:	6139      	str	r1, [r7, #16]
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	414b      	adcs	r3, r1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	00cb      	lsls	r3, r1, #3
 8002a80:	4651      	mov	r1, sl
 8002a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a86:	4651      	mov	r1, sl
 8002a88:	00ca      	lsls	r2, r1, #3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4642      	mov	r2, r8
 8002a92:	189b      	adds	r3, r3, r2
 8002a94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a98:	464b      	mov	r3, r9
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002abc:	4649      	mov	r1, r9
 8002abe:	008b      	lsls	r3, r1, #2
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	008a      	lsls	r2, r1, #2
 8002aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ace:	f7fd fba7 	bl	8000220 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <UART_SetConfig+0x4e4>)
 8002ada:	fba3 2301 	umull	r2, r3, r3, r1
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2264      	movs	r2, #100	@ 0x64
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	3332      	adds	r3, #50	@ 0x32
 8002aec:	4a33      	ldr	r2, [pc, #204]	@ (8002bbc <UART_SetConfig+0x4e4>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af8:	441c      	add	r4, r3
 8002afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002afe:	2200      	movs	r2, #0
 8002b00:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b02:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	1891      	adds	r1, r2, r2
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	415b      	adcs	r3, r3
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b18:	4641      	mov	r1, r8
 8002b1a:	1851      	adds	r1, r2, r1
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	4649      	mov	r1, r9
 8002b20:	414b      	adcs	r3, r1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b30:	4659      	mov	r1, fp
 8002b32:	00cb      	lsls	r3, r1, #3
 8002b34:	4651      	mov	r1, sl
 8002b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3a:	4651      	mov	r1, sl
 8002b3c:	00ca      	lsls	r2, r1, #3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	4642      	mov	r2, r8
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	008b      	lsls	r3, r1, #2
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b76:	4641      	mov	r1, r8
 8002b78:	008a      	lsls	r2, r1, #2
 8002b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b7e:	f7fd fb4f 	bl	8000220 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <UART_SetConfig+0x4e4>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	@ 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	3332      	adds	r3, #50	@ 0x32
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <UART_SetConfig+0x4e4>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4422      	add	r2, r4
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbc:	51eb851f 	.word	0x51eb851f

08002bc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd2:	2b84      	cmp	r3, #132	@ 0x84
 8002bd4:	d005      	beq.n	8002be2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	3303      	adds	r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf6:	f3ef 8305 	mrs	r3, IPSR
 8002bfa:	607b      	str	r3, [r7, #4]
  return(result);
 8002bfc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c18:	f001 f942 	bl	8003ea0 <vTaskStartScheduler>
  
  return osOK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c24:	b089      	sub	sp, #36	@ 0x24
 8002c26:	af04      	add	r7, sp, #16
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <osThreadCreate+0x54>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01c      	beq.n	8002c76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685c      	ldr	r4, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691e      	ldr	r6, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffb6 	bl	8002bc0 <makeFreeRtosPriority>
 8002c54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c5e:	9202      	str	r2, [sp, #8]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9100      	str	r1, [sp, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4632      	mov	r2, r6
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 ff32 	bl	8003ad4 <xTaskCreateStatic>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e01c      	b.n	8002cb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685c      	ldr	r4, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff98 	bl	8002bc0 <makeFreeRtosPriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 ff77 	bl	8003b94 <xTaskCreate>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d001      	beq.n	8002cb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <osDelay+0x16>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	e000      	b.n	8002cd2 <osDelay+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f8ae 	bl	8003e34 <vTaskDelay>
  
  return osOK;
 8002cd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00f      	beq.n	8002d14 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10a      	bne.n	8002d10 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 f9c0 	bl	800308c <xQueueGenericCreateStatic>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	e016      	b.n	8002d3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e014      	b.n	8002d3e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d110      	bne.n	8002d3c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f000 fa31 	bl	8003186 <xQueueGenericCreate>
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <osSemaphoreCreate+0x56>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa82 	bl	800323c <xQueueGenericSend>
      return sema;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	e000      	b.n	8002d3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002d3c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	e03a      	b.n	8002dd6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d103      	bne.n	8002d74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e009      	b.n	8002d88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d006      	beq.n	8002d88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <osSemaphoreWait+0x40>
      ticks = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002d88:	f7ff ff32 	bl	8002bf0 <inHandlerMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	461a      	mov	r2, r3
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fcf0 	bl	8003780 <xQueueReceiveFromISR>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <osSemaphoreWait+0x62>
      return osErrorOS;
 8002da6:	23ff      	movs	r3, #255	@ 0xff
 8002da8:	e015      	b.n	8002dd6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d011      	beq.n	8002dd4 <osSemaphoreWait+0x8c>
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <osSemaphoreWait+0x98>)
 8002db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	e008      	b.n	8002dd4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002dc2:	68f9      	ldr	r1, [r7, #12]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fbcb 	bl	8003560 <xQueueSemaphoreTake>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002dd0:	23ff      	movs	r3, #255	@ 0xff
 8002dd2:	e000      	b.n	8002dd6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002df4:	f7ff fefc 	bl	8002bf0 <inHandlerMode>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fb1b 	bl	8003440 <xQueueGiveFromISR>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d001      	beq.n	8002e14 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002e10:	23ff      	movs	r3, #255	@ 0xff
 8002e12:	e017      	b.n	8002e44 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d013      	beq.n	8002e42 <osSemaphoreRelease+0x5e>
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <osSemaphoreRelease+0x68>)
 8002e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	e00a      	b.n	8002e42 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa02 	bl	800323c <xQueueGenericSend>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002e3e:	23ff      	movs	r3, #255	@ 0xff
 8002e40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f103 0208 	add.w	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f103 0208 	add.w	r2, r3, #8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0208 	add.w	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d103      	bne.n	8002f12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e00c      	b.n	8002f2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3308      	adds	r3, #8
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e002      	b.n	8002f20 <vListInsert+0x2e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d2f6      	bcs.n	8002f1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	601a      	str	r2, [r3, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6892      	ldr	r2, [r2, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6852      	ldr	r2, [r2, #4]
 8002f84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d103      	bne.n	8002f98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fe4:	f001 fed0 	bl	8004d88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	3b01      	subs	r3, #1
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	22ff      	movs	r2, #255	@ 0xff
 8003028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	22ff      	movs	r2, #255	@ 0xff
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d114      	bne.n	8003064 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01a      	beq.n	8003078 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3310      	adds	r3, #16
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f984 	bl	8004354 <xTaskRemoveFromEventList>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <xQueueGenericReset+0xd0>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	e009      	b.n	8003078 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3310      	adds	r3, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fef1 	bl	8002e50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3324      	adds	r3, #36	@ 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff feec 	bl	8002e50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003078:	f001 feb8 	bl	8004dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800307c:	2301      	movs	r3, #1
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	@ 0x38
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <xQueueGenericCreateStatic+0x56>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <xQueueGenericCreateStatic+0x5a>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <xQueueGenericCreateStatic+0x5c>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	623b      	str	r3, [r7, #32]
}
 80030fe:	bf00      	nop
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <xQueueGenericCreateStatic+0x84>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <xQueueGenericCreateStatic+0x88>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <xQueueGenericCreateStatic+0x8a>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61fb      	str	r3, [r7, #28]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003132:	2348      	movs	r3, #72	@ 0x48
 8003134:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b48      	cmp	r3, #72	@ 0x48
 800313a:	d00b      	beq.n	8003154 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003154:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003168:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f840 	bl	80031fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800317e:	4618      	mov	r0, r3
 8003180:	3730      	adds	r7, #48	@ 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08a      	sub	sp, #40	@ 0x28
 800318a:	af02      	add	r7, sp, #8
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10b      	bne.n	80031b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	613b      	str	r3, [r7, #16]
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	e7fd      	b.n	80031ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3348      	adds	r3, #72	@ 0x48
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 ff03 	bl	8004fcc <pvPortMalloc>
 80031c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	3348      	adds	r3, #72	@ 0x48
 80031d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f805 	bl	80031fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031f2:	69bb      	ldr	r3, [r7, #24]
	}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e002      	b.n	800321e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800322a:	2101      	movs	r1, #1
 800322c:	69b8      	ldr	r0, [r7, #24]
 800322e:	f7ff fec3 	bl	8002fb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	@ 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800324a:	2300      	movs	r3, #0
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <xQueueGenericSend+0x34>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <xQueueGenericSend+0x42>
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <xQueueGenericSend+0x46>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <xQueueGenericSend+0x48>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueGenericSend+0x64>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x72>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <xQueueGenericSend+0x76>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueGenericSend+0x78>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <xQueueGenericSend+0x94>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	623b      	str	r3, [r7, #32]
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d0:	f001 fa06 	bl	80046e0 <xTaskGetSchedulerState>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <xQueueGenericSend+0xa4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <xQueueGenericSend+0xa8>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <xQueueGenericSend+0xaa>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <xQueueGenericSend+0xc6>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	61fb      	str	r3, [r7, #28]
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	e7fd      	b.n	80032fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003302:	f001 fd41 	bl	8004d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <xQueueGenericSend+0xdc>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d129      	bne.n	800336c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800331e:	f000 fac9 	bl	80038b4 <prvCopyDataToQueue>
 8003322:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332e:	3324      	adds	r3, #36	@ 0x24
 8003330:	4618      	mov	r0, r3
 8003332:	f001 f80f 	bl	8004354 <xTaskRemoveFromEventList>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800333c:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <xQueueGenericSend+0x200>)
 800333e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	e00a      	b.n	8003364 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003354:	4b39      	ldr	r3, [pc, #228]	@ (800343c <xQueueGenericSend+0x200>)
 8003356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003364:	f001 fd42 	bl	8004dec <vPortExitCritical>
				return pdPASS;
 8003368:	2301      	movs	r3, #1
 800336a:	e063      	b.n	8003434 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003372:	f001 fd3b 	bl	8004dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003376:	2300      	movs	r3, #0
 8003378:	e05c      	b.n	8003434 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f849 	bl	800441c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800338e:	f001 fd2d 	bl	8004dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003392:	f000 fdef 	bl	8003f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003396:	f001 fcf7 	bl	8004d88 <vPortEnterCritical>
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033a0:	b25b      	sxtb	r3, r3
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d103      	bne.n	80033b0 <xQueueGenericSend+0x174>
 80033a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d103      	bne.n	80033c6 <xQueueGenericSend+0x18a>
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033c6:	f001 fd11 	bl	8004dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ca:	1d3a      	adds	r2, r7, #4
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 f838 	bl	8004448 <xTaskCheckForTimeOut>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d124      	bne.n	8003428 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e0:	f000 fb60 	bl	8003aa4 <prvIsQueueFull>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	3310      	adds	r3, #16
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ff88 	bl	8004308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033fa:	f000 faeb 	bl	80039d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033fe:	f000 fdc7 	bl	8003f90 <xTaskResumeAll>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f af7c 	bne.w	8003302 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <xQueueGenericSend+0x200>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	e772      	b.n	8003302 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800341c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800341e:	f000 fad9 	bl	80039d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003422:	f000 fdb5 	bl	8003f90 <xTaskResumeAll>
 8003426:	e76c      	b.n	8003302 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800342a:	f000 fad3 	bl	80039d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800342e:	f000 fdaf 	bl	8003f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003434:	4618      	mov	r0, r3
 8003436:	3738      	adds	r7, #56	@ 0x38
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	@ 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	623b      	str	r3, [r7, #32]
}
 8003466:	bf00      	nop
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	61fb      	str	r3, [r7, #28]
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <xQueueGiveFromISR+0x5c>
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <xQueueGiveFromISR+0x60>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <xQueueGiveFromISR+0x62>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <xQueueGiveFromISR+0x7e>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	61bb      	str	r3, [r7, #24]
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	e7fd      	b.n	80034ba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034be:	f001 fd43 	bl	8004f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034c2:	f3ef 8211 	mrs	r2, BASEPRI
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	617a      	str	r2, [r7, #20]
 80034d8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d22b      	bcs.n	8003546 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003500:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d112      	bne.n	8003530 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	3324      	adds	r3, #36	@ 0x24
 8003516:	4618      	mov	r0, r3
 8003518:	f000 ff1c 	bl	8004354 <xTaskRemoveFromEventList>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e007      	b.n	8003540 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003534:	3301      	adds	r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	b25a      	sxtb	r2, r3
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003540:	2301      	movs	r3, #1
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
 8003544:	e001      	b.n	800354a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003554:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003558:	4618      	mov	r0, r3
 800355a:	3738      	adds	r7, #56	@ 0x38
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	@ 0x38
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003572:	2300      	movs	r3, #0
 8003574:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	623b      	str	r3, [r7, #32]
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61fb      	str	r3, [r7, #28]
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b4:	f001 f894 	bl	80046e0 <xTaskGetSchedulerState>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <xQueueSemaphoreTake+0x64>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <xQueueSemaphoreTake+0x68>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <xQueueSemaphoreTake+0x6a>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	61bb      	str	r3, [r7, #24]
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e6:	f001 fbcf 	bl	8004d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d024      	beq.n	8003640 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003606:	f001 fa17 	bl	8004a38 <pvTaskIncrementMutexHeldCount>
 800360a:	4602      	mov	r2, r0
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00f      	beq.n	8003638 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	3310      	adds	r3, #16
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fe99 	bl	8004354 <xTaskRemoveFromEventList>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003628:	4b54      	ldr	r3, [pc, #336]	@ (800377c <xQueueSemaphoreTake+0x21c>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003638:	f001 fbd8 	bl	8004dec <vPortExitCritical>
				return pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	e098      	b.n	8003772 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	617b      	str	r3, [r7, #20]
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003664:	f001 fbc2 	bl	8004dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003668:	2300      	movs	r3, #0
 800366a:	e082      	b.n	8003772 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fed0 	bl	800441c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003680:	f001 fbb4 	bl	8004dec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003684:	f000 fc76 	bl	8003f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003688:	f001 fb7e 	bl	8004d88 <vPortEnterCritical>
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003692:	b25b      	sxtb	r3, r3
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d103      	bne.n	80036a2 <xQueueSemaphoreTake+0x142>
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d103      	bne.n	80036b8 <xQueueSemaphoreTake+0x158>
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036b8:	f001 fb98 	bl	8004dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036bc:	463a      	mov	r2, r7
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 febf 	bl	8004448 <xTaskCheckForTimeOut>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d132      	bne.n	8003736 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036d2:	f000 f9d1 	bl	8003a78 <prvIsQueueEmpty>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d026      	beq.n	800372a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80036e4:	f001 fb50 	bl	8004d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f815 	bl	800471c <xTaskPriorityInherit>
 80036f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80036f4:	f001 fb7a 	bl	8004dec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	3324      	adds	r3, #36	@ 0x24
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fe01 	bl	8004308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003708:	f000 f964 	bl	80039d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800370c:	f000 fc40 	bl	8003f90 <xTaskResumeAll>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f47f af67 	bne.w	80035e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003718:	4b18      	ldr	r3, [pc, #96]	@ (800377c <xQueueSemaphoreTake+0x21c>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	e75d      	b.n	80035e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800372a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800372c:	f000 f952 	bl	80039d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003730:	f000 fc2e 	bl	8003f90 <xTaskResumeAll>
 8003734:	e757      	b.n	80035e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003738:	f000 f94c 	bl	80039d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800373c:	f000 fc28 	bl	8003f90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003742:	f000 f999 	bl	8003a78 <prvIsQueueEmpty>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	f43f af4c 	beq.w	80035e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003754:	f001 fb18 	bl	8004d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800375a:	f000 f893 	bl	8003884 <prvGetDisinheritPriorityAfterTimeout>
 800375e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f8d6 	bl	8004918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800376c:	f001 fb3e 	bl	8004dec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003770:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003772:	4618      	mov	r0, r3
 8003774:	3738      	adds	r7, #56	@ 0x38
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	@ 0x38
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	623b      	str	r3, [r7, #32]
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <xQueueReceiveFromISR+0x3c>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <xQueueReceiveFromISR+0x40>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <xQueueReceiveFromISR+0x42>
 80037c0:	2300      	movs	r3, #0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	61fb      	str	r3, [r7, #28]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037de:	f001 fbb3 	bl	8004f48 <vPortValidateInterruptPriority>
	__asm volatile
 80037e2:	f3ef 8211 	mrs	r2, BASEPRI
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	61ba      	str	r2, [r7, #24]
 80037f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d02f      	beq.n	800386a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003818:	f000 f8b6 	bl	8003988 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	1e5a      	subs	r2, r3, #1
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003824:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d112      	bne.n	8003854 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	3310      	adds	r3, #16
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fd8a 	bl	8004354 <xTaskRemoveFromEventList>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e007      	b.n	8003864 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003858:	3301      	adds	r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	b25a      	sxtb	r2, r3
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003864:	2301      	movs	r3, #1
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
 8003868:	e001      	b.n	800386e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800386a:	2300      	movs	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f383 8811 	msr	BASEPRI, r3
}
 8003878:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800387c:	4618      	mov	r0, r3
 800387e:	3738      	adds	r7, #56	@ 0x38
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e001      	b.n	80038a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80038a6:	68fb      	ldr	r3, [r7, #12]
	}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d14d      	bne.n	8003976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff92 	bl	8004808 <xTaskPriorityDisinherit>
 80038e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	e043      	b.n	8003976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d119      	bne.n	8003928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6858      	ldr	r0, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	461a      	mov	r2, r3
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	f001 fdd6 	bl	80054b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d32b      	bcc.n	8003976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	e026      	b.n	8003976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68d8      	ldr	r0, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	461a      	mov	r2, r3
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	f001 fdbc 	bl	80054b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	425b      	negs	r3, r3
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d207      	bcs.n	8003964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	425b      	negs	r3, r3
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d105      	bne.n	8003976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800397e:	697b      	ldr	r3, [r7, #20]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	441a      	add	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d303      	bcc.n	80039bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68d9      	ldr	r1, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	461a      	mov	r2, r3
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f001 fd72 	bl	80054b0 <memcpy>
	}
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039dc:	f001 f9d4 	bl	8004d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039e8:	e011      	b.n	8003a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d012      	beq.n	8003a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	@ 0x24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fcac 	bl	8004354 <xTaskRemoveFromEventList>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a02:	f000 fd85 	bl	8004510 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dce9      	bgt.n	80039ea <prvUnlockQueue+0x16>
 8003a16:	e000      	b.n	8003a1a <prvUnlockQueue+0x46>
					break;
 8003a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	22ff      	movs	r2, #255	@ 0xff
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a22:	f001 f9e3 	bl	8004dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a26:	f001 f9af 	bl	8004d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a32:	e011      	b.n	8003a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fc87 	bl	8004354 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a4c:	f000 fd60 	bl	8004510 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a50:	7bbb      	ldrb	r3, [r7, #14]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	dce9      	bgt.n	8003a34 <prvUnlockQueue+0x60>
 8003a60:	e000      	b.n	8003a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	22ff      	movs	r2, #255	@ 0xff
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a6c:	f001 f9be 	bl	8004dec <vPortExitCritical>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a80:	f001 f982 	bl	8004d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e001      	b.n	8003a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a96:	f001 f9a9 	bl	8004dec <vPortExitCritical>

	return xReturn;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aac:	f001 f96c 	bl	8004d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d102      	bne.n	8003ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e001      	b.n	8003ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ac6:	f001 f991 	bl	8004dec <vPortExitCritical>

	return xReturn;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	@ 0x38
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	623b      	str	r3, [r7, #32]
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	61fb      	str	r3, [r7, #28]
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	e7fd      	b.n	8003b1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b1e:	23a0      	movs	r3, #160	@ 0xa0
 8003b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b26:	d00b      	beq.n	8003b40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	61bb      	str	r3, [r7, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01e      	beq.n	8003b86 <xTaskCreateStatic+0xb2>
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b60:	2300      	movs	r3, #0
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f851 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b80:	f000 f8ee 	bl	8003d60 <prvAddNewTaskToReadyList>
 8003b84:	e001      	b.n	8003b8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b8a:	697b      	ldr	r3, [r7, #20]
	}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	@ 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	@ 0x30
 8003b98:	af04      	add	r7, sp, #16
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fa0f 	bl	8004fcc <pvPortMalloc>
 8003bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bb6:	20a0      	movs	r0, #160	@ 0xa0
 8003bb8:	f001 fa08 	bl	8004fcc <pvPortMalloc>
 8003bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bca:	e005      	b.n	8003bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f001 facb 	bl	8005168 <vPortFree>
 8003bd2:	e001      	b.n	8003bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9303      	str	r3, [sp, #12]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	9302      	str	r3, [sp, #8]
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f80f 	bl	8003c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c02:	69f8      	ldr	r0, [r7, #28]
 8003c04:	f000 f8ac 	bl	8003d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e002      	b.n	8003c14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c14:	69bb      	ldr	r3, [r7, #24]
	}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3720      	adds	r7, #32
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f023 0307 	bic.w	r3, r3, #7
 8003c46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	617b      	str	r3, [r7, #20]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01f      	beq.n	8003cb0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e012      	b.n	8003c9c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	7819      	ldrb	r1, [r3, #0]
 8003c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	3334      	adds	r3, #52	@ 0x34
 8003c86:	460a      	mov	r2, r1
 8003c88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d006      	beq.n	8003ca4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	d9e9      	bls.n	8003c76 <prvInitialiseNewTask+0x56>
 8003ca2:	e000      	b.n	8003ca6 <prvInitialiseNewTask+0x86>
			{
				break;
 8003ca4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cae:	e003      	b.n	8003cb8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d901      	bls.n	8003cc2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cbe:	2306      	movs	r3, #6
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f8d9 	bl	8002e90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	3318      	adds	r3, #24
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f8d4 	bl	8002e90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	f1c3 0207 	rsb	r2, r3, #7
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	334c      	adds	r3, #76	@ 0x4c
 8003d12:	224c      	movs	r2, #76	@ 0x4c
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fb46 	bl	80053a8 <memset>
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <prvInitialiseNewTask+0x134>)
 8003d20:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	4a0c      	ldr	r2, [pc, #48]	@ (8003d58 <prvInitialiseNewTask+0x138>)
 8003d26:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d5c <prvInitialiseNewTask+0x13c>)
 8003d2c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	69b8      	ldr	r0, [r7, #24]
 8003d34:	f000 fefa 	bl	8004b2c <pxPortInitialiseStack>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20004118 	.word	0x20004118
 8003d58:	20004180 	.word	0x20004180
 8003d5c:	200041e8 	.word	0x200041e8

08003d60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d68:	f001 f80e 	bl	8004d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d76:	4b29      	ldr	r3, [pc, #164]	@ (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d7e:	4a27      	ldr	r2, [pc, #156]	@ (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d84:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d110      	bne.n	8003dae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d8c:	f000 fbe4 	bl	8004558 <prvInitialiseTaskLists>
 8003d90:	e00d      	b.n	8003dae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d92:	4b23      	ldr	r3, [pc, #140]	@ (8003e20 <prvAddNewTaskToReadyList+0xc0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d802      	bhi.n	8003dae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <prvAddNewTaskToReadyList+0xc4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <prvAddNewTaskToReadyList+0xc4>)
 8003db6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <prvAddNewTaskToReadyList+0xc8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <prvAddNewTaskToReadyList+0xc8>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <prvAddNewTaskToReadyList+0xcc>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7ff f862 	bl	8002eaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 f801 	bl	8004dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dea:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <prvAddNewTaskToReadyList+0xc0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <prvAddNewTaskToReadyList+0xd0>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200004c4 	.word	0x200004c4
 8003e1c:	200003c4 	.word	0x200003c4
 8003e20:	200004d0 	.word	0x200004d0
 8003e24:	200004e0 	.word	0x200004e0
 8003e28:	200004cc 	.word	0x200004cc
 8003e2c:	200003c8 	.word	0x200003c8
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e46:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <vTaskDelay+0x64>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <vTaskDelay+0x32>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e66:	f000 f885 	bl	8003f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fdf7 	bl	8004a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e72:	f000 f88d 	bl	8003f90 <xTaskResumeAll>
 8003e76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e7e:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <vTaskDelay+0x68>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200004ec 	.word	0x200004ec
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eae:	463a      	mov	r2, r7
 8003eb0:	1d39      	adds	r1, r7, #4
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fb2a 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	9202      	str	r2, [sp, #8]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	460a      	mov	r2, r1
 8003ece:	4921      	ldr	r1, [pc, #132]	@ (8003f54 <vTaskStartScheduler+0xb4>)
 8003ed0:	4821      	ldr	r0, [pc, #132]	@ (8003f58 <vTaskStartScheduler+0xb8>)
 8003ed2:	f7ff fdff 	bl	8003ad4 <xTaskCreateStatic>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4a20      	ldr	r2, [pc, #128]	@ (8003f5c <vTaskStartScheduler+0xbc>)
 8003eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003edc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f5c <vTaskStartScheduler+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e001      	b.n	8003eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d11b      	bne.n	8003f2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	613b      	str	r3, [r7, #16]
}
 8003f06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f08:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <vTaskStartScheduler+0xc0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	334c      	adds	r3, #76	@ 0x4c
 8003f0e:	4a15      	ldr	r2, [pc, #84]	@ (8003f64 <vTaskStartScheduler+0xc4>)
 8003f10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f12:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <vTaskStartScheduler+0xc8>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f1a:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <vTaskStartScheduler+0xcc>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f20:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <vTaskStartScheduler+0xd0>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f26:	f000 fe8b 	bl	8004c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f2a:	e00f      	b.n	8003f4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d10b      	bne.n	8003f4c <vTaskStartScheduler+0xac>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	60fb      	str	r3, [r7, #12]
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <vTaskStartScheduler+0xa8>
}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	0800573c 	.word	0x0800573c
 8003f58:	08004529 	.word	0x08004529
 8003f5c:	200004e8 	.word	0x200004e8
 8003f60:	200003c4 	.word	0x200003c4
 8003f64:	20000010 	.word	0x20000010
 8003f68:	200004e4 	.word	0x200004e4
 8003f6c:	200004d0 	.word	0x200004d0
 8003f70:	200004c8 	.word	0x200004c8

08003f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f78:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <vTaskSuspendAll+0x18>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a03      	ldr	r2, [pc, #12]	@ (8003f8c <vTaskSuspendAll+0x18>)
 8003f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200004ec 	.word	0x200004ec

08003f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f9e:	4b42      	ldr	r3, [pc, #264]	@ (80040a8 <xTaskResumeAll+0x118>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <xTaskResumeAll+0x2e>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	603b      	str	r3, [r7, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fbe:	f000 fee3 	bl	8004d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fc2:	4b39      	ldr	r3, [pc, #228]	@ (80040a8 <xTaskResumeAll+0x118>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	4a37      	ldr	r2, [pc, #220]	@ (80040a8 <xTaskResumeAll+0x118>)
 8003fca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fcc:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <xTaskResumeAll+0x118>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d161      	bne.n	8004098 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fd4:	4b35      	ldr	r3, [pc, #212]	@ (80040ac <xTaskResumeAll+0x11c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d05d      	beq.n	8004098 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fdc:	e02e      	b.n	800403c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <xTaskResumeAll+0x120>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe ffba 	bl	8002f64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe ffb5 	bl	8002f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <xTaskResumeAll+0x124>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a2a      	ldr	r2, [pc, #168]	@ (80040b4 <xTaskResumeAll+0x124>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <xTaskResumeAll+0x128>)
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe ff41 	bl	8002eaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402c:	4b23      	ldr	r3, [pc, #140]	@ (80040bc <xTaskResumeAll+0x12c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004036:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <xTaskResumeAll+0x130>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800403c:	4b1c      	ldr	r3, [pc, #112]	@ (80040b0 <xTaskResumeAll+0x120>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1cc      	bne.n	8003fde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800404a:	f000 fb29 	bl	80046a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <xTaskResumeAll+0x134>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d010      	beq.n	800407c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800405a:	f000 f837 	bl	80040cc <xTaskIncrementTick>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004064:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <xTaskResumeAll+0x130>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3b01      	subs	r3, #1
 800406e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f1      	bne.n	800405a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <xTaskResumeAll+0x134>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800407c:	4b10      	ldr	r3, [pc, #64]	@ (80040c0 <xTaskResumeAll+0x130>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004088:	4b0f      	ldr	r3, [pc, #60]	@ (80040c8 <xTaskResumeAll+0x138>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004098:	f000 fea8 	bl	8004dec <vPortExitCritical>

	return xAlreadyYielded;
 800409c:	68bb      	ldr	r3, [r7, #8]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200004ec 	.word	0x200004ec
 80040ac:	200004c4 	.word	0x200004c4
 80040b0:	20000484 	.word	0x20000484
 80040b4:	200004cc 	.word	0x200004cc
 80040b8:	200003c8 	.word	0x200003c8
 80040bc:	200003c4 	.word	0x200003c4
 80040c0:	200004d8 	.word	0x200004d8
 80040c4:	200004d4 	.word	0x200004d4
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004214 <xTaskIncrementTick+0x148>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 808f 	bne.w	80041fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <xTaskIncrementTick+0x14c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004218 <xTaskIncrementTick+0x14c>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d121      	bne.n	8004138 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f4:	4b49      	ldr	r3, [pc, #292]	@ (800421c <xTaskIncrementTick+0x150>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	603b      	str	r3, [r7, #0]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xTaskIncrementTick+0x46>
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <xTaskIncrementTick+0x150>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	4b40      	ldr	r3, [pc, #256]	@ (8004220 <xTaskIncrementTick+0x154>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3e      	ldr	r2, [pc, #248]	@ (800421c <xTaskIncrementTick+0x150>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4a3e      	ldr	r2, [pc, #248]	@ (8004220 <xTaskIncrementTick+0x154>)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <xTaskIncrementTick+0x158>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a3c      	ldr	r2, [pc, #240]	@ (8004224 <xTaskIncrementTick+0x158>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	f000 fab4 	bl	80046a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004138:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <xTaskIncrementTick+0x15c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	d348      	bcc.n	80041d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <xTaskIncrementTick+0x150>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414c:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <xTaskIncrementTick+0x15c>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	601a      	str	r2, [r3, #0]
					break;
 8004154:	e03e      	b.n	80041d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b31      	ldr	r3, [pc, #196]	@ (800421c <xTaskIncrementTick+0x150>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d203      	bcs.n	8004176 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800416e:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <xTaskIncrementTick+0x15c>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004174:	e02e      	b.n	80041d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fef2 	bl	8002f64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3318      	adds	r3, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fee9 	bl	8002f64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <xTaskIncrementTick+0x160>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <xTaskIncrementTick+0x160>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <xTaskIncrementTick+0x164>)
 80041b2:	441a      	add	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fe fe75 	bl	8002eaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <xTaskIncrementTick+0x168>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d3b9      	bcc.n	8004142 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d2:	e7b6      	b.n	8004142 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041d4:	4b17      	ldr	r3, [pc, #92]	@ (8004234 <xTaskIncrementTick+0x168>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4915      	ldr	r1, [pc, #84]	@ (8004230 <xTaskIncrementTick+0x164>)
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d901      	bls.n	80041f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <xTaskIncrementTick+0x16c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e004      	b.n	8004208 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041fe:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <xTaskIncrementTick+0x170>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	4a0d      	ldr	r2, [pc, #52]	@ (800423c <xTaskIncrementTick+0x170>)
 8004206:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004208:	697b      	ldr	r3, [r7, #20]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200004ec 	.word	0x200004ec
 8004218:	200004c8 	.word	0x200004c8
 800421c:	2000047c 	.word	0x2000047c
 8004220:	20000480 	.word	0x20000480
 8004224:	200004dc 	.word	0x200004dc
 8004228:	200004e4 	.word	0x200004e4
 800422c:	200004cc 	.word	0x200004cc
 8004230:	200003c8 	.word	0x200003c8
 8004234:	200003c4 	.word	0x200003c4
 8004238:	200004d8 	.word	0x200004d8
 800423c:	200004d4 	.word	0x200004d4

08004240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004246:	4b2a      	ldr	r3, [pc, #168]	@ (80042f0 <vTaskSwitchContext+0xb0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800424e:	4b29      	ldr	r3, [pc, #164]	@ (80042f4 <vTaskSwitchContext+0xb4>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004254:	e045      	b.n	80042e2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004256:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <vTaskSwitchContext+0xb4>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <vTaskSwitchContext+0xb8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	f1c3 031f 	rsb	r3, r3, #31
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	4922      	ldr	r1, [pc, #136]	@ (80042fc <vTaskSwitchContext+0xbc>)
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	607b      	str	r3, [r7, #4]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <vTaskSwitchContext+0x5a>
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4a14      	ldr	r2, [pc, #80]	@ (80042fc <vTaskSwitchContext+0xbc>)
 80042aa:	4413      	add	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3308      	adds	r3, #8
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d104      	bne.n	80042ce <vTaskSwitchContext+0x8e>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004300 <vTaskSwitchContext+0xc0>)
 80042d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042d8:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <vTaskSwitchContext+0xc0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	4a09      	ldr	r2, [pc, #36]	@ (8004304 <vTaskSwitchContext+0xc4>)
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200004ec 	.word	0x200004ec
 80042f4:	200004d8 	.word	0x200004d8
 80042f8:	200004cc 	.word	0x200004cc
 80042fc:	200003c8 	.word	0x200003c8
 8004300:	200003c4 	.word	0x200003c4
 8004304:	20000010 	.word	0x20000010

08004308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60fb      	str	r3, [r7, #12]
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <vTaskPlaceOnEventList+0x48>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3318      	adds	r3, #24
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fe fdda 	bl	8002ef2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800433e:	2101      	movs	r1, #1
 8004340:	6838      	ldr	r0, [r7, #0]
 8004342:	f000 fb8d 	bl	8004a60 <prvAddCurrentTaskToDelayedList>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200003c4 	.word	0x200003c4

08004354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	60fb      	str	r3, [r7, #12]
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3318      	adds	r3, #24
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fdec 	bl	8002f64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800438c:	4b1d      	ldr	r3, [pc, #116]	@ (8004404 <xTaskRemoveFromEventList+0xb0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11c      	bne.n	80043ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fde3 	bl	8002f64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	2201      	movs	r2, #1
 80043a4:	409a      	lsls	r2, r3
 80043a6:	4b18      	ldr	r3, [pc, #96]	@ (8004408 <xTaskRemoveFromEventList+0xb4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <xTaskRemoveFromEventList+0xb4>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <xTaskRemoveFromEventList+0xb8>)
 80043be:	441a      	add	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fd6f 	bl	8002eaa <vListInsertEnd>
 80043cc:	e005      	b.n	80043da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3318      	adds	r3, #24
 80043d2:	4619      	mov	r1, r3
 80043d4:	480e      	ldr	r0, [pc, #56]	@ (8004410 <xTaskRemoveFromEventList+0xbc>)
 80043d6:	f7fe fd68 	bl	8002eaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <xTaskRemoveFromEventList+0xc0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d905      	bls.n	80043f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <xTaskRemoveFromEventList+0xc4>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e001      	b.n	80043f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043f8:	697b      	ldr	r3, [r7, #20]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200004ec 	.word	0x200004ec
 8004408:	200004cc 	.word	0x200004cc
 800440c:	200003c8 	.word	0x200003c8
 8004410:	20000484 	.word	0x20000484
 8004414:	200003c4 	.word	0x200003c4
 8004418:	200004d8 	.word	0x200004d8

0800441c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <vTaskInternalSetTimeOutState+0x24>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <vTaskInternalSetTimeOutState+0x28>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	605a      	str	r2, [r3, #4]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	200004dc 	.word	0x200004dc
 8004444:	200004c8 	.word	0x200004c8

08004448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	613b      	str	r3, [r7, #16]
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800448e:	f000 fc7b 	bl	8004d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004492:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <xTaskCheckForTimeOut+0xc0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d102      	bne.n	80044b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e023      	b.n	80044fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b15      	ldr	r3, [pc, #84]	@ (800450c <xTaskCheckForTimeOut+0xc4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d007      	beq.n	80044ce <xTaskCheckForTimeOut+0x86>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e015      	b.n	80044fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d20b      	bcs.n	80044f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	1ad2      	subs	r2, r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff99 	bl	800441c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	e004      	b.n	80044fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044fa:	f000 fc77 	bl	8004dec <vPortExitCritical>

	return xReturn;
 80044fe:	69fb      	ldr	r3, [r7, #28]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200004c8 	.word	0x200004c8
 800450c:	200004dc 	.word	0x200004dc

08004510 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004514:	4b03      	ldr	r3, [pc, #12]	@ (8004524 <vTaskMissedYield+0x14>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	200004d8 	.word	0x200004d8

08004528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004530:	f000 f852 	bl	80045d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <prvIdleTask+0x28>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d9f9      	bls.n	8004530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <prvIdleTask+0x2c>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800454c:	e7f0      	b.n	8004530 <prvIdleTask+0x8>
 800454e:	bf00      	nop
 8004550:	200003c8 	.word	0x200003c8
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	e00c      	b.n	800457e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <prvInitialiseTaskLists+0x60>)
 8004570:	4413      	add	r3, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fc6c 	bl	8002e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d9ef      	bls.n	8004564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004584:	480d      	ldr	r0, [pc, #52]	@ (80045bc <prvInitialiseTaskLists+0x64>)
 8004586:	f7fe fc63 	bl	8002e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800458a:	480d      	ldr	r0, [pc, #52]	@ (80045c0 <prvInitialiseTaskLists+0x68>)
 800458c:	f7fe fc60 	bl	8002e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004590:	480c      	ldr	r0, [pc, #48]	@ (80045c4 <prvInitialiseTaskLists+0x6c>)
 8004592:	f7fe fc5d 	bl	8002e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004596:	480c      	ldr	r0, [pc, #48]	@ (80045c8 <prvInitialiseTaskLists+0x70>)
 8004598:	f7fe fc5a 	bl	8002e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800459c:	480b      	ldr	r0, [pc, #44]	@ (80045cc <prvInitialiseTaskLists+0x74>)
 800459e:	f7fe fc57 	bl	8002e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <prvInitialiseTaskLists+0x78>)
 80045a4:	4a05      	ldr	r2, [pc, #20]	@ (80045bc <prvInitialiseTaskLists+0x64>)
 80045a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045a8:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <prvInitialiseTaskLists+0x7c>)
 80045aa:	4a05      	ldr	r2, [pc, #20]	@ (80045c0 <prvInitialiseTaskLists+0x68>)
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200003c8 	.word	0x200003c8
 80045bc:	20000454 	.word	0x20000454
 80045c0:	20000468 	.word	0x20000468
 80045c4:	20000484 	.word	0x20000484
 80045c8:	20000498 	.word	0x20000498
 80045cc:	200004b0 	.word	0x200004b0
 80045d0:	2000047c 	.word	0x2000047c
 80045d4:	20000480 	.word	0x20000480

080045d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045de:	e019      	b.n	8004614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045e0:	f000 fbd2 	bl	8004d88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e4:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <prvCheckTasksWaitingTermination+0x50>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe fcb7 	bl	8002f64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <prvCheckTasksWaitingTermination+0x54>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	4a0b      	ldr	r2, [pc, #44]	@ (800462c <prvCheckTasksWaitingTermination+0x54>)
 80045fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	4a0a      	ldr	r2, [pc, #40]	@ (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800460a:	f000 fbef 	bl	8004dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f810 	bl	8004634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <prvCheckTasksWaitingTermination+0x58>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e1      	bne.n	80045e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000498 	.word	0x20000498
 800462c:	200004c4 	.word	0x200004c4
 8004630:	200004ac 	.word	0x200004ac

08004634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	334c      	adds	r3, #76	@ 0x4c
 8004640:	4618      	mov	r0, r3
 8004642:	f000 feb9 	bl	80053b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800464c:	2b00      	cmp	r3, #0
 800464e:	d108      	bne.n	8004662 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fd87 	bl	8005168 <vPortFree>
				vPortFree( pxTCB );
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fd84 	bl	8005168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004660:	e019      	b.n	8004696 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004668:	2b01      	cmp	r3, #1
 800466a:	d103      	bne.n	8004674 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fd7b 	bl	8005168 <vPortFree>
	}
 8004672:	e010      	b.n	8004696 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800467a:	2b02      	cmp	r3, #2
 800467c:	d00b      	beq.n	8004696 <prvDeleteTCB+0x62>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60fb      	str	r3, [r7, #12]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <prvDeleteTCB+0x5e>
	}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a6:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <prvResetNextTaskUnblockTime+0x38>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <prvResetNextTaskUnblockTime+0x3c>)
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046b8:	e008      	b.n	80046cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ba:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <prvResetNextTaskUnblockTime+0x38>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <prvResetNextTaskUnblockTime+0x3c>)
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	2000047c 	.word	0x2000047c
 80046dc:	200004e4 	.word	0x200004e4

080046e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <xTaskGetSchedulerState+0x34>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046ee:	2301      	movs	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	e008      	b.n	8004706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f4:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <xTaskGetSchedulerState+0x38>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046fc:	2302      	movs	r3, #2
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	e001      	b.n	8004706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004706:	687b      	ldr	r3, [r7, #4]
	}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	200004d0 	.word	0x200004d0
 8004718:	200004ec 	.word	0x200004ec

0800471c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d05e      	beq.n	80047f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004736:	4b31      	ldr	r3, [pc, #196]	@ (80047fc <xTaskPriorityInherit+0xe0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	429a      	cmp	r2, r3
 800473e:	d24e      	bcs.n	80047de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	db06      	blt.n	8004756 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004748:	4b2c      	ldr	r3, [pc, #176]	@ (80047fc <xTaskPriorityInherit+0xe0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f1c3 0207 	rsb	r2, r3, #7
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6959      	ldr	r1, [r3, #20]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <xTaskPriorityInherit+0xe4>)
 8004768:	4413      	add	r3, r2
 800476a:	4299      	cmp	r1, r3
 800476c:	d12f      	bne.n	80047ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fbf6 	bl	8002f64 <uxListRemove>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	2201      	movs	r2, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43da      	mvns	r2, r3
 800478a:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <xTaskPriorityInherit+0xe8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4013      	ands	r3, r2
 8004790:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <xTaskPriorityInherit+0xe8>)
 8004792:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004794:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <xTaskPriorityInherit+0xe0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	2201      	movs	r2, #1
 80047a4:	409a      	lsls	r2, r3
 80047a6:	4b17      	ldr	r3, [pc, #92]	@ (8004804 <xTaskPriorityInherit+0xe8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <xTaskPriorityInherit+0xe8>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a10      	ldr	r2, [pc, #64]	@ (8004800 <xTaskPriorityInherit+0xe4>)
 80047be:	441a      	add	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe fb6f 	bl	8002eaa <vListInsertEnd>
 80047cc:	e004      	b.n	80047d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047ce:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <xTaskPriorityInherit+0xe0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e008      	b.n	80047f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <xTaskPriorityInherit+0xe0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d201      	bcs.n	80047f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f0:	68fb      	ldr	r3, [r7, #12]
	}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200003c4 	.word	0x200003c4
 8004800:	200003c8 	.word	0x200003c8
 8004804:	200004cc 	.word	0x200004cc

08004808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d070      	beq.n	8004900 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800481e:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <xTaskPriorityDisinherit+0x104>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	429a      	cmp	r2, r3
 8004826:	d00b      	beq.n	8004840 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60fb      	str	r3, [r7, #12]
}
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60bb      	str	r3, [r7, #8]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	429a      	cmp	r2, r3
 8004874:	d044      	beq.n	8004900 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d140      	bne.n	8004900 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fb6e 	bl	8002f64 <uxListRemove>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d115      	bne.n	80048ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004892:	491f      	ldr	r1, [pc, #124]	@ (8004910 <xTaskPriorityDisinherit+0x108>)
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xTaskPriorityDisinherit+0xb2>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43da      	mvns	r2, r3
 80048b0:	4b18      	ldr	r3, [pc, #96]	@ (8004914 <xTaskPriorityDisinherit+0x10c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4013      	ands	r3, r2
 80048b6:	4a17      	ldr	r2, [pc, #92]	@ (8004914 <xTaskPriorityDisinherit+0x10c>)
 80048b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	f1c3 0207 	rsb	r2, r3, #7
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <xTaskPriorityDisinherit+0x10c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004914 <xTaskPriorityDisinherit+0x10c>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <xTaskPriorityDisinherit+0x108>)
 80048ee:	441a      	add	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe fad7 	bl	8002eaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004900:	697b      	ldr	r3, [r7, #20]
	}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200003c4 	.word	0x200003c4
 8004910:	200003c8 	.word	0x200003c8
 8004914:	200004cc 	.word	0x200004cc

08004918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004926:	2301      	movs	r3, #1
 8004928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d079      	beq.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60fb      	str	r3, [r7, #12]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d902      	bls.n	8004960 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e002      	b.n	8004966 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004964:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	429a      	cmp	r2, r3
 800496e:	d059      	beq.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	429a      	cmp	r2, r3
 8004978:	d154      	bne.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	d10b      	bne.n	800499c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60bb      	str	r3, [r7, #8]
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db04      	blt.n	80049ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0207 	rsb	r2, r3, #7
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6959      	ldr	r1, [r3, #20]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049ca:	4413      	add	r3, r2
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d129      	bne.n	8004a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fac5 	bl	8002f64 <uxListRemove>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4013      	ands	r3, r2
 80049f2:	4a10      	ldr	r2, [pc, #64]	@ (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	2201      	movs	r2, #1
 80049fc:	409a      	lsls	r2, r3
 80049fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	4a0b      	ldr	r2, [pc, #44]	@ (8004a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a06      	ldr	r2, [pc, #24]	@ (8004a30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a16:	441a      	add	r2, r3
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe fa43 	bl	8002eaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a24:	bf00      	nop
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200003c4 	.word	0x200003c4
 8004a30:	200003c8 	.word	0x200003c8
 8004a34:	200004cc 	.word	0x200004cc

08004a38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a44:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004a4e:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8004a50:	681b      	ldr	r3, [r3, #0]
	}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	200003c4 	.word	0x200003c4

08004a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a6a:	4b29      	ldr	r3, [pc, #164]	@ (8004b10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a70:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fa74 	bl	8002f64 <uxListRemove>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a82:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	2201      	movs	r2, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4013      	ands	r3, r2
 8004a96:	4a20      	ldr	r2, [pc, #128]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d10a      	bne.n	8004ab8 <prvAddCurrentTaskToDelayedList+0x58>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	481a      	ldr	r0, [pc, #104]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ab2:	f7fe f9fa 	bl	8002eaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ab6:	e026      	b.n	8004b06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ac0:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d209      	bcs.n	8004ae4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe fa08 	bl	8002ef2 <vListInsert>
}
 8004ae2:	e010      	b.n	8004b06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7fe f9fe 	bl	8002ef2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d202      	bcs.n	8004b06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b00:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200004c8 	.word	0x200004c8
 8004b14:	200003c4 	.word	0x200003c4
 8004b18:	200004cc 	.word	0x200004cc
 8004b1c:	200004b0 	.word	0x200004b0
 8004b20:	20000480 	.word	0x20000480
 8004b24:	2000047c 	.word	0x2000047c
 8004b28:	200004e4 	.word	0x200004e4

08004b2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b90 <pxPortInitialiseStack+0x64>)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b14      	subs	r3, #20
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f06f 0202 	mvn.w	r2, #2
 8004b7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b20      	subs	r3, #32
 8004b80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	08004b95 	.word	0x08004b95

08004b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b9e:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <prvTaskExitError+0x58>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d00b      	beq.n	8004bc0 <prvTaskExitError+0x2c>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	bf00      	nop
 8004bbe:	e7fd      	b.n	8004bbc <prvTaskExitError+0x28>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60bb      	str	r3, [r7, #8]
}
 8004bd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bd4:	bf00      	nop
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0fc      	beq.n	8004bd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <pxCurrentTCBConst2>)
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	f380 8809 	msr	PSP, r0
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	4770      	bx	lr
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst2>:
 8004c10:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c18:	4808      	ldr	r0, [pc, #32]	@ (8004c3c <prvPortStartFirstTask+0x24>)
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f380 8808 	msr	MSP, r0
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8814 	msr	CONTROL, r0
 8004c2a:	b662      	cpsie	i
 8004c2c:	b661      	cpsie	f
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	df00      	svc	0
 8004c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c3a:	bf00      	nop
 8004c3c:	e000ed08 	.word	0xe000ed08

08004c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c46:	4b47      	ldr	r3, [pc, #284]	@ (8004d64 <xPortStartScheduler+0x124>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a47      	ldr	r2, [pc, #284]	@ (8004d68 <xPortStartScheduler+0x128>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10b      	bne.n	8004c68 <xPortStartScheduler+0x28>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	e7fd      	b.n	8004c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c68:	4b3e      	ldr	r3, [pc, #248]	@ (8004d64 <xPortStartScheduler+0x124>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d6c <xPortStartScheduler+0x12c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10b      	bne.n	8004c8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60fb      	str	r3, [r7, #12]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c8a:	4b39      	ldr	r3, [pc, #228]	@ (8004d70 <xPortStartScheduler+0x130>)
 8004c8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	22ff      	movs	r2, #255	@ 0xff
 8004c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	4b31      	ldr	r3, [pc, #196]	@ (8004d74 <xPortStartScheduler+0x134>)
 8004cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cb2:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb8:	e009      	b.n	8004cce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cba:	4b2f      	ldr	r3, [pc, #188]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d0ef      	beq.n	8004cba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cda:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1c3 0307 	rsb	r3, r3, #7
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d00b      	beq.n	8004cfe <xPortStartScheduler+0xbe>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60bb      	str	r3, [r7, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	e7fd      	b.n	8004cfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d10:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <xPortStartScheduler+0x138>)
 8004d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	@ (8004d7c <xPortStartScheduler+0x13c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a16      	ldr	r2, [pc, #88]	@ (8004d7c <xPortStartScheduler+0x13c>)
 8004d22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d28:	4b14      	ldr	r3, [pc, #80]	@ (8004d7c <xPortStartScheduler+0x13c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <xPortStartScheduler+0x13c>)
 8004d2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d34:	f000 f8da 	bl	8004eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d38:	4b11      	ldr	r3, [pc, #68]	@ (8004d80 <xPortStartScheduler+0x140>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d3e:	f000 f8f9 	bl	8004f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d42:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <xPortStartScheduler+0x144>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a0f      	ldr	r2, [pc, #60]	@ (8004d84 <xPortStartScheduler+0x144>)
 8004d48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d4e:	f7ff ff63 	bl	8004c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d52:	f7ff fa75 	bl	8004240 <vTaskSwitchContext>
	prvTaskExitError();
 8004d56:	f7ff ff1d 	bl	8004b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	e000ed00 	.word	0xe000ed00
 8004d68:	410fc271 	.word	0x410fc271
 8004d6c:	410fc270 	.word	0x410fc270
 8004d70:	e000e400 	.word	0xe000e400
 8004d74:	200004f0 	.word	0x200004f0
 8004d78:	200004f4 	.word	0x200004f4
 8004d7c:	e000ed20 	.word	0xe000ed20
 8004d80:	2000000c 	.word	0x2000000c
 8004d84:	e000ef34 	.word	0xe000ef34

08004d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
}
 8004da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <vPortEnterCritical+0x5c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a0e      	ldr	r2, [pc, #56]	@ (8004de4 <vPortEnterCritical+0x5c>)
 8004daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <vPortEnterCritical+0x5c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d110      	bne.n	8004dd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <vPortEnterCritical+0x60>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	603b      	str	r3, [r7, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	e7fd      	b.n	8004dd2 <vPortEnterCritical+0x4a>
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004df2:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <vPortExitCritical+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <vPortExitCritical+0x26>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e12:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <vPortExitCritical+0x50>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <vPortExitCritical+0x50>)
 8004e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e1c:	4b07      	ldr	r3, [pc, #28]	@ (8004e3c <vPortExitCritical+0x50>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <vPortExitCritical+0x44>
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
}
 8004e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	2000000c 	.word	0x2000000c

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7ff f9e6 	bl	8004240 <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
}
 8004ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ec2:	f7ff f903 	bl	80040cc <xTaskIncrementTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <SysTick_Handler+0x40>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f383 8811 	msr	BASEPRI, r3
}
 8004ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <vPortSetupTimerInterrupt+0x38>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004efc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <vPortSetupTimerInterrupt+0x3c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0a      	ldr	r2, [pc, #40]	@ (8004f2c <vPortSetupTimerInterrupt+0x40>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <vPortSetupTimerInterrupt+0x44>)
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010
 8004f24:	e000e018 	.word	0xe000e018
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	10624dd3 	.word	0x10624dd3
 8004f30:	e000e014 	.word	0xe000e014

08004f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f44 <vPortEnableVFP+0x10>
 8004f38:	6801      	ldr	r1, [r0, #0]
 8004f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f3e:	6001      	str	r1, [r0, #0]
 8004f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f42:	bf00      	nop
 8004f44:	e000ed88 	.word	0xe000ed88

08004f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d915      	bls.n	8004f86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f5a:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <vPortValidateInterruptPriority+0x74>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f64:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <vPortValidateInterruptPriority+0x78>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	7afa      	ldrb	r2, [r7, #11]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d20b      	bcs.n	8004f86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	607b      	str	r3, [r7, #4]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <vPortValidateInterruptPriority+0x7c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <vPortValidateInterruptPriority+0x80>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d90b      	bls.n	8004fae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	603b      	str	r3, [r7, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <vPortValidateInterruptPriority+0x62>
	}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	e000e3f0 	.word	0xe000e3f0
 8004fc0:	200004f0 	.word	0x200004f0
 8004fc4:	e000ed0c 	.word	0xe000ed0c
 8004fc8:	200004f4 	.word	0x200004f4

08004fcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fd8:	f7fe ffcc 	bl	8003f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8005150 <pvPortMalloc+0x184>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fe4:	f000 f924 	bl	8005230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8005154 <pvPortMalloc+0x188>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f040 8095 	bne.w	8005120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f023 0307 	bic.w	r3, r3, #7
 8005014:	3308      	adds	r3, #8
 8005016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <pvPortMalloc+0x6e>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	617b      	str	r3, [r7, #20]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d06f      	beq.n	8005120 <pvPortMalloc+0x154>
 8005040:	4b45      	ldr	r3, [pc, #276]	@ (8005158 <pvPortMalloc+0x18c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d86a      	bhi.n	8005120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800504a:	4b44      	ldr	r3, [pc, #272]	@ (800515c <pvPortMalloc+0x190>)
 800504c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800504e:	4b43      	ldr	r3, [pc, #268]	@ (800515c <pvPortMalloc+0x190>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005054:	e004      	b.n	8005060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d903      	bls.n	8005072 <pvPortMalloc+0xa6>
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f1      	bne.n	8005056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005072:	4b37      	ldr	r3, [pc, #220]	@ (8005150 <pvPortMalloc+0x184>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005078:	429a      	cmp	r2, r3
 800507a:	d051      	beq.n	8005120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2208      	movs	r2, #8
 8005082:	4413      	add	r3, r2
 8005084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	2308      	movs	r3, #8
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	429a      	cmp	r2, r3
 800509c:	d920      	bls.n	80050e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <pvPortMalloc+0xfc>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	613b      	str	r3, [r7, #16]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050da:	69b8      	ldr	r0, [r7, #24]
 80050dc:	f000 f90a 	bl	80052f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <pvPortMalloc+0x18c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <pvPortMalloc+0x18c>)
 80050ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <pvPortMalloc+0x18c>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <pvPortMalloc+0x194>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d203      	bcs.n	8005102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050fa:	4b17      	ldr	r3, [pc, #92]	@ (8005158 <pvPortMalloc+0x18c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a18      	ldr	r2, [pc, #96]	@ (8005160 <pvPortMalloc+0x194>)
 8005100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b13      	ldr	r3, [pc, #76]	@ (8005154 <pvPortMalloc+0x188>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	431a      	orrs	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005116:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <pvPortMalloc+0x198>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <pvPortMalloc+0x198>)
 800511e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005120:	f7fe ff36 	bl	8003f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <pvPortMalloc+0x17a>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	60fb      	str	r3, [r7, #12]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <pvPortMalloc+0x176>
	return pvReturn;
 8005146:	69fb      	ldr	r3, [r7, #28]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	@ 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20004100 	.word	0x20004100
 8005154:	20004114 	.word	0x20004114
 8005158:	20004104 	.word	0x20004104
 800515c:	200040f8 	.word	0x200040f8
 8005160:	20004108 	.word	0x20004108
 8005164:	2000410c 	.word	0x2000410c

08005168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800517a:	2308      	movs	r3, #8
 800517c:	425b      	negs	r3, r3
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b25      	ldr	r3, [pc, #148]	@ (8005224 <vPortFree+0xbc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <vPortFree+0x46>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <vPortFree+0x66>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60bb      	str	r3, [r7, #8]
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <vPortFree+0xbc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01e      	beq.n	800521a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11a      	bne.n	800521a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005224 <vPortFree+0xbc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051f4:	f7fe febe 	bl	8003f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <vPortFree+0xc0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4413      	add	r3, r2
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <vPortFree+0xc0>)
 8005204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005206:	6938      	ldr	r0, [r7, #16]
 8005208:	f000 f874 	bl	80052f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800520c:	4b07      	ldr	r3, [pc, #28]	@ (800522c <vPortFree+0xc4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	4a06      	ldr	r2, [pc, #24]	@ (800522c <vPortFree+0xc4>)
 8005214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005216:	f7fe febb 	bl	8003f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800521a:	bf00      	nop
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20004114 	.word	0x20004114
 8005228:	20004104 	.word	0x20004104
 800522c:	20004110 	.word	0x20004110

08005230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005236:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800523a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800523c:	4b27      	ldr	r3, [pc, #156]	@ (80052dc <prvHeapInit+0xac>)
 800523e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3307      	adds	r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0307 	bic.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <prvHeapInit+0xac>)
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <prvHeapInit+0xb0>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800526e:	4b1c      	ldr	r3, [pc, #112]	@ (80052e0 <prvHeapInit+0xb0>)
 8005270:	2200      	movs	r2, #0
 8005272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4413      	add	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800527c:	2208      	movs	r2, #8
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0307 	bic.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a15      	ldr	r2, [pc, #84]	@ (80052e4 <prvHeapInit+0xb4>)
 8005290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005292:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <prvHeapInit+0xb4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800529a:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <prvHeapInit+0xb4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <prvHeapInit+0xb4>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	@ (80052e8 <prvHeapInit+0xb8>)
 80052be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a09      	ldr	r2, [pc, #36]	@ (80052ec <prvHeapInit+0xbc>)
 80052c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052c8:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <prvHeapInit+0xc0>)
 80052ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052ce:	601a      	str	r2, [r3, #0]
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	200004f8 	.word	0x200004f8
 80052e0:	200040f8 	.word	0x200040f8
 80052e4:	20004100 	.word	0x20004100
 80052e8:	20004108 	.word	0x20004108
 80052ec:	20004104 	.word	0x20004104
 80052f0:	20004114 	.word	0x20004114

080052f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052fc:	4b28      	ldr	r3, [pc, #160]	@ (80053a0 <prvInsertBlockIntoFreeList+0xac>)
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e002      	b.n	8005308 <prvInsertBlockIntoFreeList+0x14>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d8f7      	bhi.n	8005302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4413      	add	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d108      	bne.n	8005336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d118      	bne.n	800537c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b15      	ldr	r3, [pc, #84]	@ (80053a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d00d      	beq.n	8005372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e008      	b.n	8005384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e003      	b.n	8005384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d002      	beq.n	8005392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	200040f8 	.word	0x200040f8
 80053a4:	20004100 	.word	0x20004100

080053a8 <memset>:
 80053a8:	4402      	add	r2, r0
 80053aa:	4603      	mov	r3, r0
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d100      	bne.n	80053b2 <memset+0xa>
 80053b0:	4770      	bx	lr
 80053b2:	f803 1b01 	strb.w	r1, [r3], #1
 80053b6:	e7f9      	b.n	80053ac <memset+0x4>

080053b8 <_reclaim_reent>:
 80053b8:	4b29      	ldr	r3, [pc, #164]	@ (8005460 <_reclaim_reent+0xa8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4283      	cmp	r3, r0
 80053be:	b570      	push	{r4, r5, r6, lr}
 80053c0:	4604      	mov	r4, r0
 80053c2:	d04b      	beq.n	800545c <_reclaim_reent+0xa4>
 80053c4:	69c3      	ldr	r3, [r0, #28]
 80053c6:	b1ab      	cbz	r3, 80053f4 <_reclaim_reent+0x3c>
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	b16b      	cbz	r3, 80053e8 <_reclaim_reent+0x30>
 80053cc:	2500      	movs	r5, #0
 80053ce:	69e3      	ldr	r3, [r4, #28]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	5959      	ldr	r1, [r3, r5]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d13b      	bne.n	8005450 <_reclaim_reent+0x98>
 80053d8:	3504      	adds	r5, #4
 80053da:	2d80      	cmp	r5, #128	@ 0x80
 80053dc:	d1f7      	bne.n	80053ce <_reclaim_reent+0x16>
 80053de:	69e3      	ldr	r3, [r4, #28]
 80053e0:	4620      	mov	r0, r4
 80053e2:	68d9      	ldr	r1, [r3, #12]
 80053e4:	f000 f872 	bl	80054cc <_free_r>
 80053e8:	69e3      	ldr	r3, [r4, #28]
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	b111      	cbz	r1, 80053f4 <_reclaim_reent+0x3c>
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 f86c 	bl	80054cc <_free_r>
 80053f4:	6961      	ldr	r1, [r4, #20]
 80053f6:	b111      	cbz	r1, 80053fe <_reclaim_reent+0x46>
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 f867 	bl	80054cc <_free_r>
 80053fe:	69e1      	ldr	r1, [r4, #28]
 8005400:	b111      	cbz	r1, 8005408 <_reclaim_reent+0x50>
 8005402:	4620      	mov	r0, r4
 8005404:	f000 f862 	bl	80054cc <_free_r>
 8005408:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800540a:	b111      	cbz	r1, 8005412 <_reclaim_reent+0x5a>
 800540c:	4620      	mov	r0, r4
 800540e:	f000 f85d 	bl	80054cc <_free_r>
 8005412:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005414:	b111      	cbz	r1, 800541c <_reclaim_reent+0x64>
 8005416:	4620      	mov	r0, r4
 8005418:	f000 f858 	bl	80054cc <_free_r>
 800541c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800541e:	b111      	cbz	r1, 8005426 <_reclaim_reent+0x6e>
 8005420:	4620      	mov	r0, r4
 8005422:	f000 f853 	bl	80054cc <_free_r>
 8005426:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005428:	b111      	cbz	r1, 8005430 <_reclaim_reent+0x78>
 800542a:	4620      	mov	r0, r4
 800542c:	f000 f84e 	bl	80054cc <_free_r>
 8005430:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005432:	b111      	cbz	r1, 800543a <_reclaim_reent+0x82>
 8005434:	4620      	mov	r0, r4
 8005436:	f000 f849 	bl	80054cc <_free_r>
 800543a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800543c:	b111      	cbz	r1, 8005444 <_reclaim_reent+0x8c>
 800543e:	4620      	mov	r0, r4
 8005440:	f000 f844 	bl	80054cc <_free_r>
 8005444:	6a23      	ldr	r3, [r4, #32]
 8005446:	b14b      	cbz	r3, 800545c <_reclaim_reent+0xa4>
 8005448:	4620      	mov	r0, r4
 800544a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800544e:	4718      	bx	r3
 8005450:	680e      	ldr	r6, [r1, #0]
 8005452:	4620      	mov	r0, r4
 8005454:	f000 f83a 	bl	80054cc <_free_r>
 8005458:	4631      	mov	r1, r6
 800545a:	e7bb      	b.n	80053d4 <_reclaim_reent+0x1c>
 800545c:	bd70      	pop	{r4, r5, r6, pc}
 800545e:	bf00      	nop
 8005460:	20000010 	.word	0x20000010

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	@ (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	@ (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	@ (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	@ (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 f87e 	bl	8005578 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08005764 	.word	0x08005764
 80054a0:	08005764 	.word	0x08005764
 80054a4:	08005764 	.word	0x08005764
 80054a8:	08005768 	.word	0x08005768

080054ac <__retarget_lock_acquire_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_release_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <memcpy>:
 80054b0:	440a      	add	r2, r1
 80054b2:	4291      	cmp	r1, r2
 80054b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	4770      	bx	lr
 80054bc:	b510      	push	{r4, lr}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c6:	4291      	cmp	r1, r2
 80054c8:	d1f9      	bne.n	80054be <memcpy+0xe>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <_free_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4605      	mov	r5, r0
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d041      	beq.n	8005558 <_free_r+0x8c>
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f0c      	subs	r4, r1, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb8      	it	lt
 80054de:	18e4      	addlt	r4, r4, r3
 80054e0:	f000 f83e 	bl	8005560 <__malloc_lock>
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <_free_r+0x90>)
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x2c>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	4628      	mov	r0, r5
 80054f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f4:	f000 b83a 	b.w	800556c <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x42>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x1e>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x4c>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x42>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1850      	adds	r0, r2, r1
 800551c:	42a0      	cmp	r0, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x6c>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	4401      	add	r1, r0
 8005524:	1850      	adds	r0, r2, r1
 8005526:	4283      	cmp	r3, r0
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x22>
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	4408      	add	r0, r1
 8005534:	6010      	str	r0, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x22>
 8005538:	d902      	bls.n	8005540 <_free_r+0x74>
 800553a:	230c      	movs	r3, #12
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x22>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1809      	addeq	r1, r1, r0
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x22>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	20004254 	.word	0x20004254

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	@ (8005568 <__malloc_lock+0x8>)
 8005562:	f7ff bfa3 	b.w	80054ac <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	20004250 	.word	0x20004250

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	@ (8005574 <__malloc_unlock+0x8>)
 800556e:	f7ff bf9e 	b.w	80054ae <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	20004250 	.word	0x20004250

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr


Counting_Semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d7c  08005d7c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d7c  08005d7c  00006d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d84  08005d84  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d84  08005d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005d8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000426c  2000006c  08005df8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042d8  08005df8  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012996  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caa  00000000  00000000  00019a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caf  00000000  00000000  0001d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239b4  00000000  00000000  0001e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ac  00000000  00000000  00041d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9250  00000000  00000000  00056337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  0012f5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00133ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b78 	.word	0x08005b78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005b78 	.word	0x08005b78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000088 	.word	0x20000088
 80005e0:	20000128 	.word	0x20000128

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fceb 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f879 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f90f 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f8e3 	bl	80007c0 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  CountingSemaphore = xSemaphoreCreateCounting(3,0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2003      	movs	r0, #3
 80005fe:	f002 fded 	bl	80031dc <xQueueCreateCountingSemaphore>
 8000602:	4603      	mov	r3, r0
 8000604:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <main+0xb4>)
 8000606:	6013      	str	r3, [r2, #0]
  if (CountingSemaphore == NULL){
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <main+0xb4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10b      	bne.n	8000628 <main+0x44>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"Unable to CreateSemaphore\r\n ",50,HAL_MAX_DELAY);
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2232      	movs	r2, #50	@ 0x32
 8000616:	4921      	ldr	r1, [pc, #132]	@ (800069c <main+0xb8>)
 8000618:	4821      	ldr	r0, [pc, #132]	@ (80006a0 <main+0xbc>)
 800061a:	f002 f8ab 	bl	8002774 <HAL_UART_Transmit>
	  sprintf(str,"Unable to initialze CS");
 800061e:	4921      	ldr	r1, [pc, #132]	@ (80006a4 <main+0xc0>)
 8000620:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <main+0xc4>)
 8000622:	f004 fdab 	bl	800517c <siprintf>
 8000626:	e00a      	b.n	800063e <main+0x5a>
  }
  else{
	  HAL_UART_Transmit(&huart2, (uint8_t*)"initialised the counting semaphore",50,HAL_MAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2232      	movs	r2, #50	@ 0x32
 800062e:	491f      	ldr	r1, [pc, #124]	@ (80006ac <main+0xc8>)
 8000630:	481b      	ldr	r0, [pc, #108]	@ (80006a0 <main+0xbc>)
 8000632:	f002 f89f 	bl	8002774 <HAL_UART_Transmit>
	  sprintf(str,"initialzed CS");
 8000636:	491e      	ldr	r1, [pc, #120]	@ (80006b0 <main+0xcc>)
 8000638:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0xc4>)
 800063a:	f004 fd9f 	bl	800517c <siprintf>
  }

  //create tasks

  xTaskCreate(HPT_task,"HPT",128,NULL,3,&HPT_Handler);
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <main+0xd0>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2303      	movs	r3, #3
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	491b      	ldr	r1, [pc, #108]	@ (80006b8 <main+0xd4>)
 800064c:	481b      	ldr	r0, [pc, #108]	@ (80006bc <main+0xd8>)
 800064e:	f003 f96f 	bl	8003930 <xTaskCreate>
  xTaskCreate(MPT_task,"MPT",128,NULL,2,&MPT_Handler);
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <main+0xdc>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2302      	movs	r3, #2
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2280      	movs	r2, #128	@ 0x80
 800065e:	4919      	ldr	r1, [pc, #100]	@ (80006c4 <main+0xe0>)
 8000660:	4819      	ldr	r0, [pc, #100]	@ (80006c8 <main+0xe4>)
 8000662:	f003 f965 	bl	8003930 <xTaskCreate>
  xTaskCreate(LPT_task,"LPT",128,NULL,1,&LPT_Handler);
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <main+0xe8>)
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2301      	movs	r3, #1
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	4917      	ldr	r1, [pc, #92]	@ (80006d0 <main+0xec>)
 8000674:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <main+0xf0>)
 8000676:	f003 f95b 	bl	8003930 <xTaskCreate>
  xTaskCreate(VLPT_task,"VLPT",128,NULL,0,&VLPT_Handler);
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <main+0xf4>)
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2300      	movs	r3, #0
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2280      	movs	r2, #128	@ 0x80
 8000686:	4915      	ldr	r1, [pc, #84]	@ (80006dc <main+0xf8>)
 8000688:	4815      	ldr	r0, [pc, #84]	@ (80006e0 <main+0xfc>)
 800068a:	f003 f951 	bl	8003930 <xTaskCreate>

  vTaskStartScheduler();
 800068e:	f003 fad5 	bl	8003c3c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <main+0xae>
 8000696:	bf00      	nop
 8000698:	200003e4 	.word	0x200003e4
 800069c:	08005b90 	.word	0x08005b90
 80006a0:	20000328 	.word	0x20000328
 80006a4:	08005bb0 	.word	0x08005bb0
 80006a8:	20000370 	.word	0x20000370
 80006ac:	08005bc8 	.word	0x08005bc8
 80006b0:	08005bec 	.word	0x08005bec
 80006b4:	200003d4 	.word	0x200003d4
 80006b8:	08005bfc 	.word	0x08005bfc
 80006bc:	080008f1 	.word	0x080008f1
 80006c0:	200003d8 	.word	0x200003d8
 80006c4:	08005c00 	.word	0x08005c00
 80006c8:	080009f5 	.word	0x080009f5
 80006cc:	200003dc 	.word	0x200003dc
 80006d0:	08005c04 	.word	0x08005c04
 80006d4:	08000acd 	.word	0x08000acd
 80006d8:	200003e0 	.word	0x200003e0
 80006dc:	08005c08 	.word	0x08005c08
 80006e0:	08000ba5 	.word	0x08000ba5

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	@ 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fd62 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a29      	ldr	r2, [pc, #164]	@ (80007b8 <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <SystemClock_Config+0xd8>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000760:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fa74 	bl	8001c60 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077e:	f000 fa93 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fee2 	bl	8001568 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007aa:	f000 fa7d 	bl	8000ca8 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f001 ff6c 	bl	80026d4 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 fa51 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000328 	.word	0x20000328
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a2c      	ldr	r2, [pc, #176]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a1e      	ldr	r2, [pc, #120]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <MX_GPIO_Init+0xd4>)
 80008a0:	f000 fe48 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_GPIO_Init+0xd8>)
 80008bc:	f000 fca6 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_GPIO_Init+0xd4>)
 80008d8:	f000 fc98 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800

080008f0 <HPT_task>:

/* USER CODE BEGIN 4 */
void HPT_task(void *pvParameters){
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b092      	sub	sp, #72	@ 0x48
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	char sresource[10];

	//Give 3 semaphores at the beginning
	xSemaphoreGive(CountingSemaphore);
 80008f8:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <HPT_task+0xec>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	f002 fca1 	bl	8003248 <xQueueGenericSend>
	xSemaphoreGive(CountingSemaphore);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <HPT_task+0xec>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	f002 fc9a 	bl	8003248 <xQueueGenericSend>
	xSemaphoreGive(CountingSemaphore);
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <HPT_task+0xec>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	2300      	movs	r3, #0
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	f002 fc93 	bl	8003248 <xQueueGenericSend>
	while(1){
		char str[] = "Entered HPT task \n about to acquire the semaphore\r\n";
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <HPT_task+0xf0>)
 8000924:	f107 0408 	add.w	r4, r7, #8
 8000928:	461d      	mov	r5, r3
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	682b      	ldr	r3, [r5, #0]
 8000938:	6023      	str	r3, [r4, #0]
	    xSemaphoreTake(CountingSemaphore,portMAX_DELAY);
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <HPT_task+0xec>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f04f 31ff 	mov.w	r1, #4294967295
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fd82 	bl	800344c <xQueueSemaphoreTake>

	    itoa(resource[idx],sresource,10);
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <HPT_task+0xf4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a26      	ldr	r2, [pc, #152]	@ (80009e8 <HPT_task+0xf8>)
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000956:	220a      	movs	r2, #10
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fbcb 	bl	80050f4 <itoa>
	    strcpy(str,sresource);
 800095e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fcb1 	bl	80052d0 <strcpy>
	    strcat(str,"\n Not releasing the Semaphore\r\n");
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc4c 	bl	8000210 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4413      	add	r3, r2
 8000982:	4a1a      	ldr	r2, [pc, #104]	@ (80009ec <HPT_task+0xfc>)
 8000984:	461c      	mov	r4, r3
 8000986:	4615      	mov	r5, r2
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	6020      	str	r0, [r4, #0]
 800098c:	6061      	str	r1, [r4, #4]
 800098e:	60a2      	str	r2, [r4, #8]
 8000990:	60e3      	str	r3, [r4, #12]
 8000992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000994:	6120      	str	r0, [r4, #16]
 8000996:	6161      	str	r1, [r4, #20]
 8000998:	61a2      	str	r2, [r4, #24]
 800099a:	61e3      	str	r3, [r4, #28]
	    HAL_UART_Transmit(&huart2, (uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc35 	bl	8000210 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	f107 0108 	add.w	r1, r7, #8
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <HPT_task+0x100>)
 80009b4:	f001 fede 	bl	8002774 <HAL_UART_Transmit>

	    idx ++;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HPT_task+0xf4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HPT_task+0xf4>)
 80009c0:	6013      	str	r3, [r2, #0]
	    if (idx >2) idx = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HPT_task+0xf4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	dd02      	ble.n	80009d0 <HPT_task+0xe0>
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HPT_task+0xf4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
	    vTaskDelay(3000);
 80009d0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80009d4:	f003 f8fc 	bl	8003bd0 <vTaskDelay>
	while(1){
 80009d8:	e7a3      	b.n	8000922 <HPT_task+0x32>
 80009da:	bf00      	nop
 80009dc:	200003e4 	.word	0x200003e4
 80009e0:	08005c30 	.word	0x08005c30
 80009e4:	200003e8 	.word	0x200003e8
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08005c10 	.word	0x08005c10
 80009f0:	20000328 	.word	0x20000328

080009f4 <MPT_task>:
	}
}

/* USER CODE BEGIN 4 */
void MPT_task(void *pvParameters){
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	b092      	sub	sp, #72	@ 0x48
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	char sresource[10];

	while(1){
		char str[] = "Entered MPT task \n about to acquire the semaphore\r\n";
 80009fc:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <MPT_task+0xc0>)
 80009fe:	f107 0408 	add.w	r4, r7, #8
 8000a02:	461d      	mov	r5, r3
 8000a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	6023      	str	r3, [r4, #0]
	    xSemaphoreTake(CountingSemaphore,portMAX_DELAY);
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <MPT_task+0xc4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fd15 	bl	800344c <xQueueSemaphoreTake>

	    itoa(resource[idx],sresource,10);
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MPT_task+0xc8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a26      	ldr	r2, [pc, #152]	@ (8000ac0 <MPT_task+0xcc>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a30:	220a      	movs	r2, #10
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 fb5e 	bl	80050f4 <itoa>
	    strcpy(str,sresource);
 8000a38:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 fc44 	bl	80052d0 <strcpy>
	    strcat(str,"\n Not releasing the Semaphore\r\n");
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fbdf 	bl	8000210 <strlen>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <MPT_task+0xd0>)
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4615      	mov	r5, r2
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	6020      	str	r0, [r4, #0]
 8000a66:	6061      	str	r1, [r4, #4]
 8000a68:	60a2      	str	r2, [r4, #8]
 8000a6a:	60e3      	str	r3, [r4, #12]
 8000a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6e:	6120      	str	r0, [r4, #16]
 8000a70:	6161      	str	r1, [r4, #20]
 8000a72:	61a2      	str	r2, [r4, #24]
 8000a74:	61e3      	str	r3, [r4, #28]
	    HAL_UART_Transmit(&huart2, (uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbc8 	bl	8000210 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f107 0108 	add.w	r1, r7, #8
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MPT_task+0xd4>)
 8000a8e:	f001 fe71 	bl	8002774 <HAL_UART_Transmit>

	    idx ++;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <MPT_task+0xc8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <MPT_task+0xc8>)
 8000a9a:	6013      	str	r3, [r2, #0]
	    if (idx >2) idx = 0;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <MPT_task+0xc8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	dd02      	ble.n	8000aaa <MPT_task+0xb6>
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <MPT_task+0xc8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	    vTaskDelay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f003 f88f 	bl	8003bd0 <vTaskDelay>
	while(1){
 8000ab2:	e7a3      	b.n	80009fc <MPT_task+0x8>
 8000ab4:	08005c64 	.word	0x08005c64
 8000ab8:	200003e4 	.word	0x200003e4
 8000abc:	200003e8 	.word	0x200003e8
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	08005c10 	.word	0x08005c10
 8000ac8:	20000328 	.word	0x20000328

08000acc <LPT_task>:
	}
}

/* USER CODE BEGIN 4 */
void LPT_task(void *pvParameters){
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	b092      	sub	sp, #72	@ 0x48
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	char sresource[10];

	while(1){
		char str[] = "Entered LPT task \n about to acquire the semaphore\r\n";
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <LPT_task+0xc0>)
 8000ad6:	f107 0408 	add.w	r4, r7, #8
 8000ada:	461d      	mov	r5, r3
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	6023      	str	r3, [r4, #0]
	    xSemaphoreTake(CountingSemaphore,portMAX_DELAY);
 8000aec:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <LPT_task+0xc4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fca9 	bl	800344c <xQueueSemaphoreTake>

	    itoa(resource[idx],sresource,10);
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <LPT_task+0xc8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a26      	ldr	r2, [pc, #152]	@ (8000b98 <LPT_task+0xcc>)
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000b08:	220a      	movs	r2, #10
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 faf2 	bl	80050f4 <itoa>
	    strcpy(str,sresource);
 8000b10:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fbd8 	bl	80052d0 <strcpy>
	    strcat(str,"\n Not releasing the Semaphore\r\n");
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb73 	bl	8000210 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4413      	add	r3, r2
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <LPT_task+0xd0>)
 8000b36:	461c      	mov	r4, r3
 8000b38:	4615      	mov	r5, r2
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	6020      	str	r0, [r4, #0]
 8000b3e:	6061      	str	r1, [r4, #4]
 8000b40:	60a2      	str	r2, [r4, #8]
 8000b42:	60e3      	str	r3, [r4, #12]
 8000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b46:	6120      	str	r0, [r4, #16]
 8000b48:	6161      	str	r1, [r4, #20]
 8000b4a:	61a2      	str	r2, [r4, #24]
 8000b4c:	61e3      	str	r3, [r4, #28]
	    HAL_UART_Transmit(&huart2, (uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb5c 	bl	8000210 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f107 0108 	add.w	r1, r7, #8
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <LPT_task+0xd4>)
 8000b66:	f001 fe05 	bl	8002774 <HAL_UART_Transmit>

	    idx ++;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <LPT_task+0xc8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <LPT_task+0xc8>)
 8000b72:	6013      	str	r3, [r2, #0]
	    if (idx >2) idx = 0;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <LPT_task+0xc8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	dd02      	ble.n	8000b82 <LPT_task+0xb6>
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <LPT_task+0xc8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
	    vTaskDelay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b86:	f003 f823 	bl	8003bd0 <vTaskDelay>
	while(1){
 8000b8a:	e7a3      	b.n	8000ad4 <LPT_task+0x8>
 8000b8c:	08005c98 	.word	0x08005c98
 8000b90:	200003e4 	.word	0x200003e4
 8000b94:	200003e8 	.word	0x200003e8
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	08005c10 	.word	0x08005c10
 8000ba0:	20000328 	.word	0x20000328

08000ba4 <VLPT_task>:
	}
}

/* USER CODE BEGIN 4 */
void VLPT_task(void *pvParameters){
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	char sresource[10];

	while(1){
		char str[] = "Entered VLPT task \n about to acquire the semaphore\r\n";
 8000bac:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <VLPT_task+0xc8>)
 8000bae:	f107 040c 	add.w	r4, r7, #12
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bc4:	6020      	str	r0, [r4, #0]
 8000bc6:	3404      	adds	r4, #4
 8000bc8:	7021      	strb	r1, [r4, #0]
	    xSemaphoreTake(CountingSemaphore,portMAX_DELAY);
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <VLPT_task+0xcc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fc3a 	bl	800344c <xQueueSemaphoreTake>

	    itoa(resource[idx],sresource,10);
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <VLPT_task+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <VLPT_task+0xd4>)
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000be6:	220a      	movs	r2, #10
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fa83 	bl	80050f4 <itoa>
	    strcpy(str,sresource);
 8000bee:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fb69 	bl	80052d0 <strcpy>
	    strcat(str,"\n Not releasing the Semaphore\r\n");
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fb04 	bl	8000210 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4413      	add	r3, r2
 8000c12:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <VLPT_task+0xd8>)
 8000c14:	461c      	mov	r4, r3
 8000c16:	4615      	mov	r5, r2
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	6020      	str	r0, [r4, #0]
 8000c1c:	6061      	str	r1, [r4, #4]
 8000c1e:	60a2      	str	r2, [r4, #8]
 8000c20:	60e3      	str	r3, [r4, #12]
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	6120      	str	r0, [r4, #16]
 8000c26:	6161      	str	r1, [r4, #20]
 8000c28:	61a2      	str	r2, [r4, #24]
 8000c2a:	61e3      	str	r3, [r4, #28]
	    HAL_UART_Transmit(&huart2, (uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff faed 	bl	8000210 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f107 010c 	add.w	r1, r7, #12
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <VLPT_task+0xdc>)
 8000c44:	f001 fd96 	bl	8002774 <HAL_UART_Transmit>

	    idx ++;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <VLPT_task+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <VLPT_task+0xd0>)
 8000c50:	6013      	str	r3, [r2, #0]
	    if (idx >2) idx = 0;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <VLPT_task+0xd0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	dd02      	ble.n	8000c60 <VLPT_task+0xbc>
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <VLPT_task+0xd0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
	    vTaskDelay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c64:	f002 ffb4 	bl	8003bd0 <vTaskDelay>
	while(1){
 8000c68:	e7a0      	b.n	8000bac <VLPT_task+0x8>
 8000c6a:	bf00      	nop
 8000c6c:	08005ccc 	.word	0x08005ccc
 8000c70:	200003e4 	.word	0x200003e4
 8000c74:	200003e8 	.word	0x200003e8
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	08005c10 	.word	0x08005c10
 8000c80:	20000328 	.word	0x20000328

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f000 f9b7 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	4a11      	ldr	r2, [pc, #68]	@ (8000d08 <HAL_MspInit+0x54>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <HAL_MspInit+0x54>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_MspInit+0x54>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_MspInit+0x54>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	f06f 0001 	mvn.w	r0, #1
 8000cfa:	f000 fa5d 	bl	80011b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	@ (8000d90 <HAL_UART_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12b      	bne.n	8000d86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d66:	230c      	movs	r3, #12
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d76:	2307      	movs	r3, #7
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d82:	f000 fa43 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	@ 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	@ 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b30      	ldr	r3, [pc, #192]	@ (8000e80 <HAL_InitTick+0xe4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fce2 	bl	800179c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de2:	f000 fcb3 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8000de6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dea:	f000 fcaf 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df6:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_InitTick+0xe8>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	0c9b      	lsrs	r3, r3, #18
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	@ (8000e8c <HAL_InitTick+0xf0>)
 8000e06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e10:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e28:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e2a:	f001 f9b7 	bl	800219c <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11b      	bne.n	8000e74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <HAL_InitTick+0xec>)
 8000e3e:	f001 fa07 	bl	8002250 <HAL_TIM_Base_Start_IT>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e50:	2036      	movs	r0, #54	@ 0x36
 8000e52:	f000 f9cd 	bl	80011f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d808      	bhi.n	8000e6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2036      	movs	r0, #54	@ 0x36
 8000e62:	f000 f9a9 	bl	80011b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <HAL_InitTick+0xf4>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e002      	b.n	8000e74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3738      	adds	r7, #56	@ 0x38
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	200003ec 	.word	0x200003ec
 8000e8c:	40001000 	.word	0x40001000
 8000e90:	20000010 	.word	0x20000010

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <TIM6_DAC_IRQHandler+0x10>)
 8000ed2:	f001 fa2d 	bl	8002330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003ec 	.word	0x200003ec

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f004 f9b2 	bl	8005278 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20020000 	.word	0x20020000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000434 	.word	0x20000434
 8000f48:	200042d8 	.word	0x200042d8

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f004 f971 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fb1f 	bl	80005e4 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fb4:	08005d8c 	.word	0x08005d8c
  ldr r2, =_sbss
 8000fb8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fbc:	200042d8 	.word	0x200042d8

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f8d8 	bl	80011a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff fed2 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe5c 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000014 	.word	0x20000014
 800102c:	20000438 	.word	0x20000438

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000438 	.word	0x20000438

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff4c 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ca:	f7ff ff61 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6978      	ldr	r0, [r7, #20]
 80011d6:	f7ff ffb1 	bl	800113c <NVIC_EncodePriority>
 80011da:	4602      	mov	r2, r0
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff80 	bl	80010e8 <__NVIC_SetPriority>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff54 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e165      	b.n	80014f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8154 	bne.w	80014ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80ae 	beq.w	80014ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <HAL_GPIO_Init+0x300>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <HAL_GPIO_Init+0x300>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b5a      	ldr	r3, [pc, #360]	@ (800150c <HAL_GPIO_Init+0x300>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a58      	ldr	r2, [pc, #352]	@ (8001510 <HAL_GPIO_Init+0x304>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001514 <HAL_GPIO_Init+0x308>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001518 <HAL_GPIO_Init+0x30c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	@ (800151c <HAL_GPIO_Init+0x310>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001520 <HAL_GPIO_Init+0x314>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001524 <HAL_GPIO_Init+0x318>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x20a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001528 <HAL_GPIO_Init+0x31c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x206>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	@ (800152c <HAL_GPIO_Init+0x320>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x202>
 800140a:	2306      	movs	r3, #6
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800140e:	2307      	movs	r3, #7
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x21c>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	@ (8001510 <HAL_GPIO_Init+0x304>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b3a      	ldr	r3, [pc, #232]	@ (8001530 <HAL_GPIO_Init+0x324>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146a:	4a31      	ldr	r2, [pc, #196]	@ (8001530 <HAL_GPIO_Init+0x324>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <HAL_GPIO_Init+0x324>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001494:	4a26      	ldr	r2, [pc, #152]	@ (8001530 <HAL_GPIO_Init+0x324>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <HAL_GPIO_Init+0x324>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <HAL_GPIO_Init+0x324>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_GPIO_Init+0x324>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_GPIO_Init+0x324>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae96 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	@ 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0cc      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b68      	ldr	r3, [pc, #416]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d90c      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b63      	ldr	r3, [pc, #396]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b8      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015bc:	4b59      	ldr	r3, [pc, #356]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a58      	ldr	r2, [pc, #352]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e0:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	494d      	ldr	r1, [pc, #308]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d044      	beq.n	8001688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	4b47      	ldr	r3, [pc, #284]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e07f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d003      	beq.n	8001626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	2b03      	cmp	r3, #3
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e06f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e067      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001646:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 0203 	bic.w	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4934      	ldr	r1, [pc, #208]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001658:	f7ff fcea 	bl	8001030 <HAL_GetTick>
 800165c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	e00a      	b.n	8001676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff fce6 	bl	8001030 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04f      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 020c 	and.w	r2, r3, #12
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	429a      	cmp	r2, r3
 8001686:	d1eb      	bne.n	8001660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e032      	b.n	8001716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4916      	ldr	r1, [pc, #88]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	490e      	ldr	r1, [pc, #56]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ee:	f000 f887 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	490a      	ldr	r1, [pc, #40]	@ (8001728 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	5ccb      	ldrb	r3, [r1, r3]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fb44 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00
 8001724:	40023800 	.word	0x40023800
 8001728:	08005d0c 	.word	0x08005d0c
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000010 	.word	0x20000010

08001734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000000c 	.word	0x2000000c

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a9b      	lsrs	r3, r3, #10
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	@ (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	08005d1c 	.word	0x08005d1c

08001774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001778:	f7ff ffdc 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	0b5b      	lsrs	r3, r3, #13
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	@ (8001798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	08005d1c 	.word	0x08005d1c

0800179c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	220f      	movs	r2, #15
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <HAL_RCC_GetClockConfig+0x60>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 020f 	and.w	r2, r3, #15
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001804:	b0ae      	sub	sp, #184	@ 0xb8
 8001806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001826:	4bcb      	ldr	r3, [pc, #812]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b0c      	cmp	r3, #12
 8001830:	f200 8206 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x440>
 8001834:	a201      	add	r2, pc, #4	@ (adr r2, 800183c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	08001871 	.word	0x08001871
 8001840:	08001c41 	.word	0x08001c41
 8001844:	08001c41 	.word	0x08001c41
 8001848:	08001c41 	.word	0x08001c41
 800184c:	08001879 	.word	0x08001879
 8001850:	08001c41 	.word	0x08001c41
 8001854:	08001c41 	.word	0x08001c41
 8001858:	08001c41 	.word	0x08001c41
 800185c:	08001881 	.word	0x08001881
 8001860:	08001c41 	.word	0x08001c41
 8001864:	08001c41 	.word	0x08001c41
 8001868:	08001c41 	.word	0x08001c41
 800186c:	08001a71 	.word	0x08001a71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4bb9      	ldr	r3, [pc, #740]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0x358>)
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001876:	e1e7      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4bb8      	ldr	r3, [pc, #736]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x35c>)
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800187e:	e1e3      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4bb4      	ldr	r3, [pc, #720]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188c:	4bb1      	ldr	r3, [pc, #708]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d071      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4bae      	ldr	r3, [pc, #696]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	2200      	movs	r2, #0
 80018a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	6439      	str	r1, [r7, #64]	@ 0x40
 80018dc:	4629      	mov	r1, r5
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1a51      	subs	r1, r2, r1
 8001902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001904:	4649      	mov	r1, r9
 8001906:	eb63 0301 	sbc.w	r3, r3, r1
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001918:	4649      	mov	r1, r9
 800191a:	00cb      	lsls	r3, r1, #3
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001922:	4641      	mov	r1, r8
 8001924:	00ca      	lsls	r2, r1, #3
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	633b      	str	r3, [r7, #48]	@ 0x30
 8001932:	462b      	mov	r3, r5
 8001934:	460a      	mov	r2, r1
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	637b      	str	r3, [r7, #52]	@ 0x34
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001948:	4629      	mov	r1, r5
 800194a:	024b      	lsls	r3, r1, #9
 800194c:	4621      	mov	r1, r4
 800194e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001952:	4621      	mov	r1, r4
 8001954:	024a      	lsls	r2, r1, #9
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800195e:	2200      	movs	r2, #0
 8001960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001964:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001968:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800196c:	f7fe fca8 	bl	80002c0 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800197a:	e067      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197c:	4b75      	ldr	r3, [pc, #468]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	2200      	movs	r2, #0
 8001984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001988:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800198c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001994:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001996:	2300      	movs	r3, #0
 8001998:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800199a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800199e:	4622      	mov	r2, r4
 80019a0:	462b      	mov	r3, r5
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4621      	mov	r1, r4
 80019b8:	1a51      	subs	r1, r2, r1
 80019ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80019bc:	4629      	mov	r1, r5
 80019be:	eb63 0301 	sbc.w	r3, r3, r1
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80019d0:	4649      	mov	r1, r9
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	4641      	mov	r1, r8
 80019d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019da:	4641      	mov	r1, r8
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	4641      	mov	r1, r8
 80019e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e4:	4649      	mov	r1, r9
 80019e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019fe:	4692      	mov	sl, r2
 8001a00:	469b      	mov	fp, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	eb1a 0303 	adds.w	r3, sl, r3
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a34:	2200      	movs	r2, #0
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a38:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a3e:	f7fe fc3f 	bl	80002c0 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4613      	mov	r3, r2
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a4c:	4b41      	ldr	r3, [pc, #260]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a6e:	e0eb      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7c:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d06b      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	2200      	movs	r2, #0
 8001a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001aa0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0159      	lsls	r1, r3, #5
 8001ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab6:	0150      	lsls	r0, r2, #5
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4621      	mov	r1, r4
 8001abe:	1a51      	subs	r1, r2, r1
 8001ac0:	61b9      	str	r1, [r7, #24]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ad6:	4659      	mov	r1, fp
 8001ad8:	018b      	lsls	r3, r1, #6
 8001ada:	4651      	mov	r1, sl
 8001adc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	018a      	lsls	r2, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ebb2 0801 	subs.w	r8, r2, r1
 8001aea:	4659      	mov	r1, fp
 8001aec:	eb63 0901 	sbc.w	r9, r3, r1
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b04:	4690      	mov	r8, r2
 8001b06:	4699      	mov	r9, r3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	eb18 0303 	adds.w	r3, r8, r3
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	462b      	mov	r3, r5
 8001b12:	eb49 0303 	adc.w	r3, r9, r3
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b24:	4629      	mov	r1, r5
 8001b26:	024b      	lsls	r3, r1, #9
 8001b28:	4621      	mov	r1, r4
 8001b2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b2e:	4621      	mov	r1, r4
 8001b30:	024a      	lsls	r2, r1, #9
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b44:	f7fe fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b52:	e065      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x420>
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b70:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b72:	2300      	movs	r3, #0
 8001b74:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	464b      	mov	r3, r9
 8001b7e:	f04f 0000 	mov.w	r0, #0
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	0159      	lsls	r1, r3, #5
 8001b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8c:	0150      	lsls	r0, r2, #5
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4641      	mov	r1, r8
 8001b94:	1a51      	subs	r1, r2, r1
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	4649      	mov	r1, r9
 8001b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001bac:	4659      	mov	r1, fp
 8001bae:	018b      	lsls	r3, r1, #6
 8001bb0:	4651      	mov	r1, sl
 8001bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	018a      	lsls	r2, r1, #6
 8001bba:	4651      	mov	r1, sl
 8001bbc:	1a54      	subs	r4, r2, r1
 8001bbe:	4659      	mov	r1, fp
 8001bc0:	eb63 0501 	sbc.w	r5, r3, r1
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	00eb      	lsls	r3, r5, #3
 8001bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd2:	00e2      	lsls	r2, r4, #3
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	18e3      	adds	r3, r4, r3
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	464b      	mov	r3, r9
 8001be0:	eb45 0303 	adc.w	r3, r5, r3
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	028b      	lsls	r3, r1, #10
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	028a      	lsls	r2, r1, #10
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c08:	2200      	movs	r2, #0
 8001c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c0c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c12:	f7fe fb55 	bl	80002c0 <__aeabi_uldivmod>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0f1b      	lsrs	r3, r3, #28
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c3e:	e003      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	37b8      	adds	r7, #184	@ 0xb8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400

08001c60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e28d      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8083 	beq.w	8001d86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c80:	4b94      	ldr	r3, [pc, #592]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d019      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c8c:	4b91      	ldr	r3, [pc, #580]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c98:	4b8e      	ldr	r3, [pc, #568]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b84      	ldr	r3, [pc, #528]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05b      	beq.n	8001d84 <HAL_RCC_OscConfig+0x124>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d157      	bne.n	8001d84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e25a      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x90>
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xcc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xb4>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xcc>
 8001d14:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f97c 	bl	8001030 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f978 	bl	8001030 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e21f      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b61      	ldr	r3, [pc, #388]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xdc>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f968 	bl	8001030 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f964 	bl	8001030 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e20b      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b57      	ldr	r3, [pc, #348]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x104>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06f      	beq.n	8001e72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d92:	4b50      	ldr	r3, [pc, #320]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d017      	beq.n	8001dce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001daa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b47      	ldr	r3, [pc, #284]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x186>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1d3      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4937      	ldr	r1, [pc, #220]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f911 	bl	8001030 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff f90d 	bl	8001030 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1b4      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4925      	ldr	r1, [pc, #148]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f8f0 	bl	8001030 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f8ec 	bl	8001030 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e193      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d036      	beq.n	8001eec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d016      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f8d0 	bl	8001030 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f8cc 	bl	8001030 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e173      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x234>
 8001eb2:	e01b      	b.n	8001eec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f8b9 	bl	8001030 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e00e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f8b5 	bl	8001030 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d907      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e15c      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	42470000 	.word	0x42470000
 8001edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ea      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 8097 	beq.w	8002028 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b83      	ldr	r3, [pc, #524]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a7e      	ldr	r2, [pc, #504]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b79      	ldr	r3, [pc, #484]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b76      	ldr	r3, [pc, #472]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f875 	bl	8001030 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff f871 	bl	8001030 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e118      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x31e>
 8001f70:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	4a65      	ldr	r2, [pc, #404]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x358>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x340>
 8001f86:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	4a60      	ldr	r2, [pc, #384]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f92:	4b5e      	ldr	r3, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x358>
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	4a59      	ldr	r2, [pc, #356]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fac:	4b57      	ldr	r3, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a56      	ldr	r2, [pc, #344]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f836 	bl	8001030 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f832 	bl	8001030 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0d7      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ee      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x368>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f820 	bl	8001030 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f81c 	bl	8001030 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0c1      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ee      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	4a3a      	ldr	r2, [pc, #232]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80ad 	beq.w	800218c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002032:	4b36      	ldr	r3, [pc, #216]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d060      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d145      	bne.n	80020d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fff0 	bl	8001030 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ffec 	bl	8001030 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e093      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe ffc1 	bl	8001030 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe ffbd 	bl	8001030 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e064      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x452>
 80020d0:	e05c      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe ffaa 	bl	8001030 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe ffa6 	bl	8001030 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e04d      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
 80020fe:	e045      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e040      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <HAL_RCC_OscConfig+0x538>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d030      	beq.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d129      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d122      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d119      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d10f      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e041      	b.n	8002232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f839 	bl	800223a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 f9c0 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d001      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e04e      	b.n	8002306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <HAL_TIM_Base_Start_IT+0xc4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d022      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002292:	d01d      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <HAL_TIM_Base_Start_IT+0xc8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d018      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	@ (800231c <HAL_TIM_Base_Start_IT+0xcc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_TIM_Base_Start_IT+0xd0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00e      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <HAL_TIM_Base_Start_IT+0xd4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_TIM_Base_Start_IT+0xd8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d004      	beq.n	80022d0 <HAL_TIM_Base_Start_IT+0x80>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_TIM_Base_Start_IT+0xdc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d111      	bne.n	80022f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d010      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	e007      	b.n	8002304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40010400 	.word	0x40010400
 8002328:	40014000 	.word	0x40014000
 800232c:	40001800 	.word	0x40001800

08002330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d020      	beq.n	8002394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0202 	mvn.w	r2, #2
 8002364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8d2 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8c4 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8d5 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d020      	beq.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0204 	mvn.w	r2, #4
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8ac 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f89e 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8af 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0208 	mvn.w	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f886 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f878 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f889 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2208      	movs	r2, #8
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f860 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f852 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f863 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0201 	mvn.w	r2, #1
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fbf4 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f900 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f834 	bl	800254c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0220 	mvn.w	r2, #32
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8d2 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a43      	ldr	r2, [pc, #268]	@ (8002680 <TIM_Base_SetConfig+0x120>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257e:	d00f      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <TIM_Base_SetConfig+0x124>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00b      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3f      	ldr	r2, [pc, #252]	@ (8002688 <TIM_Base_SetConfig+0x128>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3e      	ldr	r2, [pc, #248]	@ (800268c <TIM_Base_SetConfig+0x12c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a3d      	ldr	r2, [pc, #244]	@ (8002690 <TIM_Base_SetConfig+0x130>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a32      	ldr	r2, [pc, #200]	@ (8002680 <TIM_Base_SetConfig+0x120>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c0:	d027      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <TIM_Base_SetConfig+0x124>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d023      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002688 <TIM_Base_SetConfig+0x128>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <TIM_Base_SetConfig+0x12c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01b      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <TIM_Base_SetConfig+0x130>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d017      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <TIM_Base_SetConfig+0x134>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <TIM_Base_SetConfig+0x138>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00f      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <TIM_Base_SetConfig+0x13c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00b      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <TIM_Base_SetConfig+0x140>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a27      	ldr	r2, [pc, #156]	@ (80026a4 <TIM_Base_SetConfig+0x144>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a26      	ldr	r2, [pc, #152]	@ (80026a8 <TIM_Base_SetConfig+0x148>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0e      	ldr	r2, [pc, #56]	@ (8002680 <TIM_Base_SetConfig+0x120>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0xf2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <TIM_Base_SetConfig+0x130>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d103      	bne.n	800265a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40010400 	.word	0x40010400
 8002694:	40014000 	.word	0x40014000
 8002698:	40014400 	.word	0x40014400
 800269c:	40014800 	.word	0x40014800
 80026a0:	40001800 	.word	0x40001800
 80026a4:	40001c00 	.word	0x40001c00
 80026a8:	40002000 	.word	0x40002000

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e042      	b.n	800276c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fb06 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	@ 0x24
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f973 	bl	8002a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800274c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d175      	bne.n	8002880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_UART_Transmit+0x2c>
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe fc3d 	bl	8001030 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e8:	e02e      	b.n	8002848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f848 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03a      	b.n	8002882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3302      	adds	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e007      	b.n	800283a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1cb      	bne.n	80027ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f814 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	e03b      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d037      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7fe fbc4 	bl	8001030 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6a3a      	ldr	r2, [r7, #32]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e03a      	b.n	8002934 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b80      	cmp	r3, #128	@ 0x80
 80028d0:	d020      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b40      	cmp	r3, #64	@ 0x40
 80028d6:	d01d      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d116      	bne.n	8002914 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f81d 	bl	800293c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2208      	movs	r2, #8
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e00f      	b.n	8002934 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d0b4      	beq.n	800289c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b095      	sub	sp, #84	@ 0x54
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002964:	643a      	str	r2, [r7, #64]	@ 0x40
 8002966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800296a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800296c:	e841 2300 	strex	r3, r2, [r1]
 8002970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	61fb      	str	r3, [r7, #28]
   return(result);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d119      	bne.n	80029e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029d4:	61ba      	str	r2, [r7, #24]
 80029d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6979      	ldr	r1, [r7, #20]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	613b      	str	r3, [r7, #16]
   return(result);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029f6:	bf00      	nop
 80029f8:	3754      	adds	r7, #84	@ 0x54
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a08:	b0c0      	sub	sp, #256	@ 0x100
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	ea40 0301 	orr.w	r3, r0, r1
 8002a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a5c:	f021 010c 	bic.w	r1, r1, #12
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	6999      	ldr	r1, [r3, #24]
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	ea40 0301 	orr.w	r3, r0, r1
 8002a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <UART_SetConfig+0x2cc>)
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0xa0>
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <UART_SetConfig+0x2d0>)
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7fe fe66 	bl	8001774 <HAL_RCC_GetPCLK2Freq>
 8002aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002aac:	e003      	b.n	8002ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7fe fe4d 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8002ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac0:	f040 810c 	bne.w	8002cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ace:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	eb12 0801 	adds.w	r8, r2, r1
 8002aec:	4629      	mov	r1, r5
 8002aee:	eb43 0901 	adc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b14:	462b      	mov	r3, r5
 8002b16:	eb49 0303 	adc.w	r3, r9, r3
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b32:	460b      	mov	r3, r1
 8002b34:	18db      	adds	r3, r3, r3
 8002b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b38:	4613      	mov	r3, r2
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b48:	f7fd fbba 	bl	80002c0 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	011c      	lsls	r4, r3, #4
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b74:	415b      	adcs	r3, r3
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b82:	4649      	mov	r1, r9
 8002b84:	eb43 0b01 	adc.w	fp, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9c:	4692      	mov	sl, r2
 8002b9e:	469b      	mov	fp, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002baa:	464b      	mov	r3, r9
 8002bac:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bce:	4613      	mov	r3, r2
 8002bd0:	eb42 0303 	adc.w	r3, r2, r3
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bde:	f7fd fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	@ 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bfe:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002c00:	fba3 2302 	umull	r2, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c0c:	441c      	add	r4, r3
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c84:	460b      	mov	r3, r1
 8002c86:	18db      	adds	r3, r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c9a:	f7fd fb11 	bl	80002c0 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	@ 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3332      	adds	r3, #50	@ 0x32
 8002cb6:	4a08      	ldr	r2, [pc, #32]	@ (8002cd8 <UART_SetConfig+0x2d4>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 0207 	and.w	r2, r3, #7
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4422      	add	r2, r4
 8002cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ccc:	e106      	b.n	8002edc <UART_SetConfig+0x4d8>
 8002cce:	bf00      	nop
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cee:	4642      	mov	r2, r8
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	6239      	str	r1, [r7, #32]
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cfe:	4641      	mov	r1, r8
 8002d00:	1854      	adds	r4, r2, r1
 8002d02:	4649      	mov	r1, r9
 8002d04:	eb43 0501 	adc.w	r5, r3, r1
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	00eb      	lsls	r3, r5, #3
 8002d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d16:	00e2      	lsls	r2, r4, #3
 8002d18:	4614      	mov	r4, r2
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	18e3      	adds	r3, r4, r3
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d24:	464b      	mov	r3, r9
 8002d26:	eb45 0303 	adc.w	r3, r5, r3
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	008b      	lsls	r3, r1, #2
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d54:	4621      	mov	r1, r4
 8002d56:	008a      	lsls	r2, r1, #2
 8002d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d5c:	f7fd fab0 	bl	80002c0 <__aeabi_uldivmod>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4b60      	ldr	r3, [pc, #384]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002d66:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	011c      	lsls	r4, r3, #4
 8002d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	1891      	adds	r1, r2, r2
 8002d86:	61b9      	str	r1, [r7, #24]
 8002d88:	415b      	adcs	r3, r3
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d90:	4641      	mov	r1, r8
 8002d92:	1851      	adds	r1, r2, r1
 8002d94:	6139      	str	r1, [r7, #16]
 8002d96:	4649      	mov	r1, r9
 8002d98:	414b      	adcs	r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	00cb      	lsls	r3, r1, #3
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db2:	4651      	mov	r1, sl
 8002db4:	00ca      	lsls	r2, r1, #3
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dfa:	f7fd fa61 	bl	80002c0 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e06:	fba3 2301 	umull	r2, r3, r3, r1
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2264      	movs	r2, #100	@ 0x64
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	1acb      	subs	r3, r1, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	@ 0x32
 8002e18:	4a33      	ldr	r2, [pc, #204]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e44:	4641      	mov	r1, r8
 8002e46:	1851      	adds	r1, r2, r1
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	414b      	adcs	r3, r1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4651      	mov	r1, sl
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4642      	mov	r2, r8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e76:	464b      	mov	r3, r9
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e98:	4649      	mov	r1, r9
 8002e9a:	008b      	lsls	r3, r1, #2
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	008a      	lsls	r2, r1, #2
 8002ea6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002eaa:	f7fd fa09 	bl	80002c0 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	@ 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	3332      	adds	r3, #50	@ 0x32
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <UART_SetConfig+0x4e4>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4422      	add	r2, r4
 8002eda:	609a      	str	r2, [r3, #8]
}
 8002edc:	bf00      	nop
 8002ede:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee8:	51eb851f 	.word	0x51eb851f

08002eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f103 0208 	add.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f103 0208 	add.w	r2, r3, #8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 0208 	add.w	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d103      	bne.n	8002fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e00c      	b.n	8002fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e002      	b.n	8002fbc <vListInsert+0x2e>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d2f6      	bcs.n	8002fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6892      	ldr	r2, [r2, #8]
 8003016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6852      	ldr	r2, [r2, #4]
 8003020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d103      	bne.n	8003034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003080:	f001 fd52 	bl	8004b28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	3b01      	subs	r3, #1
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	22ff      	movs	r2, #255	@ 0xff
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	22ff      	movs	r2, #255	@ 0xff
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d114      	bne.n	8003100 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01a      	beq.n	8003114 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3310      	adds	r3, #16
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f804 	bl	80040f0 <xTaskRemoveFromEventList>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <xQueueGenericReset+0xd0>)
 80030f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	e009      	b.n	8003114 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3310      	adds	r3, #16
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fef1 	bl	8002eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3324      	adds	r3, #36	@ 0x24
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff feec 	bl	8002eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003114:	f001 fd3a 	bl	8004b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <xQueueGenericCreate+0x2c>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	613b      	str	r3, [r7, #16]
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3348      	adds	r3, #72	@ 0x48
 8003162:	4618      	mov	r0, r3
 8003164:	f001 fdc0 	bl	8004ce8 <pvPortMalloc>
 8003168:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3348      	adds	r3, #72	@ 0x48
 8003178:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003182:	79fa      	ldrb	r2, [r7, #7]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f805 	bl	800319e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003194:	69bb      	ldr	r3, [r7, #24]
	}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e002      	b.n	80031c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031cc:	2101      	movs	r1, #1
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f7ff ff40 	bl	8003054 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	613b      	str	r3, [r7, #16]
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d90b      	bls.n	8003224 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	60fb      	str	r3, [r7, #12]
}
 800321e:	bf00      	nop
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003224:	2202      	movs	r2, #2
 8003226:	2100      	movs	r1, #0
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff7d 	bl	8003128 <xQueueGenericCreate>
 800322e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800323c:	697b      	ldr	r3, [r7, #20]
	}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003256:	2300      	movs	r3, #0
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <xQueueGenericSend+0x34>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <xQueueGenericSend+0x42>
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <xQueueGenericSend+0x46>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <xQueueGenericSend+0x48>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xQueueGenericSend+0x64>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d103      	bne.n	80032ba <xQueueGenericSend+0x72>
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <xQueueGenericSend+0x76>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <xQueueGenericSend+0x78>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <xQueueGenericSend+0x94>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032dc:	f001 f8ce 	bl	800447c <xTaskGetSchedulerState>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <xQueueGenericSend+0xa4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <xQueueGenericSend+0xa8>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <xQueueGenericSend+0xaa>
 80032f0:	2300      	movs	r3, #0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <xQueueGenericSend+0xc6>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	61fb      	str	r3, [r7, #28]
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800330e:	f001 fc0b 	bl	8004b28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <xQueueGenericSend+0xdc>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d129      	bne.n	8003378 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800332a:	f000 f9b7 	bl	800369c <prvCopyDataToQueue>
 800332e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	3324      	adds	r3, #36	@ 0x24
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fed7 	bl	80040f0 <xTaskRemoveFromEventList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003348:	4b3f      	ldr	r3, [pc, #252]	@ (8003448 <xQueueGenericSend+0x200>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	e00a      	b.n	8003370 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003360:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <xQueueGenericSend+0x200>)
 8003362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003370:	f001 fc0c 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8003374:	2301      	movs	r3, #1
 8003376:	e063      	b.n	8003440 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800337e:	f001 fc05 	bl	8004b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
 8003384:	e05c      	b.n	8003440 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4618      	mov	r0, r3
 8003392:	f000 ff11 	bl	80041b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800339a:	f001 fbf7 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800339e:	f000 fcb7 	bl	8003d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a2:	f001 fbc1 	bl	8004b28 <vPortEnterCritical>
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d103      	bne.n	80033bc <xQueueGenericSend+0x174>
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSend+0x18a>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d2:	f001 fbdb 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d6:	1d3a      	adds	r2, r7, #4
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ff00 	bl	80041e4 <xTaskCheckForTimeOut>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d124      	bne.n	8003434 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ec:	f000 fa28 	bl	8003840 <prvIsQueueFull>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	3310      	adds	r3, #16
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fe50 	bl	80040a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003406:	f000 f9b3 	bl	8003770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800340a:	f000 fc8f 	bl	8003d2c <xTaskResumeAll>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f af7c 	bne.w	800330e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003416:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <xQueueGenericSend+0x200>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e772      	b.n	800330e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800342a:	f000 f9a1 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800342e:	f000 fc7d 	bl	8003d2c <xTaskResumeAll>
 8003432:	e76c      	b.n	800330e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003436:	f000 f99b 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800343a:	f000 fc77 	bl	8003d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800343e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003440:	4618      	mov	r0, r3
 8003442:	3738      	adds	r7, #56	@ 0x38
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08e      	sub	sp, #56	@ 0x38
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	623b      	str	r3, [r7, #32]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	61fb      	str	r3, [r7, #28]
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a0:	f000 ffec 	bl	800447c <xTaskGetSchedulerState>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <xQueueSemaphoreTake+0x64>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueSemaphoreTake+0x68>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueSemaphoreTake+0x6a>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	61bb      	str	r3, [r7, #24]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d2:	f001 fb29 	bl	8004b28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d024      	beq.n	800352c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d104      	bne.n	80034fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034f2:	f001 f96f 	bl	80047d4 <pvTaskIncrementMutexHeldCount>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003506:	3310      	adds	r3, #16
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fdf1 	bl	80040f0 <xTaskRemoveFromEventList>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003514:	4b54      	ldr	r3, [pc, #336]	@ (8003668 <xQueueSemaphoreTake+0x21c>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003524:	f001 fb32 	bl	8004b8c <vPortExitCritical>
				return pdPASS;
 8003528:	2301      	movs	r3, #1
 800352a:	e098      	b.n	800365e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d112      	bne.n	8003558 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	617b      	str	r3, [r7, #20]
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003550:	f001 fb1c 	bl	8004b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003554:	2300      	movs	r3, #0
 8003556:	e082      	b.n	800365e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fe28 	bl	80041b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356c:	f001 fb0e 	bl	8004b8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003570:	f000 fbce 	bl	8003d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003574:	f001 fad8 	bl	8004b28 <vPortEnterCritical>
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800357e:	b25b      	sxtb	r3, r3
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d103      	bne.n	800358e <xQueueSemaphoreTake+0x142>
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003594:	b25b      	sxtb	r3, r3
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d103      	bne.n	80035a4 <xQueueSemaphoreTake+0x158>
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a4:	f001 faf2 	bl	8004b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a8:	463a      	mov	r2, r7
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fe17 	bl	80041e4 <xTaskCheckForTimeOut>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d132      	bne.n	8003622 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035be:	f000 f929 	bl	8003814 <prvIsQueueEmpty>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d026      	beq.n	8003616 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80035d0:	f001 faaa 	bl	8004b28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 ff6d 	bl	80044b8 <xTaskPriorityInherit>
 80035de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80035e0:	f001 fad4 	bl	8004b8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	3324      	adds	r3, #36	@ 0x24
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fd59 	bl	80040a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80035f4:	f000 f8bc 	bl	8003770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035f8:	f000 fb98 	bl	8003d2c <xTaskResumeAll>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f af67 	bne.w	80034d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <xQueueSemaphoreTake+0x21c>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	e75d      	b.n	80034d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003616:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003618:	f000 f8aa 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800361c:	f000 fb86 	bl	8003d2c <xTaskResumeAll>
 8003620:	e757      	b.n	80034d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003624:	f000 f8a4 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003628:	f000 fb80 	bl	8003d2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800362e:	f000 f8f1 	bl	8003814 <prvIsQueueEmpty>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	f43f af4c 	beq.w	80034d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003640:	f001 fa72 	bl	8004b28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003646:	f000 f811 	bl	800366c <prvGetDisinheritPriorityAfterTimeout>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f82e 	bl	80046b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003658:	f001 fa98 	bl	8004b8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800365c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800365e:	4618      	mov	r0, r3
 8003660:	3738      	adds	r7, #56	@ 0x38
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e001      	b.n	800368e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800368e:	68fb      	ldr	r3, [r7, #12]
	}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d14d      	bne.n	800375e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 ff6c 	bl	80045a4 <xTaskPriorityDisinherit>
 80036cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	e043      	b.n	800375e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d119      	bne.n	8003710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6858      	ldr	r0, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	461a      	mov	r2, r3
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	f001 fdfa 	bl	80052e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	d32b      	bcc.n	800375e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	e026      	b.n	800375e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68d8      	ldr	r0, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	f001 fde0 	bl	80052e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	425b      	negs	r3, r3
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d207      	bcs.n	800374c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	425b      	negs	r3, r3
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d105      	bne.n	800375e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3b01      	subs	r3, #1
 800375c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003778:	f001 f9d6 	bl	8004b28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003784:	e011      	b.n	80037aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	@ 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fcac 	bl	80040f0 <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379e:	f000 fd85 	bl	80042ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dce9      	bgt.n	8003786 <prvUnlockQueue+0x16>
 80037b2:	e000      	b.n	80037b6 <prvUnlockQueue+0x46>
					break;
 80037b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	22ff      	movs	r2, #255	@ 0xff
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037be:	f001 f9e5 	bl	8004b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c2:	f001 f9b1 	bl	8004b28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ce:	e011      	b.n	80037f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fc87 	bl	80040f0 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e8:	f000 fd60 	bl	80042ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dce9      	bgt.n	80037d0 <prvUnlockQueue+0x60>
 80037fc:	e000      	b.n	8003800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003808:	f001 f9c0 	bl	8004b8c <vPortExitCritical>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800381c:	f001 f984 	bl	8004b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 f9ab 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f001 f96e 	bl	8004b28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f001 f993 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	@ 0x38
 8003874:	af04      	add	r7, sp, #16
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	623b      	str	r3, [r7, #32]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	61fb      	str	r3, [r7, #28]
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ba:	23a0      	movs	r3, #160	@ 0xa0
 80038bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80038c2:	d00b      	beq.n	80038dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	61bb      	str	r3, [r7, #24]
}
 80038d6:	bf00      	nop
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01e      	beq.n	8003922 <xTaskCreateStatic+0xb2>
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01b      	beq.n	8003922 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038fc:	2300      	movs	r3, #0
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f851 	bl	80039bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800391a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800391c:	f000 f8ee 	bl	8003afc <prvAddNewTaskToReadyList>
 8003920:	e001      	b.n	8003926 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003926:	697b      	ldr	r3, [r7, #20]
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	@ 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af04      	add	r7, sp, #16
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f9cf 	bl	8004ce8 <pvPortMalloc>
 800394a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003952:	20a0      	movs	r0, #160	@ 0xa0
 8003954:	f001 f9c8 	bl	8004ce8 <pvPortMalloc>
 8003958:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
 8003966:	e005      	b.n	8003974 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f001 fa8b 	bl	8004e84 <vPortFree>
 800396e:	e001      	b.n	8003974 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	2300      	movs	r3, #0
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f80f 	bl	80039bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800399e:	69f8      	ldr	r0, [r7, #28]
 80039a0:	f000 f8ac 	bl	8003afc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e002      	b.n	80039b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039b0:	69bb      	ldr	r3, [r7, #24]
	}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d4:	3b01      	subs	r3, #1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	617b      	str	r3, [r7, #20]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e012      	b.n	8003a38 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	7819      	ldrb	r1, [r3, #0]
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3334      	adds	r3, #52	@ 0x34
 8003a22:	460a      	mov	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d9e9      	bls.n	8003a12 <prvInitialiseNewTask+0x56>
 8003a3e:	e000      	b.n	8003a42 <prvInitialiseNewTask+0x86>
			{
				break;
 8003a40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a4a:	e003      	b.n	8003a54 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d901      	bls.n	8003a5e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fa59 	bl	8002f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fa54 	bl	8002f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	f1c3 0207 	rsb	r2, r3, #7
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	334c      	adds	r3, #76	@ 0x4c
 8003aae:	224c      	movs	r2, #76	@ 0x4c
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 fb82 	bl	80051bc <memset>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <prvInitialiseNewTask+0x134>)
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <prvInitialiseNewTask+0x138>)
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <prvInitialiseNewTask+0x13c>)
 8003ac8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	69b8      	ldr	r0, [r7, #24]
 8003ad0:	f000 fefa 	bl	80048c8 <pxPortInitialiseStack>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20004190 	.word	0x20004190
 8003af4:	200041f8 	.word	0x200041f8
 8003af8:	20004260 	.word	0x20004260

08003afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b04:	f001 f810 	bl	8004b28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b12:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b1a:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b20:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d110      	bne.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b28:	f000 fbe4 	bl	80042f4 <prvInitialiseTaskLists>
 8003b2c:	e00d      	b.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b2e:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <prvAddNewTaskToReadyList+0xc0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b36:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d802      	bhi.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <prvAddNewTaskToReadyList+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <prvAddNewTaskToReadyList+0xc4>)
 8003b52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	4b19      	ldr	r3, [pc, #100]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc8>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <prvAddNewTaskToReadyList+0xcc>)
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7ff f9e2 	bl	8002f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 f803 	bl	8004b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <prvAddNewTaskToReadyList+0xc0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00e      	beq.n	8003bac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d207      	bcs.n	8003bac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <prvAddNewTaskToReadyList+0xd0>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	2000053c 	.word	0x2000053c
 8003bb8:	2000043c 	.word	0x2000043c
 8003bbc:	20000548 	.word	0x20000548
 8003bc0:	20000558 	.word	0x20000558
 8003bc4:	20000544 	.word	0x20000544
 8003bc8:	20000440 	.word	0x20000440
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003be2:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <vTaskDelay+0x64>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <vTaskDelay+0x32>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60bb      	str	r3, [r7, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c02:	f000 f885 	bl	8003d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c06:	2100      	movs	r1, #0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fdf7 	bl	80047fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c0e:	f000 f88d 	bl	8003d2c <xTaskResumeAll>
 8003c12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c1a:	4b07      	ldr	r3, [pc, #28]	@ (8003c38 <vTaskDelay+0x68>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000564 	.word	0x20000564
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c4a:	463a      	mov	r2, r7
 8003c4c:	1d39      	adds	r1, r7, #4
 8003c4e:	f107 0308 	add.w	r3, r7, #8
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fcac 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	9202      	str	r2, [sp, #8]
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	460a      	mov	r2, r1
 8003c6a:	4921      	ldr	r1, [pc, #132]	@ (8003cf0 <vTaskStartScheduler+0xb4>)
 8003c6c:	4821      	ldr	r0, [pc, #132]	@ (8003cf4 <vTaskStartScheduler+0xb8>)
 8003c6e:	f7ff fdff 	bl	8003870 <xTaskCreateStatic>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <vTaskStartScheduler+0xbc>)
 8003c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <vTaskStartScheduler+0xbc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e001      	b.n	8003c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d11b      	bne.n	8003cc8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	613b      	str	r3, [r7, #16]
}
 8003ca2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <vTaskStartScheduler+0xc0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <vTaskStartScheduler+0xc4>)
 8003cac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <vTaskStartScheduler+0xc8>)
 8003cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb6:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <vTaskStartScheduler+0xcc>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <vTaskStartScheduler+0xd0>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cc2:	f000 fe8d 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc6:	e00f      	b.n	8003ce8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d10b      	bne.n	8003ce8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <vTaskStartScheduler+0xa8>
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	08005d04 	.word	0x08005d04
 8003cf4:	080042c5 	.word	0x080042c5
 8003cf8:	20000560 	.word	0x20000560
 8003cfc:	2000043c 	.word	0x2000043c
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	2000055c 	.word	0x2000055c
 8003d08:	20000548 	.word	0x20000548
 8003d0c:	20000540 	.word	0x20000540

08003d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <vTaskSuspendAll+0x18>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	4a03      	ldr	r2, [pc, #12]	@ (8003d28 <vTaskSuspendAll+0x18>)
 8003d1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20000564 	.word	0x20000564

08003d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d3a:	4b42      	ldr	r3, [pc, #264]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <xTaskResumeAll+0x2e>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	603b      	str	r3, [r7, #0]
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	e7fd      	b.n	8003d56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d5a:	f000 fee5 	bl	8004b28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a37      	ldr	r2, [pc, #220]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d68:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d161      	bne.n	8003e34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d70:	4b35      	ldr	r3, [pc, #212]	@ (8003e48 <xTaskResumeAll+0x11c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05d      	beq.n	8003e34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d78:	e02e      	b.n	8003dd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b34      	ldr	r3, [pc, #208]	@ (8003e4c <xTaskResumeAll+0x120>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f93a 	bl	8003000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff f935 	bl	8003000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e50 <xTaskResumeAll+0x124>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <xTaskResumeAll+0x124>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a27      	ldr	r2, [pc, #156]	@ (8003e54 <xTaskResumeAll+0x128>)
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7ff f8c1 	bl	8002f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc8:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <xTaskResumeAll+0x12c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dd2:	4b22      	ldr	r3, [pc, #136]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e4c <xTaskResumeAll+0x120>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1cc      	bne.n	8003d7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003de6:	f000 fb29 	bl	800443c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <xTaskResumeAll+0x134>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003df6:	f000 f837 	bl	8003e68 <xTaskIncrementTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f1      	bne.n	8003df6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e12:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <xTaskResumeAll+0x134>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e18:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <xTaskResumeAll+0x138>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e34:	f000 feaa 	bl	8004b8c <vPortExitCritical>

	return xAlreadyYielded;
 8003e38:	68bb      	ldr	r3, [r7, #8]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000564 	.word	0x20000564
 8003e48:	2000053c 	.word	0x2000053c
 8003e4c:	200004fc 	.word	0x200004fc
 8003e50:	20000544 	.word	0x20000544
 8003e54:	20000440 	.word	0x20000440
 8003e58:	2000043c 	.word	0x2000043c
 8003e5c:	20000550 	.word	0x20000550
 8003e60:	2000054c 	.word	0x2000054c
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e72:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb0 <xTaskIncrementTick+0x148>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 808f 	bne.w	8003f9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb4 <xTaskIncrementTick+0x14c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e84:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb4 <xTaskIncrementTick+0x14c>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d121      	bne.n	8003ed4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e90:	4b49      	ldr	r3, [pc, #292]	@ (8003fb8 <xTaskIncrementTick+0x150>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	603b      	str	r3, [r7, #0]
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	e7fd      	b.n	8003eae <xTaskIncrementTick+0x46>
 8003eb2:	4b41      	ldr	r3, [pc, #260]	@ (8003fb8 <xTaskIncrementTick+0x150>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	4b40      	ldr	r3, [pc, #256]	@ (8003fbc <xTaskIncrementTick+0x154>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <xTaskIncrementTick+0x150>)
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fbc <xTaskIncrementTick+0x154>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc0 <xTaskIncrementTick+0x158>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8003fc0 <xTaskIncrementTick+0x158>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	f000 fab4 	bl	800443c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc4 <xTaskIncrementTick+0x15c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d348      	bcc.n	8003f70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ede:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <xTaskIncrementTick+0x150>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee8:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <xTaskIncrementTick+0x15c>)
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	601a      	str	r2, [r3, #0]
					break;
 8003ef0:	e03e      	b.n	8003f70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef2:	4b31      	ldr	r3, [pc, #196]	@ (8003fb8 <xTaskIncrementTick+0x150>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d203      	bcs.n	8003f12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <xTaskIncrementTick+0x15c>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f10:	e02e      	b.n	8003f70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff f872 	bl	8003000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff f869 	bl	8003000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <xTaskIncrementTick+0x160>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <xTaskIncrementTick+0x160>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fcc <xTaskIncrementTick+0x164>)
 8003f4e:	441a      	add	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fe fff5 	bl	8002f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <xTaskIncrementTick+0x168>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d3b9      	bcc.n	8003ede <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6e:	e7b6      	b.n	8003ede <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f70:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <xTaskIncrementTick+0x168>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4915      	ldr	r1, [pc, #84]	@ (8003fcc <xTaskIncrementTick+0x164>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d901      	bls.n	8003f8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f8c:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <xTaskIncrementTick+0x16c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e004      	b.n	8003fa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <xTaskIncrementTick+0x170>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <xTaskIncrementTick+0x170>)
 8003fa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fa4:	697b      	ldr	r3, [r7, #20]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000564 	.word	0x20000564
 8003fb4:	20000540 	.word	0x20000540
 8003fb8:	200004f4 	.word	0x200004f4
 8003fbc:	200004f8 	.word	0x200004f8
 8003fc0:	20000554 	.word	0x20000554
 8003fc4:	2000055c 	.word	0x2000055c
 8003fc8:	20000544 	.word	0x20000544
 8003fcc:	20000440 	.word	0x20000440
 8003fd0:	2000043c 	.word	0x2000043c
 8003fd4:	20000550 	.word	0x20000550
 8003fd8:	2000054c 	.word	0x2000054c

08003fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <vTaskSwitchContext+0xb0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fea:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <vTaskSwitchContext+0xb4>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ff0:	e045      	b.n	800407e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003ff2:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <vTaskSwitchContext+0xb4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff8:	4b26      	ldr	r3, [pc, #152]	@ (8004094 <vTaskSwitchContext+0xb8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f1c3 031f 	rsb	r3, r3, #31
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	4922      	ldr	r1, [pc, #136]	@ (8004098 <vTaskSwitchContext+0xbc>)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vTaskSwitchContext+0x5a>
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <vTaskSwitchContext+0xbc>)
 8004046:	4413      	add	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	3308      	adds	r3, #8
 800405c:	429a      	cmp	r2, r3
 800405e:	d104      	bne.n	800406a <vTaskSwitchContext+0x8e>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a0a      	ldr	r2, [pc, #40]	@ (800409c <vTaskSwitchContext+0xc0>)
 8004072:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <vTaskSwitchContext+0xc0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	334c      	adds	r3, #76	@ 0x4c
 800407a:	4a09      	ldr	r2, [pc, #36]	@ (80040a0 <vTaskSwitchContext+0xc4>)
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000564 	.word	0x20000564
 8004090:	20000550 	.word	0x20000550
 8004094:	20000544 	.word	0x20000544
 8004098:	20000440 	.word	0x20000440
 800409c:	2000043c 	.word	0x2000043c
 80040a0:	2000001c 	.word	0x2000001c

080040a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <vTaskPlaceOnEventList+0x48>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3318      	adds	r3, #24
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe ff5a 	bl	8002f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040da:	2101      	movs	r1, #1
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f000 fb8d 	bl	80047fc <prvAddCurrentTaskToDelayedList>
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000043c 	.word	0x2000043c

080040f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3318      	adds	r3, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe ff6c 	bl	8003000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <xTaskRemoveFromEventList+0xb0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11c      	bne.n	800416a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3304      	adds	r3, #4
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe ff63 	bl	8003000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	2201      	movs	r2, #1
 8004140:	409a      	lsls	r2, r3
 8004142:	4b18      	ldr	r3, [pc, #96]	@ (80041a4 <xTaskRemoveFromEventList+0xb4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <xTaskRemoveFromEventList+0xb4>)
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <xTaskRemoveFromEventList+0xb8>)
 800415a:	441a      	add	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fe feef 	bl	8002f46 <vListInsertEnd>
 8004168:	e005      	b.n	8004176 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	3318      	adds	r3, #24
 800416e:	4619      	mov	r1, r3
 8004170:	480e      	ldr	r0, [pc, #56]	@ (80041ac <xTaskRemoveFromEventList+0xbc>)
 8004172:	f7fe fee8 	bl	8002f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	4b0d      	ldr	r3, [pc, #52]	@ (80041b0 <xTaskRemoveFromEventList+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d905      	bls.n	8004190 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004184:	2301      	movs	r3, #1
 8004186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004188:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <xTaskRemoveFromEventList+0xc4>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e001      	b.n	8004194 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000564 	.word	0x20000564
 80041a4:	20000544 	.word	0x20000544
 80041a8:	20000440 	.word	0x20000440
 80041ac:	200004fc 	.word	0x200004fc
 80041b0:	2000043c 	.word	0x2000043c
 80041b4:	20000550 	.word	0x20000550

080041b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <vTaskInternalSetTimeOutState+0x24>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <vTaskInternalSetTimeOutState+0x28>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	605a      	str	r2, [r3, #4]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	20000554 	.word	0x20000554
 80041e0:	20000540 	.word	0x20000540

080041e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60fb      	str	r3, [r7, #12]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800422a:	f000 fc7d 	bl	8004b28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800422e:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <xTaskCheckForTimeOut+0xc0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d102      	bne.n	800424e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e023      	b.n	8004296 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <xTaskCheckForTimeOut+0xc4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d007      	beq.n	800426a <xTaskCheckForTimeOut+0x86>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e015      	b.n	8004296 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	d20b      	bcs.n	800428c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff99 	bl	80041b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e004      	b.n	8004296 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004296:	f000 fc79 	bl	8004b8c <vPortExitCritical>

	return xReturn;
 800429a:	69fb      	ldr	r3, [r7, #28]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000540 	.word	0x20000540
 80042a8:	20000554 	.word	0x20000554

080042ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042b0:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <vTaskMissedYield+0x14>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000550 	.word	0x20000550

080042c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042cc:	f000 f852 	bl	8004374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042d0:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <prvIdleTask+0x28>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d9f9      	bls.n	80042cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <prvIdleTask+0x2c>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e8:	e7f0      	b.n	80042cc <prvIdleTask+0x8>
 80042ea:	bf00      	nop
 80042ec:	20000440 	.word	0x20000440
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	e00c      	b.n	800431a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <prvInitialiseTaskLists+0x60>)
 800430c:	4413      	add	r3, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fdec 	bl	8002eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b06      	cmp	r3, #6
 800431e:	d9ef      	bls.n	8004300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004320:	480d      	ldr	r0, [pc, #52]	@ (8004358 <prvInitialiseTaskLists+0x64>)
 8004322:	f7fe fde3 	bl	8002eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004326:	480d      	ldr	r0, [pc, #52]	@ (800435c <prvInitialiseTaskLists+0x68>)
 8004328:	f7fe fde0 	bl	8002eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800432c:	480c      	ldr	r0, [pc, #48]	@ (8004360 <prvInitialiseTaskLists+0x6c>)
 800432e:	f7fe fddd 	bl	8002eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004332:	480c      	ldr	r0, [pc, #48]	@ (8004364 <prvInitialiseTaskLists+0x70>)
 8004334:	f7fe fdda 	bl	8002eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004338:	480b      	ldr	r0, [pc, #44]	@ (8004368 <prvInitialiseTaskLists+0x74>)
 800433a:	f7fe fdd7 	bl	8002eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800433e:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <prvInitialiseTaskLists+0x78>)
 8004340:	4a05      	ldr	r2, [pc, #20]	@ (8004358 <prvInitialiseTaskLists+0x64>)
 8004342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <prvInitialiseTaskLists+0x7c>)
 8004346:	4a05      	ldr	r2, [pc, #20]	@ (800435c <prvInitialiseTaskLists+0x68>)
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000440 	.word	0x20000440
 8004358:	200004cc 	.word	0x200004cc
 800435c:	200004e0 	.word	0x200004e0
 8004360:	200004fc 	.word	0x200004fc
 8004364:	20000510 	.word	0x20000510
 8004368:	20000528 	.word	0x20000528
 800436c:	200004f4 	.word	0x200004f4
 8004370:	200004f8 	.word	0x200004f8

08004374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800437a:	e019      	b.n	80043b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800437c:	f000 fbd4 	bl	8004b28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <prvCheckTasksWaitingTermination+0x50>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fe37 	bl	8003000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a0b      	ldr	r2, [pc, #44]	@ (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 800439a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043a6:	f000 fbf1 	bl	8004b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f810 	bl	80043d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e1      	bne.n	800437c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000510 	.word	0x20000510
 80043c8:	2000053c 	.word	0x2000053c
 80043cc:	20000524 	.word	0x20000524

080043d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	334c      	adds	r3, #76	@ 0x4c
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fef5 	bl	80051cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd47 	bl	8004e84 <vPortFree>
				vPortFree( pxTCB );
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fd44 	bl	8004e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043fc:	e019      	b.n	8004432 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004404:	2b01      	cmp	r3, #1
 8004406:	d103      	bne.n	8004410 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fd3b 	bl	8004e84 <vPortFree>
	}
 800440e:	e010      	b.n	8004432 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004416:	2b02      	cmp	r3, #2
 8004418:	d00b      	beq.n	8004432 <prvDeleteTCB+0x62>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60fb      	str	r3, [r7, #12]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <prvDeleteTCB+0x5e>
	}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <prvResetNextTaskUnblockTime+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <prvResetNextTaskUnblockTime+0x3c>)
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004454:	e008      	b.n	8004468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004456:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <prvResetNextTaskUnblockTime+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <prvResetNextTaskUnblockTime+0x3c>)
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	200004f4 	.word	0x200004f4
 8004478:	2000055c 	.word	0x2000055c

0800447c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <xTaskGetSchedulerState+0x34>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800448a:	2301      	movs	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e008      	b.n	80044a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004490:	4b08      	ldr	r3, [pc, #32]	@ (80044b4 <xTaskGetSchedulerState+0x38>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004498:	2302      	movs	r3, #2
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	e001      	b.n	80044a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044a2:	687b      	ldr	r3, [r7, #4]
	}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	20000548 	.word	0x20000548
 80044b4:	20000564 	.word	0x20000564

080044b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d05e      	beq.n	800458c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d2:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <xTaskPriorityInherit+0xe0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d24e      	bcs.n	800457a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db06      	blt.n	80044f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004598 <xTaskPriorityInherit+0xe0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	f1c3 0207 	rsb	r2, r3, #7
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a26      	ldr	r2, [pc, #152]	@ (800459c <xTaskPriorityInherit+0xe4>)
 8004504:	4413      	add	r3, r2
 8004506:	4299      	cmp	r1, r3
 8004508:	d12f      	bne.n	800456a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe fd76 	bl	8003000 <uxListRemove>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	2201      	movs	r2, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43da      	mvns	r2, r3
 8004526:	4b1e      	ldr	r3, [pc, #120]	@ (80045a0 <xTaskPriorityInherit+0xe8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4013      	ands	r3, r2
 800452c:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <xTaskPriorityInherit+0xe8>)
 800452e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004530:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <xTaskPriorityInherit+0xe0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	2201      	movs	r2, #1
 8004540:	409a      	lsls	r2, r3
 8004542:	4b17      	ldr	r3, [pc, #92]	@ (80045a0 <xTaskPriorityInherit+0xe8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <xTaskPriorityInherit+0xe8>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4a10      	ldr	r2, [pc, #64]	@ (800459c <xTaskPriorityInherit+0xe4>)
 800455a:	441a      	add	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f7fe fcef 	bl	8002f46 <vListInsertEnd>
 8004568:	e004      	b.n	8004574 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <xTaskPriorityInherit+0xe0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e008      	b.n	800458c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457e:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <xTaskPriorityInherit+0xe0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	429a      	cmp	r2, r3
 8004586:	d201      	bcs.n	800458c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800458c:	68fb      	ldr	r3, [r7, #12]
	}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000043c 	.word	0x2000043c
 800459c:	20000440 	.word	0x20000440
 80045a0:	20000544 	.word	0x20000544

080045a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d070      	beq.n	800469c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ba:	4b3b      	ldr	r3, [pc, #236]	@ (80046a8 <xTaskPriorityDisinherit+0x104>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d00b      	beq.n	80045dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60fb      	str	r3, [r7, #12]
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60bb      	str	r3, [r7, #8]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	429a      	cmp	r2, r3
 8004610:	d044      	beq.n	800469c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d140      	bne.n	800469c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fcee 	bl	8003000 <uxListRemove>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	491f      	ldr	r1, [pc, #124]	@ (80046ac <xTaskPriorityDisinherit+0x108>)
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xTaskPriorityDisinherit+0xb2>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	2201      	movs	r2, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	4b18      	ldr	r3, [pc, #96]	@ (80046b0 <xTaskPriorityDisinherit+0x10c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4013      	ands	r3, r2
 8004652:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <xTaskPriorityDisinherit+0x10c>)
 8004654:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	f1c3 0207 	rsb	r2, r3, #7
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	2201      	movs	r2, #1
 8004670:	409a      	lsls	r2, r3
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <xTaskPriorityDisinherit+0x10c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <xTaskPriorityDisinherit+0x10c>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <xTaskPriorityDisinherit+0x108>)
 800468a:	441a      	add	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe fc57 	bl	8002f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800469c:	697b      	ldr	r3, [r7, #20]
	}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000043c 	.word	0x2000043c
 80046ac:	20000440 	.word	0x20000440
 80046b0:	20000544 	.word	0x20000544

080046b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d079      	beq.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	60fb      	str	r3, [r7, #12]
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d902      	bls.n	80046fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	e002      	b.n	8004702 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004700:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	429a      	cmp	r2, r3
 800470a:	d059      	beq.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	429a      	cmp	r2, r3
 8004714:	d154      	bne.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004716:	4b2c      	ldr	r3, [pc, #176]	@ (80047c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d10b      	bne.n	8004738 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60bb      	str	r3, [r7, #8]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	db04      	blt.n	8004756 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f1c3 0207 	rsb	r2, r3, #7
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6959      	ldr	r1, [r3, #20]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4a19      	ldr	r2, [pc, #100]	@ (80047cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004766:	4413      	add	r3, r2
 8004768:	4299      	cmp	r1, r3
 800476a:	d129      	bne.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3304      	adds	r3, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fc45 	bl	8003000 <uxListRemove>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	4a10      	ldr	r2, [pc, #64]	@ (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8004790:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	2201      	movs	r2, #1
 8004798:	409a      	lsls	r2, r3
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	4a0b      	ldr	r2, [pc, #44]	@ (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047b2:	441a      	add	r2, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f7fe fbc3 	bl	8002f46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047c0:	bf00      	nop
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	2000043c 	.word	0x2000043c
 80047cc:	20000440 	.word	0x20000440
 80047d0:	20000544 	.word	0x20000544

080047d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047d8:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047e6:	3201      	adds	r2, #1
 80047e8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80047ea:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047ec:	681b      	ldr	r3, [r3, #0]
	}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	2000043c 	.word	0x2000043c

080047fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004806:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480c:	4b28      	ldr	r3, [pc, #160]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fbf4 	bl	8003000 <uxListRemove>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	2201      	movs	r2, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	4b21      	ldr	r3, [pc, #132]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4013      	ands	r3, r2
 8004832:	4a20      	ldr	r2, [pc, #128]	@ (80048b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004834:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d10a      	bne.n	8004854 <prvAddCurrentTaskToDelayedList+0x58>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	481a      	ldr	r0, [pc, #104]	@ (80048b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800484e:	f7fe fb7a 	bl	8002f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004852:	e026      	b.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d209      	bcs.n	8004880 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486c:	4b13      	ldr	r3, [pc, #76]	@ (80048bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f7fe fb88 	bl	8002f8e <vListInsert>
}
 800487e:	e010      	b.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b0a      	ldr	r3, [pc, #40]	@ (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fe fb7e 	bl	8002f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004892:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d202      	bcs.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800489c:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6013      	str	r3, [r2, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000540 	.word	0x20000540
 80048b0:	2000043c 	.word	0x2000043c
 80048b4:	20000544 	.word	0x20000544
 80048b8:	20000528 	.word	0x20000528
 80048bc:	200004f8 	.word	0x200004f8
 80048c0:	200004f4 	.word	0x200004f4
 80048c4:	2000055c 	.word	0x2000055c

080048c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b04      	subs	r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b04      	subs	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0201 	bic.w	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b04      	subs	r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f8:	4a0c      	ldr	r2, [pc, #48]	@ (800492c <pxPortInitialiseStack+0x64>)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3b14      	subs	r3, #20
 8004902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b04      	subs	r3, #4
 800490e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f06f 0202 	mvn.w	r2, #2
 8004916:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3b20      	subs	r3, #32
 800491c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	08004931 	.word	0x08004931

08004930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800493a:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <prvTaskExitError+0x58>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d00b      	beq.n	800495c <prvTaskExitError+0x2c>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <prvTaskExitError+0x28>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60bb      	str	r3, [r7, #8]
}
 800496e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004970:	bf00      	nop
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0fc      	beq.n	8004972 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000018 	.word	0x20000018
 800498c:	00000000 	.word	0x00000000

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	@ (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <xPortStartScheduler+0x124>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a47      	ldr	r2, [pc, #284]	@ (8004b08 <xPortStartScheduler+0x128>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10b      	bne.n	8004a08 <xPortStartScheduler+0x28>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a08:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <xPortStartScheduler+0x124>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b0c <xPortStartScheduler+0x12c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10b      	bne.n	8004a2a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60fb      	str	r3, [r7, #12]
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	e7fd      	b.n	8004a26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a2a:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <xPortStartScheduler+0x130>)
 8004a2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	22ff      	movs	r2, #255	@ 0xff
 8004a3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <xPortStartScheduler+0x134>)
 8004a50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a52:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a58:	e009      	b.n	8004a6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d0ef      	beq.n	8004a5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a7a:	4b27      	ldr	r3, [pc, #156]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1c3 0307 	rsb	r3, r3, #7
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d00b      	beq.n	8004a9e <xPortStartScheduler+0xbe>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60bb      	str	r3, [r7, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <xPortStartScheduler+0x138>)
 8004ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004abc:	4b17      	ldr	r3, [pc, #92]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004ac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a13      	ldr	r2, [pc, #76]	@ (8004b1c <xPortStartScheduler+0x13c>)
 8004ace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ad4:	f000 f8da 	bl	8004c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <xPortStartScheduler+0x140>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ade:	f000 f8f9 	bl	8004cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <xPortStartScheduler+0x144>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <xPortStartScheduler+0x144>)
 8004ae8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004aec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aee:	f7ff ff63 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004af2:	f7ff fa73 	bl	8003fdc <vTaskSwitchContext>
	prvTaskExitError();
 8004af6:	f7ff ff1b 	bl	8004930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	e000ed00 	.word	0xe000ed00
 8004b08:	410fc271 	.word	0x410fc271
 8004b0c:	410fc270 	.word	0x410fc270
 8004b10:	e000e400 	.word	0xe000e400
 8004b14:	20000568 	.word	0x20000568
 8004b18:	2000056c 	.word	0x2000056c
 8004b1c:	e000ed20 	.word	0xe000ed20
 8004b20:	20000018 	.word	0x20000018
 8004b24:	e000ef34 	.word	0xe000ef34

08004b28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	607b      	str	r3, [r7, #4]
}
 8004b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <vPortEnterCritical+0x5c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d110      	bne.n	8004b76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <vPortEnterCritical+0x60>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <vPortEnterCritical+0x4a>
	}
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000018 	.word	0x20000018
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b92:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <vPortExitCritical+0x50>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <vPortExitCritical+0x26>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	4a08      	ldr	r2, [pc, #32]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <vPortExitCritical+0x50>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <vPortExitCritical+0x44>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000018 	.word	0x20000018

08004be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004be0:	f3ef 8009 	mrs	r0, PSP
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <pxCurrentTCBConst>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f01e 0f10 	tst.w	lr, #16
 8004bf0:	bf08      	it	eq
 8004bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c04:	f380 8811 	msr	BASEPRI, r0
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f7ff f9e4 	bl	8003fdc <vTaskSwitchContext>
 8004c14:	f04f 0000 	mov.w	r0, #0
 8004c18:	f380 8811 	msr	BASEPRI, r0
 8004c1c:	bc09      	pop	{r0, r3}
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	6808      	ldr	r0, [r1, #0]
 8004c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c26:	f01e 0f10 	tst.w	lr, #16
 8004c2a:	bf08      	it	eq
 8004c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c30:	f380 8809 	msr	PSP, r0
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst>:
 8004c40:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c62:	f7ff f901 	bl	8003e68 <xTaskIncrementTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <SysTick_Handler+0x40>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	2300      	movs	r3, #0
 8004c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f383 8811 	msr	BASEPRI, r3
}
 8004c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <vPortSetupTimerInterrupt+0x38>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <vPortSetupTimerInterrupt+0x3c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <vPortSetupTimerInterrupt+0x40>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <vPortSetupTimerInterrupt+0x44>)
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <vPortSetupTimerInterrupt+0x34>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000e010 	.word	0xe000e010
 8004cc4:	e000e018 	.word	0xe000e018
 8004cc8:	2000000c 	.word	0x2000000c
 8004ccc:	10624dd3 	.word	0x10624dd3
 8004cd0:	e000e014 	.word	0xe000e014

08004cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ce4 <vPortEnableVFP+0x10>
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cde:	6001      	str	r1, [r0, #0]
 8004ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed88 	.word	0xe000ed88

08004ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cf4:	f7ff f80c 	bl	8003d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8004e6c <pvPortMalloc+0x184>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d00:	f000 f924 	bl	8004f4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d04:	4b5a      	ldr	r3, [pc, #360]	@ (8004e70 <pvPortMalloc+0x188>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 8095 	bne.w	8004e3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01e      	beq.n	8004d56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004d18:	2208      	movs	r2, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f023 0307 	bic.w	r3, r3, #7
 8004d30:	3308      	adds	r3, #8
 8004d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <pvPortMalloc+0x6e>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	617b      	str	r3, [r7, #20]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d06f      	beq.n	8004e3c <pvPortMalloc+0x154>
 8004d5c:	4b45      	ldr	r3, [pc, #276]	@ (8004e74 <pvPortMalloc+0x18c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d86a      	bhi.n	8004e3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d66:	4b44      	ldr	r3, [pc, #272]	@ (8004e78 <pvPortMalloc+0x190>)
 8004d68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d6a:	4b43      	ldr	r3, [pc, #268]	@ (8004e78 <pvPortMalloc+0x190>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d70:	e004      	b.n	8004d7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d903      	bls.n	8004d8e <pvPortMalloc+0xa6>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f1      	bne.n	8004d72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d8e:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <pvPortMalloc+0x184>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d051      	beq.n	8004e3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	4413      	add	r3, r2
 8004da0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	2308      	movs	r3, #8
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d920      	bls.n	8004dfc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <pvPortMalloc+0xfc>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	1ad2      	subs	r2, r2, r3
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004df6:	69b8      	ldr	r0, [r7, #24]
 8004df8:	f000 f90a 	bl	8005010 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <pvPortMalloc+0x18c>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <pvPortMalloc+0x18c>)
 8004e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <pvPortMalloc+0x18c>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <pvPortMalloc+0x194>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d203      	bcs.n	8004e1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e16:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <pvPortMalloc+0x18c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a18      	ldr	r2, [pc, #96]	@ (8004e7c <pvPortMalloc+0x194>)
 8004e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <pvPortMalloc+0x188>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e32:	4b13      	ldr	r3, [pc, #76]	@ (8004e80 <pvPortMalloc+0x198>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <pvPortMalloc+0x198>)
 8004e3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e3c:	f7fe ff76 	bl	8003d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <pvPortMalloc+0x17a>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <pvPortMalloc+0x176>
	return pvReturn;
 8004e62:	69fb      	ldr	r3, [r7, #28]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3728      	adds	r7, #40	@ 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20004178 	.word	0x20004178
 8004e70:	2000418c 	.word	0x2000418c
 8004e74:	2000417c 	.word	0x2000417c
 8004e78:	20004170 	.word	0x20004170
 8004e7c:	20004180 	.word	0x20004180
 8004e80:	20004184 	.word	0x20004184

08004e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04f      	beq.n	8004f36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e96:	2308      	movs	r3, #8
 8004e98:	425b      	negs	r3, r3
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <vPortFree+0xbc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10b      	bne.n	8004eca <vPortFree+0x46>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60fb      	str	r3, [r7, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <vPortFree+0x66>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60bb      	str	r3, [r7, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <vPortFree+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01e      	beq.n	8004f36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11a      	bne.n	8004f36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <vPortFree+0xbc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f10:	f7fe fefe 	bl	8003d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <vPortFree+0xc0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4a09      	ldr	r2, [pc, #36]	@ (8004f44 <vPortFree+0xc0>)
 8004f20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f000 f874 	bl	8005010 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f28:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <vPortFree+0xc4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	4a06      	ldr	r2, [pc, #24]	@ (8004f48 <vPortFree+0xc4>)
 8004f30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f32:	f7fe fefb 	bl	8003d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000418c 	.word	0x2000418c
 8004f44:	2000417c 	.word	0x2000417c
 8004f48:	20004188 	.word	0x20004188

08004f4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <prvHeapInit+0xac>)
 8004f5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff8 <prvHeapInit+0xac>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f84:	4a1d      	ldr	r2, [pc, #116]	@ (8004ffc <prvHeapInit+0xb0>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ffc <prvHeapInit+0xb0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f98:	2208      	movs	r2, #8
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0307 	bic.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <prvHeapInit+0xb4>)
 8004fac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fae:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <prvHeapInit+0xb4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fb6:	4b12      	ldr	r3, [pc, #72]	@ (8005000 <prvHeapInit+0xb4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005000 <prvHeapInit+0xb4>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <prvHeapInit+0xb8>)
 8004fda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <prvHeapInit+0xbc>)
 8004fe2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fe4:	4b09      	ldr	r3, [pc, #36]	@ (800500c <prvHeapInit+0xc0>)
 8004fe6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004fea:	601a      	str	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000570 	.word	0x20000570
 8004ffc:	20004170 	.word	0x20004170
 8005000:	20004178 	.word	0x20004178
 8005004:	20004180 	.word	0x20004180
 8005008:	2000417c 	.word	0x2000417c
 800500c:	2000418c 	.word	0x2000418c

08005010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005018:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <prvInsertBlockIntoFreeList+0xac>)
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e002      	b.n	8005024 <prvInsertBlockIntoFreeList+0x14>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d8f7      	bhi.n	800501e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4413      	add	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d108      	bne.n	8005052 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	441a      	add	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d118      	bne.n	8005098 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <prvInsertBlockIntoFreeList+0xb0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d00d      	beq.n	800508e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	e008      	b.n	80050a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <prvInsertBlockIntoFreeList+0xb0>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e003      	b.n	80050a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d002      	beq.n	80050ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20004170 	.word	0x20004170
 80050c0:	20004178 	.word	0x20004178

080050c4 <__itoa>:
 80050c4:	1e93      	subs	r3, r2, #2
 80050c6:	2b22      	cmp	r3, #34	@ 0x22
 80050c8:	b510      	push	{r4, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	d904      	bls.n	80050d8 <__itoa+0x14>
 80050ce:	2300      	movs	r3, #0
 80050d0:	700b      	strb	r3, [r1, #0]
 80050d2:	461c      	mov	r4, r3
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd10      	pop	{r4, pc}
 80050d8:	2a0a      	cmp	r2, #10
 80050da:	d109      	bne.n	80050f0 <__itoa+0x2c>
 80050dc:	2800      	cmp	r0, #0
 80050de:	da07      	bge.n	80050f0 <__itoa+0x2c>
 80050e0:	232d      	movs	r3, #45	@ 0x2d
 80050e2:	700b      	strb	r3, [r1, #0]
 80050e4:	4240      	negs	r0, r0
 80050e6:	2101      	movs	r1, #1
 80050e8:	4421      	add	r1, r4
 80050ea:	f000 f805 	bl	80050f8 <__utoa>
 80050ee:	e7f1      	b.n	80050d4 <__itoa+0x10>
 80050f0:	2100      	movs	r1, #0
 80050f2:	e7f9      	b.n	80050e8 <__itoa+0x24>

080050f4 <itoa>:
 80050f4:	f7ff bfe6 	b.w	80050c4 <__itoa>

080050f8 <__utoa>:
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	4c1f      	ldr	r4, [pc, #124]	@ (8005178 <__utoa+0x80>)
 80050fc:	b08b      	sub	sp, #44	@ 0x2c
 80050fe:	4605      	mov	r5, r0
 8005100:	460b      	mov	r3, r1
 8005102:	466e      	mov	r6, sp
 8005104:	f104 0c20 	add.w	ip, r4, #32
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	6861      	ldr	r1, [r4, #4]
 800510c:	4637      	mov	r7, r6
 800510e:	c703      	stmia	r7!, {r0, r1}
 8005110:	3408      	adds	r4, #8
 8005112:	4564      	cmp	r4, ip
 8005114:	463e      	mov	r6, r7
 8005116:	d1f7      	bne.n	8005108 <__utoa+0x10>
 8005118:	7921      	ldrb	r1, [r4, #4]
 800511a:	7139      	strb	r1, [r7, #4]
 800511c:	1e91      	subs	r1, r2, #2
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	6038      	str	r0, [r7, #0]
 8005122:	2922      	cmp	r1, #34	@ 0x22
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	d904      	bls.n	8005134 <__utoa+0x3c>
 800512a:	7019      	strb	r1, [r3, #0]
 800512c:	460b      	mov	r3, r1
 800512e:	4618      	mov	r0, r3
 8005130:	b00b      	add	sp, #44	@ 0x2c
 8005132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005134:	1e58      	subs	r0, r3, #1
 8005136:	4684      	mov	ip, r0
 8005138:	fbb5 f7f2 	udiv	r7, r5, r2
 800513c:	fb02 5617 	mls	r6, r2, r7, r5
 8005140:	3628      	adds	r6, #40	@ 0x28
 8005142:	446e      	add	r6, sp
 8005144:	460c      	mov	r4, r1
 8005146:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800514a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800514e:	462e      	mov	r6, r5
 8005150:	42b2      	cmp	r2, r6
 8005152:	f101 0101 	add.w	r1, r1, #1
 8005156:	463d      	mov	r5, r7
 8005158:	d9ee      	bls.n	8005138 <__utoa+0x40>
 800515a:	2200      	movs	r2, #0
 800515c:	545a      	strb	r2, [r3, r1]
 800515e:	1919      	adds	r1, r3, r4
 8005160:	1aa5      	subs	r5, r4, r2
 8005162:	42aa      	cmp	r2, r5
 8005164:	dae3      	bge.n	800512e <__utoa+0x36>
 8005166:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800516a:	780e      	ldrb	r6, [r1, #0]
 800516c:	7006      	strb	r6, [r0, #0]
 800516e:	3201      	adds	r2, #1
 8005170:	f801 5901 	strb.w	r5, [r1], #-1
 8005174:	e7f4      	b.n	8005160 <__utoa+0x68>
 8005176:	bf00      	nop
 8005178:	08005d24 	.word	0x08005d24

0800517c <siprintf>:
 800517c:	b40e      	push	{r1, r2, r3}
 800517e:	b500      	push	{lr}
 8005180:	b09c      	sub	sp, #112	@ 0x70
 8005182:	ab1d      	add	r3, sp, #116	@ 0x74
 8005184:	9002      	str	r0, [sp, #8]
 8005186:	9006      	str	r0, [sp, #24]
 8005188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800518c:	4809      	ldr	r0, [pc, #36]	@ (80051b4 <siprintf+0x38>)
 800518e:	9107      	str	r1, [sp, #28]
 8005190:	9104      	str	r1, [sp, #16]
 8005192:	4909      	ldr	r1, [pc, #36]	@ (80051b8 <siprintf+0x3c>)
 8005194:	f853 2b04 	ldr.w	r2, [r3], #4
 8005198:	9105      	str	r1, [sp, #20]
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	a902      	add	r1, sp, #8
 80051a0:	f000 fa00 	bl	80055a4 <_svfiprintf_r>
 80051a4:	9b02      	ldr	r3, [sp, #8]
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	b01c      	add	sp, #112	@ 0x70
 80051ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b0:	b003      	add	sp, #12
 80051b2:	4770      	bx	lr
 80051b4:	2000001c 	.word	0x2000001c
 80051b8:	ffff0208 	.word	0xffff0208

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <_reclaim_reent>:
 80051cc:	4b29      	ldr	r3, [pc, #164]	@ (8005274 <_reclaim_reent+0xa8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4283      	cmp	r3, r0
 80051d2:	b570      	push	{r4, r5, r6, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	d04b      	beq.n	8005270 <_reclaim_reent+0xa4>
 80051d8:	69c3      	ldr	r3, [r0, #28]
 80051da:	b1ab      	cbz	r3, 8005208 <_reclaim_reent+0x3c>
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	b16b      	cbz	r3, 80051fc <_reclaim_reent+0x30>
 80051e0:	2500      	movs	r5, #0
 80051e2:	69e3      	ldr	r3, [r4, #28]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	5959      	ldr	r1, [r3, r5]
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d13b      	bne.n	8005264 <_reclaim_reent+0x98>
 80051ec:	3504      	adds	r5, #4
 80051ee:	2d80      	cmp	r5, #128	@ 0x80
 80051f0:	d1f7      	bne.n	80051e2 <_reclaim_reent+0x16>
 80051f2:	69e3      	ldr	r3, [r4, #28]
 80051f4:	4620      	mov	r0, r4
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	f000 f880 	bl	80052fc <_free_r>
 80051fc:	69e3      	ldr	r3, [r4, #28]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	b111      	cbz	r1, 8005208 <_reclaim_reent+0x3c>
 8005202:	4620      	mov	r0, r4
 8005204:	f000 f87a 	bl	80052fc <_free_r>
 8005208:	6961      	ldr	r1, [r4, #20]
 800520a:	b111      	cbz	r1, 8005212 <_reclaim_reent+0x46>
 800520c:	4620      	mov	r0, r4
 800520e:	f000 f875 	bl	80052fc <_free_r>
 8005212:	69e1      	ldr	r1, [r4, #28]
 8005214:	b111      	cbz	r1, 800521c <_reclaim_reent+0x50>
 8005216:	4620      	mov	r0, r4
 8005218:	f000 f870 	bl	80052fc <_free_r>
 800521c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800521e:	b111      	cbz	r1, 8005226 <_reclaim_reent+0x5a>
 8005220:	4620      	mov	r0, r4
 8005222:	f000 f86b 	bl	80052fc <_free_r>
 8005226:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005228:	b111      	cbz	r1, 8005230 <_reclaim_reent+0x64>
 800522a:	4620      	mov	r0, r4
 800522c:	f000 f866 	bl	80052fc <_free_r>
 8005230:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005232:	b111      	cbz	r1, 800523a <_reclaim_reent+0x6e>
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f861 	bl	80052fc <_free_r>
 800523a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800523c:	b111      	cbz	r1, 8005244 <_reclaim_reent+0x78>
 800523e:	4620      	mov	r0, r4
 8005240:	f000 f85c 	bl	80052fc <_free_r>
 8005244:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005246:	b111      	cbz	r1, 800524e <_reclaim_reent+0x82>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f857 	bl	80052fc <_free_r>
 800524e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005250:	b111      	cbz	r1, 8005258 <_reclaim_reent+0x8c>
 8005252:	4620      	mov	r0, r4
 8005254:	f000 f852 	bl	80052fc <_free_r>
 8005258:	6a23      	ldr	r3, [r4, #32]
 800525a:	b14b      	cbz	r3, 8005270 <_reclaim_reent+0xa4>
 800525c:	4620      	mov	r0, r4
 800525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005262:	4718      	bx	r3
 8005264:	680e      	ldr	r6, [r1, #0]
 8005266:	4620      	mov	r0, r4
 8005268:	f000 f848 	bl	80052fc <_free_r>
 800526c:	4631      	mov	r1, r6
 800526e:	e7bb      	b.n	80051e8 <_reclaim_reent+0x1c>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	bf00      	nop
 8005274:	2000001c 	.word	0x2000001c

08005278 <__errno>:
 8005278:	4b01      	ldr	r3, [pc, #4]	@ (8005280 <__errno+0x8>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000001c 	.word	0x2000001c

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4d0d      	ldr	r5, [pc, #52]	@ (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	@ (80052c0 <__libc_init_array+0x3c>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2600      	movs	r6, #0
 8005290:	42a6      	cmp	r6, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4d0b      	ldr	r5, [pc, #44]	@ (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	@ (80052c8 <__libc_init_array+0x44>)
 8005298:	f000 fc6e 	bl	8005b78 <_init>
 800529c:	1b64      	subs	r4, r4, r5
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2600      	movs	r6, #0
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ac:	4798      	blx	r3
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b6:	4798      	blx	r3
 80052b8:	3601      	adds	r6, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	08005d84 	.word	0x08005d84
 80052c0:	08005d84 	.word	0x08005d84
 80052c4:	08005d84 	.word	0x08005d84
 80052c8:	08005d88 	.word	0x08005d88

080052cc <__retarget_lock_acquire_recursive>:
 80052cc:	4770      	bx	lr

080052ce <__retarget_lock_release_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <strcpy>:
 80052d0:	4603      	mov	r3, r0
 80052d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052d6:	f803 2b01 	strb.w	r2, [r3], #1
 80052da:	2a00      	cmp	r2, #0
 80052dc:	d1f9      	bne.n	80052d2 <strcpy+0x2>
 80052de:	4770      	bx	lr

080052e0 <memcpy>:
 80052e0:	440a      	add	r2, r1
 80052e2:	4291      	cmp	r1, r2
 80052e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e8:	d100      	bne.n	80052ec <memcpy+0xc>
 80052ea:	4770      	bx	lr
 80052ec:	b510      	push	{r4, lr}
 80052ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f6:	4291      	cmp	r1, r2
 80052f8:	d1f9      	bne.n	80052ee <memcpy+0xe>
 80052fa:	bd10      	pop	{r4, pc}

080052fc <_free_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4605      	mov	r5, r0
 8005300:	2900      	cmp	r1, #0
 8005302:	d041      	beq.n	8005388 <_free_r+0x8c>
 8005304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005308:	1f0c      	subs	r4, r1, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfb8      	it	lt
 800530e:	18e4      	addlt	r4, r4, r3
 8005310:	f000 f8e0 	bl	80054d4 <__malloc_lock>
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <_free_r+0x90>)
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	b933      	cbnz	r3, 8005328 <_free_r+0x2c>
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	6014      	str	r4, [r2, #0]
 800531e:	4628      	mov	r0, r5
 8005320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005324:	f000 b8dc 	b.w	80054e0 <__malloc_unlock>
 8005328:	42a3      	cmp	r3, r4
 800532a:	d908      	bls.n	800533e <_free_r+0x42>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	1821      	adds	r1, r4, r0
 8005330:	428b      	cmp	r3, r1
 8005332:	bf01      	itttt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	1809      	addeq	r1, r1, r0
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	e7ed      	b.n	800531a <_free_r+0x1e>
 800533e:	461a      	mov	r2, r3
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b10b      	cbz	r3, 8005348 <_free_r+0x4c>
 8005344:	42a3      	cmp	r3, r4
 8005346:	d9fa      	bls.n	800533e <_free_r+0x42>
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	1850      	adds	r0, r2, r1
 800534c:	42a0      	cmp	r0, r4
 800534e:	d10b      	bne.n	8005368 <_free_r+0x6c>
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	4401      	add	r1, r0
 8005354:	1850      	adds	r0, r2, r1
 8005356:	4283      	cmp	r3, r0
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	d1e0      	bne.n	800531e <_free_r+0x22>
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	6053      	str	r3, [r2, #4]
 8005362:	4408      	add	r0, r1
 8005364:	6010      	str	r0, [r2, #0]
 8005366:	e7da      	b.n	800531e <_free_r+0x22>
 8005368:	d902      	bls.n	8005370 <_free_r+0x74>
 800536a:	230c      	movs	r3, #12
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	e7d6      	b.n	800531e <_free_r+0x22>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	1821      	adds	r1, r4, r0
 8005374:	428b      	cmp	r3, r1
 8005376:	bf04      	itt	eq
 8005378:	6819      	ldreq	r1, [r3, #0]
 800537a:	685b      	ldreq	r3, [r3, #4]
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	bf04      	itt	eq
 8005380:	1809      	addeq	r1, r1, r0
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	6054      	str	r4, [r2, #4]
 8005386:	e7ca      	b.n	800531e <_free_r+0x22>
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop
 800538c:	200042d4 	.word	0x200042d4

08005390 <sbrk_aligned>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4e0f      	ldr	r6, [pc, #60]	@ (80053d0 <sbrk_aligned+0x40>)
 8005394:	460c      	mov	r4, r1
 8005396:	6831      	ldr	r1, [r6, #0]
 8005398:	4605      	mov	r5, r0
 800539a:	b911      	cbnz	r1, 80053a2 <sbrk_aligned+0x12>
 800539c:	f000 fba6 	bl	8005aec <_sbrk_r>
 80053a0:	6030      	str	r0, [r6, #0]
 80053a2:	4621      	mov	r1, r4
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 fba1 	bl	8005aec <_sbrk_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d103      	bne.n	80053b6 <sbrk_aligned+0x26>
 80053ae:	f04f 34ff 	mov.w	r4, #4294967295
 80053b2:	4620      	mov	r0, r4
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d0f8      	beq.n	80053b2 <sbrk_aligned+0x22>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 fb92 	bl	8005aec <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1f2      	bne.n	80053b2 <sbrk_aligned+0x22>
 80053cc:	e7ef      	b.n	80053ae <sbrk_aligned+0x1e>
 80053ce:	bf00      	nop
 80053d0:	200042d0 	.word	0x200042d0

080053d4 <_malloc_r>:
 80053d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d8:	1ccd      	adds	r5, r1, #3
 80053da:	f025 0503 	bic.w	r5, r5, #3
 80053de:	3508      	adds	r5, #8
 80053e0:	2d0c      	cmp	r5, #12
 80053e2:	bf38      	it	cc
 80053e4:	250c      	movcc	r5, #12
 80053e6:	2d00      	cmp	r5, #0
 80053e8:	4606      	mov	r6, r0
 80053ea:	db01      	blt.n	80053f0 <_malloc_r+0x1c>
 80053ec:	42a9      	cmp	r1, r5
 80053ee:	d904      	bls.n	80053fa <_malloc_r+0x26>
 80053f0:	230c      	movs	r3, #12
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	2000      	movs	r0, #0
 80053f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054d0 <_malloc_r+0xfc>
 80053fe:	f000 f869 	bl	80054d4 <__malloc_lock>
 8005402:	f8d8 3000 	ldr.w	r3, [r8]
 8005406:	461c      	mov	r4, r3
 8005408:	bb44      	cbnz	r4, 800545c <_malloc_r+0x88>
 800540a:	4629      	mov	r1, r5
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff ffbf 	bl	8005390 <sbrk_aligned>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	4604      	mov	r4, r0
 8005416:	d158      	bne.n	80054ca <_malloc_r+0xf6>
 8005418:	f8d8 4000 	ldr.w	r4, [r8]
 800541c:	4627      	mov	r7, r4
 800541e:	2f00      	cmp	r7, #0
 8005420:	d143      	bne.n	80054aa <_malloc_r+0xd6>
 8005422:	2c00      	cmp	r4, #0
 8005424:	d04b      	beq.n	80054be <_malloc_r+0xea>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	4639      	mov	r1, r7
 800542a:	4630      	mov	r0, r6
 800542c:	eb04 0903 	add.w	r9, r4, r3
 8005430:	f000 fb5c 	bl	8005aec <_sbrk_r>
 8005434:	4581      	cmp	r9, r0
 8005436:	d142      	bne.n	80054be <_malloc_r+0xea>
 8005438:	6821      	ldr	r1, [r4, #0]
 800543a:	1a6d      	subs	r5, r5, r1
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff ffa6 	bl	8005390 <sbrk_aligned>
 8005444:	3001      	adds	r0, #1
 8005446:	d03a      	beq.n	80054be <_malloc_r+0xea>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	442b      	add	r3, r5
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	f8d8 3000 	ldr.w	r3, [r8]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	bb62      	cbnz	r2, 80054b0 <_malloc_r+0xdc>
 8005456:	f8c8 7000 	str.w	r7, [r8]
 800545a:	e00f      	b.n	800547c <_malloc_r+0xa8>
 800545c:	6822      	ldr	r2, [r4, #0]
 800545e:	1b52      	subs	r2, r2, r5
 8005460:	d420      	bmi.n	80054a4 <_malloc_r+0xd0>
 8005462:	2a0b      	cmp	r2, #11
 8005464:	d917      	bls.n	8005496 <_malloc_r+0xc2>
 8005466:	1961      	adds	r1, r4, r5
 8005468:	42a3      	cmp	r3, r4
 800546a:	6025      	str	r5, [r4, #0]
 800546c:	bf18      	it	ne
 800546e:	6059      	strne	r1, [r3, #4]
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	bf08      	it	eq
 8005474:	f8c8 1000 	streq.w	r1, [r8]
 8005478:	5162      	str	r2, [r4, r5]
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f82f 	bl	80054e0 <__malloc_unlock>
 8005482:	f104 000b 	add.w	r0, r4, #11
 8005486:	1d23      	adds	r3, r4, #4
 8005488:	f020 0007 	bic.w	r0, r0, #7
 800548c:	1ac2      	subs	r2, r0, r3
 800548e:	bf1c      	itt	ne
 8005490:	1a1b      	subne	r3, r3, r0
 8005492:	50a3      	strne	r3, [r4, r2]
 8005494:	e7af      	b.n	80053f6 <_malloc_r+0x22>
 8005496:	6862      	ldr	r2, [r4, #4]
 8005498:	42a3      	cmp	r3, r4
 800549a:	bf0c      	ite	eq
 800549c:	f8c8 2000 	streq.w	r2, [r8]
 80054a0:	605a      	strne	r2, [r3, #4]
 80054a2:	e7eb      	b.n	800547c <_malloc_r+0xa8>
 80054a4:	4623      	mov	r3, r4
 80054a6:	6864      	ldr	r4, [r4, #4]
 80054a8:	e7ae      	b.n	8005408 <_malloc_r+0x34>
 80054aa:	463c      	mov	r4, r7
 80054ac:	687f      	ldr	r7, [r7, #4]
 80054ae:	e7b6      	b.n	800541e <_malloc_r+0x4a>
 80054b0:	461a      	mov	r2, r3
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d1fb      	bne.n	80054b0 <_malloc_r+0xdc>
 80054b8:	2300      	movs	r3, #0
 80054ba:	6053      	str	r3, [r2, #4]
 80054bc:	e7de      	b.n	800547c <_malloc_r+0xa8>
 80054be:	230c      	movs	r3, #12
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f80c 	bl	80054e0 <__malloc_unlock>
 80054c8:	e794      	b.n	80053f4 <_malloc_r+0x20>
 80054ca:	6005      	str	r5, [r0, #0]
 80054cc:	e7d6      	b.n	800547c <_malloc_r+0xa8>
 80054ce:	bf00      	nop
 80054d0:	200042d4 	.word	0x200042d4

080054d4 <__malloc_lock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_lock+0x8>)
 80054d6:	f7ff bef9 	b.w	80052cc <__retarget_lock_acquire_recursive>
 80054da:	bf00      	nop
 80054dc:	200042cc 	.word	0x200042cc

080054e0 <__malloc_unlock>:
 80054e0:	4801      	ldr	r0, [pc, #4]	@ (80054e8 <__malloc_unlock+0x8>)
 80054e2:	f7ff bef4 	b.w	80052ce <__retarget_lock_release_recursive>
 80054e6:	bf00      	nop
 80054e8:	200042cc 	.word	0x200042cc

080054ec <__ssputs_r>:
 80054ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f0:	688e      	ldr	r6, [r1, #8]
 80054f2:	461f      	mov	r7, r3
 80054f4:	42be      	cmp	r6, r7
 80054f6:	680b      	ldr	r3, [r1, #0]
 80054f8:	4682      	mov	sl, r0
 80054fa:	460c      	mov	r4, r1
 80054fc:	4690      	mov	r8, r2
 80054fe:	d82d      	bhi.n	800555c <__ssputs_r+0x70>
 8005500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005504:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005508:	d026      	beq.n	8005558 <__ssputs_r+0x6c>
 800550a:	6965      	ldr	r5, [r4, #20]
 800550c:	6909      	ldr	r1, [r1, #16]
 800550e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005512:	eba3 0901 	sub.w	r9, r3, r1
 8005516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800551a:	1c7b      	adds	r3, r7, #1
 800551c:	444b      	add	r3, r9
 800551e:	106d      	asrs	r5, r5, #1
 8005520:	429d      	cmp	r5, r3
 8005522:	bf38      	it	cc
 8005524:	461d      	movcc	r5, r3
 8005526:	0553      	lsls	r3, r2, #21
 8005528:	d527      	bpl.n	800557a <__ssputs_r+0x8e>
 800552a:	4629      	mov	r1, r5
 800552c:	f7ff ff52 	bl	80053d4 <_malloc_r>
 8005530:	4606      	mov	r6, r0
 8005532:	b360      	cbz	r0, 800558e <__ssputs_r+0xa2>
 8005534:	6921      	ldr	r1, [r4, #16]
 8005536:	464a      	mov	r2, r9
 8005538:	f7ff fed2 	bl	80052e0 <memcpy>
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	81a3      	strh	r3, [r4, #12]
 8005548:	6126      	str	r6, [r4, #16]
 800554a:	6165      	str	r5, [r4, #20]
 800554c:	444e      	add	r6, r9
 800554e:	eba5 0509 	sub.w	r5, r5, r9
 8005552:	6026      	str	r6, [r4, #0]
 8005554:	60a5      	str	r5, [r4, #8]
 8005556:	463e      	mov	r6, r7
 8005558:	42be      	cmp	r6, r7
 800555a:	d900      	bls.n	800555e <__ssputs_r+0x72>
 800555c:	463e      	mov	r6, r7
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	4632      	mov	r2, r6
 8005562:	4641      	mov	r1, r8
 8005564:	f000 faa8 	bl	8005ab8 <memmove>
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	1b9b      	subs	r3, r3, r6
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4433      	add	r3, r6
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2000      	movs	r0, #0
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	462a      	mov	r2, r5
 800557c:	f000 fac6 	bl	8005b0c <_realloc_r>
 8005580:	4606      	mov	r6, r0
 8005582:	2800      	cmp	r0, #0
 8005584:	d1e0      	bne.n	8005548 <__ssputs_r+0x5c>
 8005586:	6921      	ldr	r1, [r4, #16]
 8005588:	4650      	mov	r0, sl
 800558a:	f7ff feb7 	bl	80052fc <_free_r>
 800558e:	230c      	movs	r3, #12
 8005590:	f8ca 3000 	str.w	r3, [sl]
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e7e9      	b.n	8005576 <__ssputs_r+0x8a>
	...

080055a4 <_svfiprintf_r>:
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	4698      	mov	r8, r3
 80055aa:	898b      	ldrh	r3, [r1, #12]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	b09d      	sub	sp, #116	@ 0x74
 80055b0:	4607      	mov	r7, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	d510      	bpl.n	80055da <_svfiprintf_r+0x36>
 80055b8:	690b      	ldr	r3, [r1, #16]
 80055ba:	b973      	cbnz	r3, 80055da <_svfiprintf_r+0x36>
 80055bc:	2140      	movs	r1, #64	@ 0x40
 80055be:	f7ff ff09 	bl	80053d4 <_malloc_r>
 80055c2:	6028      	str	r0, [r5, #0]
 80055c4:	6128      	str	r0, [r5, #16]
 80055c6:	b930      	cbnz	r0, 80055d6 <_svfiprintf_r+0x32>
 80055c8:	230c      	movs	r3, #12
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b01d      	add	sp, #116	@ 0x74
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d6:	2340      	movs	r3, #64	@ 0x40
 80055d8:	616b      	str	r3, [r5, #20]
 80055da:	2300      	movs	r3, #0
 80055dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80055de:	2320      	movs	r3, #32
 80055e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055e8:	2330      	movs	r3, #48	@ 0x30
 80055ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005788 <_svfiprintf_r+0x1e4>
 80055ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055f2:	f04f 0901 	mov.w	r9, #1
 80055f6:	4623      	mov	r3, r4
 80055f8:	469a      	mov	sl, r3
 80055fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055fe:	b10a      	cbz	r2, 8005604 <_svfiprintf_r+0x60>
 8005600:	2a25      	cmp	r2, #37	@ 0x25
 8005602:	d1f9      	bne.n	80055f8 <_svfiprintf_r+0x54>
 8005604:	ebba 0b04 	subs.w	fp, sl, r4
 8005608:	d00b      	beq.n	8005622 <_svfiprintf_r+0x7e>
 800560a:	465b      	mov	r3, fp
 800560c:	4622      	mov	r2, r4
 800560e:	4629      	mov	r1, r5
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff ff6b 	bl	80054ec <__ssputs_r>
 8005616:	3001      	adds	r0, #1
 8005618:	f000 80a7 	beq.w	800576a <_svfiprintf_r+0x1c6>
 800561c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800561e:	445a      	add	r2, fp
 8005620:	9209      	str	r2, [sp, #36]	@ 0x24
 8005622:	f89a 3000 	ldrb.w	r3, [sl]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 809f 	beq.w	800576a <_svfiprintf_r+0x1c6>
 800562c:	2300      	movs	r3, #0
 800562e:	f04f 32ff 	mov.w	r2, #4294967295
 8005632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005636:	f10a 0a01 	add.w	sl, sl, #1
 800563a:	9304      	str	r3, [sp, #16]
 800563c:	9307      	str	r3, [sp, #28]
 800563e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005642:	931a      	str	r3, [sp, #104]	@ 0x68
 8005644:	4654      	mov	r4, sl
 8005646:	2205      	movs	r2, #5
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	484e      	ldr	r0, [pc, #312]	@ (8005788 <_svfiprintf_r+0x1e4>)
 800564e:	f7fa fde7 	bl	8000220 <memchr>
 8005652:	9a04      	ldr	r2, [sp, #16]
 8005654:	b9d8      	cbnz	r0, 800568e <_svfiprintf_r+0xea>
 8005656:	06d0      	lsls	r0, r2, #27
 8005658:	bf44      	itt	mi
 800565a:	2320      	movmi	r3, #32
 800565c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005660:	0711      	lsls	r1, r2, #28
 8005662:	bf44      	itt	mi
 8005664:	232b      	movmi	r3, #43	@ 0x2b
 8005666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800566a:	f89a 3000 	ldrb.w	r3, [sl]
 800566e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005670:	d015      	beq.n	800569e <_svfiprintf_r+0xfa>
 8005672:	9a07      	ldr	r2, [sp, #28]
 8005674:	4654      	mov	r4, sl
 8005676:	2000      	movs	r0, #0
 8005678:	f04f 0c0a 	mov.w	ip, #10
 800567c:	4621      	mov	r1, r4
 800567e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005682:	3b30      	subs	r3, #48	@ 0x30
 8005684:	2b09      	cmp	r3, #9
 8005686:	d94b      	bls.n	8005720 <_svfiprintf_r+0x17c>
 8005688:	b1b0      	cbz	r0, 80056b8 <_svfiprintf_r+0x114>
 800568a:	9207      	str	r2, [sp, #28]
 800568c:	e014      	b.n	80056b8 <_svfiprintf_r+0x114>
 800568e:	eba0 0308 	sub.w	r3, r0, r8
 8005692:	fa09 f303 	lsl.w	r3, r9, r3
 8005696:	4313      	orrs	r3, r2
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	46a2      	mov	sl, r4
 800569c:	e7d2      	b.n	8005644 <_svfiprintf_r+0xa0>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	1d19      	adds	r1, r3, #4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	9103      	str	r1, [sp, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bfbb      	ittet	lt
 80056aa:	425b      	neglt	r3, r3
 80056ac:	f042 0202 	orrlt.w	r2, r2, #2
 80056b0:	9307      	strge	r3, [sp, #28]
 80056b2:	9307      	strlt	r3, [sp, #28]
 80056b4:	bfb8      	it	lt
 80056b6:	9204      	strlt	r2, [sp, #16]
 80056b8:	7823      	ldrb	r3, [r4, #0]
 80056ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80056bc:	d10a      	bne.n	80056d4 <_svfiprintf_r+0x130>
 80056be:	7863      	ldrb	r3, [r4, #1]
 80056c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c2:	d132      	bne.n	800572a <_svfiprintf_r+0x186>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	9203      	str	r2, [sp, #12]
 80056cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056d0:	3402      	adds	r4, #2
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005798 <_svfiprintf_r+0x1f4>
 80056d8:	7821      	ldrb	r1, [r4, #0]
 80056da:	2203      	movs	r2, #3
 80056dc:	4650      	mov	r0, sl
 80056de:	f7fa fd9f 	bl	8000220 <memchr>
 80056e2:	b138      	cbz	r0, 80056f4 <_svfiprintf_r+0x150>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	eba0 000a 	sub.w	r0, r0, sl
 80056ea:	2240      	movs	r2, #64	@ 0x40
 80056ec:	4082      	lsls	r2, r0
 80056ee:	4313      	orrs	r3, r2
 80056f0:	3401      	adds	r4, #1
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f8:	4824      	ldr	r0, [pc, #144]	@ (800578c <_svfiprintf_r+0x1e8>)
 80056fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056fe:	2206      	movs	r2, #6
 8005700:	f7fa fd8e 	bl	8000220 <memchr>
 8005704:	2800      	cmp	r0, #0
 8005706:	d036      	beq.n	8005776 <_svfiprintf_r+0x1d2>
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <_svfiprintf_r+0x1ec>)
 800570a:	bb1b      	cbnz	r3, 8005754 <_svfiprintf_r+0x1b0>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	3307      	adds	r3, #7
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	3308      	adds	r3, #8
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800571a:	4433      	add	r3, r6
 800571c:	9309      	str	r3, [sp, #36]	@ 0x24
 800571e:	e76a      	b.n	80055f6 <_svfiprintf_r+0x52>
 8005720:	fb0c 3202 	mla	r2, ip, r2, r3
 8005724:	460c      	mov	r4, r1
 8005726:	2001      	movs	r0, #1
 8005728:	e7a8      	b.n	800567c <_svfiprintf_r+0xd8>
 800572a:	2300      	movs	r3, #0
 800572c:	3401      	adds	r4, #1
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	4619      	mov	r1, r3
 8005732:	f04f 0c0a 	mov.w	ip, #10
 8005736:	4620      	mov	r0, r4
 8005738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800573c:	3a30      	subs	r2, #48	@ 0x30
 800573e:	2a09      	cmp	r2, #9
 8005740:	d903      	bls.n	800574a <_svfiprintf_r+0x1a6>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c6      	beq.n	80056d4 <_svfiprintf_r+0x130>
 8005746:	9105      	str	r1, [sp, #20]
 8005748:	e7c4      	b.n	80056d4 <_svfiprintf_r+0x130>
 800574a:	fb0c 2101 	mla	r1, ip, r1, r2
 800574e:	4604      	mov	r4, r0
 8005750:	2301      	movs	r3, #1
 8005752:	e7f0      	b.n	8005736 <_svfiprintf_r+0x192>
 8005754:	ab03      	add	r3, sp, #12
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	462a      	mov	r2, r5
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <_svfiprintf_r+0x1f0>)
 800575c:	a904      	add	r1, sp, #16
 800575e:	4638      	mov	r0, r7
 8005760:	f3af 8000 	nop.w
 8005764:	1c42      	adds	r2, r0, #1
 8005766:	4606      	mov	r6, r0
 8005768:	d1d6      	bne.n	8005718 <_svfiprintf_r+0x174>
 800576a:	89ab      	ldrh	r3, [r5, #12]
 800576c:	065b      	lsls	r3, r3, #25
 800576e:	f53f af2d 	bmi.w	80055cc <_svfiprintf_r+0x28>
 8005772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005774:	e72c      	b.n	80055d0 <_svfiprintf_r+0x2c>
 8005776:	ab03      	add	r3, sp, #12
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	462a      	mov	r2, r5
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <_svfiprintf_r+0x1f0>)
 800577e:	a904      	add	r1, sp, #16
 8005780:	4638      	mov	r0, r7
 8005782:	f000 f879 	bl	8005878 <_printf_i>
 8005786:	e7ed      	b.n	8005764 <_svfiprintf_r+0x1c0>
 8005788:	08005d49 	.word	0x08005d49
 800578c:	08005d53 	.word	0x08005d53
 8005790:	00000000 	.word	0x00000000
 8005794:	080054ed 	.word	0x080054ed
 8005798:	08005d4f 	.word	0x08005d4f

0800579c <_printf_common>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	4616      	mov	r6, r2
 80057a2:	4698      	mov	r8, r3
 80057a4:	688a      	ldr	r2, [r1, #8]
 80057a6:	690b      	ldr	r3, [r1, #16]
 80057a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bfb8      	it	lt
 80057b0:	4613      	movlt	r3, r2
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057b8:	4607      	mov	r7, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	b10a      	cbz	r2, 80057c2 <_printf_common+0x26>
 80057be:	3301      	adds	r3, #1
 80057c0:	6033      	str	r3, [r6, #0]
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	0699      	lsls	r1, r3, #26
 80057c6:	bf42      	ittt	mi
 80057c8:	6833      	ldrmi	r3, [r6, #0]
 80057ca:	3302      	addmi	r3, #2
 80057cc:	6033      	strmi	r3, [r6, #0]
 80057ce:	6825      	ldr	r5, [r4, #0]
 80057d0:	f015 0506 	ands.w	r5, r5, #6
 80057d4:	d106      	bne.n	80057e4 <_printf_common+0x48>
 80057d6:	f104 0a19 	add.w	sl, r4, #25
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	6832      	ldr	r2, [r6, #0]
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	42ab      	cmp	r3, r5
 80057e2:	dc26      	bgt.n	8005832 <_printf_common+0x96>
 80057e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	3b00      	subs	r3, #0
 80057ec:	bf18      	it	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	0692      	lsls	r2, r2, #26
 80057f2:	d42b      	bmi.n	800584c <_printf_common+0xb0>
 80057f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057f8:	4641      	mov	r1, r8
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c8      	blx	r9
 80057fe:	3001      	adds	r0, #1
 8005800:	d01e      	beq.n	8005840 <_printf_common+0xa4>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	f003 0306 	and.w	r3, r3, #6
 800580a:	2b04      	cmp	r3, #4
 800580c:	bf02      	ittt	eq
 800580e:	68e5      	ldreq	r5, [r4, #12]
 8005810:	6833      	ldreq	r3, [r6, #0]
 8005812:	1aed      	subeq	r5, r5, r3
 8005814:	68a3      	ldr	r3, [r4, #8]
 8005816:	bf0c      	ite	eq
 8005818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800581c:	2500      	movne	r5, #0
 800581e:	4293      	cmp	r3, r2
 8005820:	bfc4      	itt	gt
 8005822:	1a9b      	subgt	r3, r3, r2
 8005824:	18ed      	addgt	r5, r5, r3
 8005826:	2600      	movs	r6, #0
 8005828:	341a      	adds	r4, #26
 800582a:	42b5      	cmp	r5, r6
 800582c:	d11a      	bne.n	8005864 <_printf_common+0xc8>
 800582e:	2000      	movs	r0, #0
 8005830:	e008      	b.n	8005844 <_printf_common+0xa8>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4641      	mov	r1, r8
 8005838:	4638      	mov	r0, r7
 800583a:	47c8      	blx	r9
 800583c:	3001      	adds	r0, #1
 800583e:	d103      	bne.n	8005848 <_printf_common+0xac>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	3501      	adds	r5, #1
 800584a:	e7c6      	b.n	80057da <_printf_common+0x3e>
 800584c:	18e1      	adds	r1, r4, r3
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	2030      	movs	r0, #48	@ 0x30
 8005852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005856:	4422      	add	r2, r4
 8005858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800585c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005860:	3302      	adds	r3, #2
 8005862:	e7c7      	b.n	80057f4 <_printf_common+0x58>
 8005864:	2301      	movs	r3, #1
 8005866:	4622      	mov	r2, r4
 8005868:	4641      	mov	r1, r8
 800586a:	4638      	mov	r0, r7
 800586c:	47c8      	blx	r9
 800586e:	3001      	adds	r0, #1
 8005870:	d0e6      	beq.n	8005840 <_printf_common+0xa4>
 8005872:	3601      	adds	r6, #1
 8005874:	e7d9      	b.n	800582a <_printf_common+0x8e>
	...

08005878 <_printf_i>:
 8005878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	7e0f      	ldrb	r7, [r1, #24]
 800587e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005880:	2f78      	cmp	r7, #120	@ 0x78
 8005882:	4691      	mov	r9, r2
 8005884:	4680      	mov	r8, r0
 8005886:	460c      	mov	r4, r1
 8005888:	469a      	mov	sl, r3
 800588a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800588e:	d807      	bhi.n	80058a0 <_printf_i+0x28>
 8005890:	2f62      	cmp	r7, #98	@ 0x62
 8005892:	d80a      	bhi.n	80058aa <_printf_i+0x32>
 8005894:	2f00      	cmp	r7, #0
 8005896:	f000 80d2 	beq.w	8005a3e <_printf_i+0x1c6>
 800589a:	2f58      	cmp	r7, #88	@ 0x58
 800589c:	f000 80b9 	beq.w	8005a12 <_printf_i+0x19a>
 80058a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058a8:	e03a      	b.n	8005920 <_printf_i+0xa8>
 80058aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ae:	2b15      	cmp	r3, #21
 80058b0:	d8f6      	bhi.n	80058a0 <_printf_i+0x28>
 80058b2:	a101      	add	r1, pc, #4	@ (adr r1, 80058b8 <_printf_i+0x40>)
 80058b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005925 	.word	0x08005925
 80058c0:	080058a1 	.word	0x080058a1
 80058c4:	080058a1 	.word	0x080058a1
 80058c8:	080058a1 	.word	0x080058a1
 80058cc:	080058a1 	.word	0x080058a1
 80058d0:	08005925 	.word	0x08005925
 80058d4:	080058a1 	.word	0x080058a1
 80058d8:	080058a1 	.word	0x080058a1
 80058dc:	080058a1 	.word	0x080058a1
 80058e0:	080058a1 	.word	0x080058a1
 80058e4:	08005a25 	.word	0x08005a25
 80058e8:	0800594f 	.word	0x0800594f
 80058ec:	080059df 	.word	0x080059df
 80058f0:	080058a1 	.word	0x080058a1
 80058f4:	080058a1 	.word	0x080058a1
 80058f8:	08005a47 	.word	0x08005a47
 80058fc:	080058a1 	.word	0x080058a1
 8005900:	0800594f 	.word	0x0800594f
 8005904:	080058a1 	.word	0x080058a1
 8005908:	080058a1 	.word	0x080058a1
 800590c:	080059e7 	.word	0x080059e7
 8005910:	6833      	ldr	r3, [r6, #0]
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6032      	str	r2, [r6, #0]
 8005918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800591c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005920:	2301      	movs	r3, #1
 8005922:	e09d      	b.n	8005a60 <_printf_i+0x1e8>
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	1d19      	adds	r1, r3, #4
 800592a:	6031      	str	r1, [r6, #0]
 800592c:	0606      	lsls	r6, r0, #24
 800592e:	d501      	bpl.n	8005934 <_printf_i+0xbc>
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	e003      	b.n	800593c <_printf_i+0xc4>
 8005934:	0645      	lsls	r5, r0, #25
 8005936:	d5fb      	bpl.n	8005930 <_printf_i+0xb8>
 8005938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800593c:	2d00      	cmp	r5, #0
 800593e:	da03      	bge.n	8005948 <_printf_i+0xd0>
 8005940:	232d      	movs	r3, #45	@ 0x2d
 8005942:	426d      	negs	r5, r5
 8005944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005948:	4859      	ldr	r0, [pc, #356]	@ (8005ab0 <_printf_i+0x238>)
 800594a:	230a      	movs	r3, #10
 800594c:	e011      	b.n	8005972 <_printf_i+0xfa>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	0608      	lsls	r0, r1, #24
 8005954:	f853 5b04 	ldr.w	r5, [r3], #4
 8005958:	d402      	bmi.n	8005960 <_printf_i+0xe8>
 800595a:	0649      	lsls	r1, r1, #25
 800595c:	bf48      	it	mi
 800595e:	b2ad      	uxthmi	r5, r5
 8005960:	2f6f      	cmp	r7, #111	@ 0x6f
 8005962:	4853      	ldr	r0, [pc, #332]	@ (8005ab0 <_printf_i+0x238>)
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	bf14      	ite	ne
 8005968:	230a      	movne	r3, #10
 800596a:	2308      	moveq	r3, #8
 800596c:	2100      	movs	r1, #0
 800596e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005972:	6866      	ldr	r6, [r4, #4]
 8005974:	60a6      	str	r6, [r4, #8]
 8005976:	2e00      	cmp	r6, #0
 8005978:	bfa2      	ittt	ge
 800597a:	6821      	ldrge	r1, [r4, #0]
 800597c:	f021 0104 	bicge.w	r1, r1, #4
 8005980:	6021      	strge	r1, [r4, #0]
 8005982:	b90d      	cbnz	r5, 8005988 <_printf_i+0x110>
 8005984:	2e00      	cmp	r6, #0
 8005986:	d04b      	beq.n	8005a20 <_printf_i+0x1a8>
 8005988:	4616      	mov	r6, r2
 800598a:	fbb5 f1f3 	udiv	r1, r5, r3
 800598e:	fb03 5711 	mls	r7, r3, r1, r5
 8005992:	5dc7      	ldrb	r7, [r0, r7]
 8005994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005998:	462f      	mov	r7, r5
 800599a:	42bb      	cmp	r3, r7
 800599c:	460d      	mov	r5, r1
 800599e:	d9f4      	bls.n	800598a <_printf_i+0x112>
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d10b      	bne.n	80059bc <_printf_i+0x144>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	07df      	lsls	r7, r3, #31
 80059a8:	d508      	bpl.n	80059bc <_printf_i+0x144>
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	6861      	ldr	r1, [r4, #4]
 80059ae:	4299      	cmp	r1, r3
 80059b0:	bfde      	ittt	le
 80059b2:	2330      	movle	r3, #48	@ 0x30
 80059b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059bc:	1b92      	subs	r2, r2, r6
 80059be:	6122      	str	r2, [r4, #16]
 80059c0:	f8cd a000 	str.w	sl, [sp]
 80059c4:	464b      	mov	r3, r9
 80059c6:	aa03      	add	r2, sp, #12
 80059c8:	4621      	mov	r1, r4
 80059ca:	4640      	mov	r0, r8
 80059cc:	f7ff fee6 	bl	800579c <_printf_common>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d14a      	bne.n	8005a6a <_printf_i+0x1f2>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	b004      	add	sp, #16
 80059da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f043 0320 	orr.w	r3, r3, #32
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	4833      	ldr	r0, [pc, #204]	@ (8005ab4 <_printf_i+0x23c>)
 80059e8:	2778      	movs	r7, #120	@ 0x78
 80059ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	6831      	ldr	r1, [r6, #0]
 80059f2:	061f      	lsls	r7, r3, #24
 80059f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059f8:	d402      	bmi.n	8005a00 <_printf_i+0x188>
 80059fa:	065f      	lsls	r7, r3, #25
 80059fc:	bf48      	it	mi
 80059fe:	b2ad      	uxthmi	r5, r5
 8005a00:	6031      	str	r1, [r6, #0]
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	bf44      	itt	mi
 8005a06:	f043 0320 	orrmi.w	r3, r3, #32
 8005a0a:	6023      	strmi	r3, [r4, #0]
 8005a0c:	b11d      	cbz	r5, 8005a16 <_printf_i+0x19e>
 8005a0e:	2310      	movs	r3, #16
 8005a10:	e7ac      	b.n	800596c <_printf_i+0xf4>
 8005a12:	4827      	ldr	r0, [pc, #156]	@ (8005ab0 <_printf_i+0x238>)
 8005a14:	e7e9      	b.n	80059ea <_printf_i+0x172>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f023 0320 	bic.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	e7f6      	b.n	8005a0e <_printf_i+0x196>
 8005a20:	4616      	mov	r6, r2
 8005a22:	e7bd      	b.n	80059a0 <_printf_i+0x128>
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	6961      	ldr	r1, [r4, #20]
 8005a2a:	1d18      	adds	r0, r3, #4
 8005a2c:	6030      	str	r0, [r6, #0]
 8005a2e:	062e      	lsls	r6, r5, #24
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0x1c0>
 8005a34:	6019      	str	r1, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <_printf_i+0x1c6>
 8005a38:	0668      	lsls	r0, r5, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0x1bc>
 8005a3c:	8019      	strh	r1, [r3, #0]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	4616      	mov	r6, r2
 8005a44:	e7bc      	b.n	80059c0 <_printf_i+0x148>
 8005a46:	6833      	ldr	r3, [r6, #0]
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	6032      	str	r2, [r6, #0]
 8005a4c:	681e      	ldr	r6, [r3, #0]
 8005a4e:	6862      	ldr	r2, [r4, #4]
 8005a50:	2100      	movs	r1, #0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7fa fbe4 	bl	8000220 <memchr>
 8005a58:	b108      	cbz	r0, 8005a5e <_printf_i+0x1e6>
 8005a5a:	1b80      	subs	r0, r0, r6
 8005a5c:	6060      	str	r0, [r4, #4]
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	2300      	movs	r3, #0
 8005a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a68:	e7aa      	b.n	80059c0 <_printf_i+0x148>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4640      	mov	r0, r8
 8005a72:	47d0      	blx	sl
 8005a74:	3001      	adds	r0, #1
 8005a76:	d0ad      	beq.n	80059d4 <_printf_i+0x15c>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	079b      	lsls	r3, r3, #30
 8005a7c:	d413      	bmi.n	8005aa6 <_printf_i+0x22e>
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	9b03      	ldr	r3, [sp, #12]
 8005a82:	4298      	cmp	r0, r3
 8005a84:	bfb8      	it	lt
 8005a86:	4618      	movlt	r0, r3
 8005a88:	e7a6      	b.n	80059d8 <_printf_i+0x160>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	47d0      	blx	sl
 8005a94:	3001      	adds	r0, #1
 8005a96:	d09d      	beq.n	80059d4 <_printf_i+0x15c>
 8005a98:	3501      	adds	r5, #1
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	1a5b      	subs	r3, r3, r1
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dcf2      	bgt.n	8005a8a <_printf_i+0x212>
 8005aa4:	e7eb      	b.n	8005a7e <_printf_i+0x206>
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	f104 0619 	add.w	r6, r4, #25
 8005aac:	e7f5      	b.n	8005a9a <_printf_i+0x222>
 8005aae:	bf00      	nop
 8005ab0:	08005d5a 	.word	0x08005d5a
 8005ab4:	08005d6b 	.word	0x08005d6b

08005ab8 <memmove>:
 8005ab8:	4288      	cmp	r0, r1
 8005aba:	b510      	push	{r4, lr}
 8005abc:	eb01 0402 	add.w	r4, r1, r2
 8005ac0:	d902      	bls.n	8005ac8 <memmove+0x10>
 8005ac2:	4284      	cmp	r4, r0
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	d807      	bhi.n	8005ad8 <memmove+0x20>
 8005ac8:	1e43      	subs	r3, r0, #1
 8005aca:	42a1      	cmp	r1, r4
 8005acc:	d008      	beq.n	8005ae0 <memmove+0x28>
 8005ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ad6:	e7f8      	b.n	8005aca <memmove+0x12>
 8005ad8:	4402      	add	r2, r0
 8005ada:	4601      	mov	r1, r0
 8005adc:	428a      	cmp	r2, r1
 8005ade:	d100      	bne.n	8005ae2 <memmove+0x2a>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aea:	e7f7      	b.n	8005adc <memmove+0x24>

08005aec <_sbrk_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d06      	ldr	r5, [pc, #24]	@ (8005b08 <_sbrk_r+0x1c>)
 8005af0:	2300      	movs	r3, #0
 8005af2:	4604      	mov	r4, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	f7fb f9f2 	bl	8000ee0 <_sbrk>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_sbrk_r+0x1a>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_sbrk_r+0x1a>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	200042c8 	.word	0x200042c8

08005b0c <_realloc_r>:
 8005b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	4680      	mov	r8, r0
 8005b12:	4615      	mov	r5, r2
 8005b14:	460c      	mov	r4, r1
 8005b16:	b921      	cbnz	r1, 8005b22 <_realloc_r+0x16>
 8005b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	f7ff bc59 	b.w	80053d4 <_malloc_r>
 8005b22:	b92a      	cbnz	r2, 8005b30 <_realloc_r+0x24>
 8005b24:	f7ff fbea 	bl	80052fc <_free_r>
 8005b28:	2400      	movs	r4, #0
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b30:	f000 f81a 	bl	8005b68 <_malloc_usable_size_r>
 8005b34:	4285      	cmp	r5, r0
 8005b36:	4606      	mov	r6, r0
 8005b38:	d802      	bhi.n	8005b40 <_realloc_r+0x34>
 8005b3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b3e:	d8f4      	bhi.n	8005b2a <_realloc_r+0x1e>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fc46 	bl	80053d4 <_malloc_r>
 8005b48:	4607      	mov	r7, r0
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d0ec      	beq.n	8005b28 <_realloc_r+0x1c>
 8005b4e:	42b5      	cmp	r5, r6
 8005b50:	462a      	mov	r2, r5
 8005b52:	4621      	mov	r1, r4
 8005b54:	bf28      	it	cs
 8005b56:	4632      	movcs	r2, r6
 8005b58:	f7ff fbc2 	bl	80052e0 <memcpy>
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f7ff fbcc 	bl	80052fc <_free_r>
 8005b64:	463c      	mov	r4, r7
 8005b66:	e7e0      	b.n	8005b2a <_realloc_r+0x1e>

08005b68 <_malloc_usable_size_r>:
 8005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6c:	1f18      	subs	r0, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfbc      	itt	lt
 8005b72:	580b      	ldrlt	r3, [r1, r0]
 8005b74:	18c0      	addlt	r0, r0, r3
 8005b76:	4770      	bx	lr

08005b78 <_init>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr

08005b84 <_fini>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr
